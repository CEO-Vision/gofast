<?php

/**
 * Define a time interval pivot so we can display dates in two ways :
 * - below this value, a "time-ago" interval is displayed with "ago" appended.
 * - beyond, dates are displayed normally and formatted using 'short' format.
 */
define('GOFAST_TIME_DIFF_PIVOT', 86400);

/**
 * Define the path where is located Tika jar.
 */
define('GOFAST_TIKA_PATH', DRUPAL_ROOT . '/tika_executable');

/**
 * Define the text to display when referring to the platform. Do not confuse
 * with variable 'site_name' that is configurable on the Gofast admin page.
 */
define('GOFAST_NAME', 'GoFast');


/**
 * Define variable name containing contextual messages params for each users
 * For exemple it contains if we must show onlyoffice warning popup or not for the current user
 */
define('GOFAST_CONTEXTUAL_MESSAGES_VARIABLE_NAME', 'gofast_contextual_messages_params');

/**
 * Define variable name containing flag indicate if a reverse redirection must be done from old url_alias into node/XX url
 */
define('GOFAST_REVERSE_ALIAS_REDIRECTION_ACTIVATED', 'gofast_reverse_alias_redirection_activated');

/**
 * Define variable name containing table name for D6 url_alias
 */
define('GOFAST_REVERSE_ALIAS_REDIRECTION_TABLE', 'd6_url_alias');

/**
 * Define default value for checkbox so send or not notifications when edit node
 */
define('GOFAST_DEFAULT_VALUE_PREVENT_NOTIFY', variable_get('gofast_default_value_prevent_notify', false));

/**
 * Define class applied to display form element
 */
define('GOFAST_CLASS_PREVENT_NOTIFY', variable_get('GOFAST_CLASS_PREVENT_NOTIFY', "gofast_display_none"));

module_load_include('inc', 'gofast', 'gofast.settings');
module_load_include('inc', 'gofast', 'gofast.utils');
module_load_include('inc', 'gofast', 'gofast.ztree');
module_load_include('inc', 'gofast', 'gofast.xeditable');
module_load_include('inc', 'gofast', 'gofast.poll');
module_load_include('inc', 'gofast', 'gofast_api');
module_load_include('inc', 'gofast', 'gofast.integrity');

function gofast_get_admin_pwd() {
  return variable_get('admin_password', '');
}

/**
 * Implements hook_init()
 *  Perform setup tasks for non-cached page requests.
 *
 * @see https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_init/7
 */
function gofast_init() {
   #GOFAST-6288 override drupal cookie setting
  if (isset($_COOKIE['has_js']) && $_COOKIE['has_js']) {
    setcookie('has_js', 1, null, '/', null, true, true);
  }

  drupal_add_js(drupal_get_path('module', 'gofast_og') . "/gofast_og.js");
  global $base_url, $base_path, $user, $dev_mode,$technically_changed,$mobile_url,$prevent_check_alfresco_status;
  $parts = explode('.', $_SERVER['HTTP_HOST']);
  $mobile_prefix_url = variable_get_value('mobile_prefix_url');
  $parts[0] = $mobile_prefix_url;
  $mobile_url = $_SERVER["REQUEST_SCHEME"]."://". implode(".", $parts);
  drupal_add_library('gofast', 'main', TRUE);
  if (preg_match("/(Trident\/(\d{2,}|7|8|9)(.*)rv:(\d{2,}))|(MSIE\ (\d{2,}|8|9)(.*)Tablet\ PC)|(Trident\/(\d{2,}|7|8|9))/", $_SERVER["HTTP_USER_AGENT"], $match) != 0) {

  }else{
    drupal_add_library('gofast', 'gofast_bootstrap_tour', TRUE);
 }

  drupal_add_js(array('userName' => $user->name), 'setting');
  drupal_add_js(array('message_welcom' => variable_get('welcome_message', 'Welcome to GoFast' )), 'setting');
  drupal_add_js(array('gofast_version' => system_get_info('module', 'gofast')['version']) , 'setting');
  drupal_add_js(array('site_name' => variable_get('site_name')), 'setting');
  drupal_add_js(array('saml_enabled' => !empty(saml_sp__load_all_idps())), 'setting');

  if (gofast_request_is_ajax()) {
    return;
  }

  //Load CKEditor (Don't load in some page because it will be loaded later)
  if(strpos(current_path(), "node/add/") === FALSE && function_exists("libraries_get_path")){
    $ckeditor_path = drupal_get_path('module', 'ckeditor');
    $ckeditor_lib_path = libraries_get_path('ckeditor');
    $ckeditor_link_path = drupal_get_path('module', 'ckeditor_link');

    drupal_add_css($ckeditor_link_path . "/ckeditor_link.css");
    drupal_add_css($ckeditor_path . "/css/ckeditor.editor.css");
    drupal_add_css($ckeditor_path . "/css/ckeditor.css");

    drupal_add_js($ckeditor_path . "/includes/ckeditor.utils.js");
    drupal_add_js($ckeditor_lib_path . "/ckeditor.js");
    drupal_add_js($ckeditor_path . "/ckeditor.styles.js");
    drupal_add_js($ckeditor_path . "/ckeditor.config.js");
  }

  if(function_exists('ckeditor_profile_load') && $_SERVER['REQUEST_URI'] != '/gofast-cron.php' ){

    if(gofast_mobile_is_mobile_domain() != TRUE ){
      $profile = ckeditor_profile_load('Full');
      drupal_add_js('var cke_settings_full = '.json_encode($profile).';', 'inline');
      $profile = ckeditor_profile_load('Advanced');
      drupal_add_js('var cke_settings_advanced = '.json_encode($profile).';', 'inline');
    }else{
      $profile = ckeditor_profile_load('Mobile');
      drupal_add_js('var cke_settings_full = '.json_encode($profile).';', 'inline');
    }

    $profile = ckeditor_profile_load('Blog');
    drupal_add_js('var cke_settings_blog = '.json_encode($profile).';', 'inline');
  }

  // Defines whether we are in dev environment or not
  if(module_exists('gofast_dev')) {
    $dev_mode = TRUE;
  } else {
    $dev_mode = FALSE;
  }
  drupal_add_js(array('gofast' => array('dev_mode' => $dev_mode)), 'setting');

  if ($user->uid === '1') {
    // In administration screens, prevents "Uncaught TypeError: Cannot read
    // property 'prototype' of undefined".
    drupal_add_library('system', 'drupal.ajax');
  }

  drupal_add_js(array('gofast' => array(
      'modules' => gofast_get_modules_list(),
      'baseUrl' => $base_url,
      'basePath' => $base_path,
      'browser' => gofast_get_browser()
    // ...
    )), 'setting');


 //remove potentially language code from the url ( may happened if we use gofast2 links)
  $first_arg = arg(0);
  if($first_arg == 'fr' || $first_arg == 'en'){
     $_GET['q'] = str_replace($first_arg, "", current_path());
     if($_GET['q'] == ""){
        $_GET['q'] = "activity";
     }
  }

  //check if the reverse url_alias redirect is activated or not
  $flag_url_alias_reverse_redirection_activated = variable_get(GOFAST_REVERSE_ALIAS_REDIRECTION_ACTIVATED, false);
  if($flag_url_alias_reverse_redirection_activated == true){
    $nid = gofast_get_reverse_url_alias(current_path());
    if($nid !== false){
        drupal_goto("node/".$nid);
    }
  }


  //Include gofast forms
  module_load_include('inc', 'gofast', 'gofast_forms');

  //Add Vote updown CSS
  drupal_add_css(drupal_get_path('module', 'vud_comment') . '/vud_comment.css');
  drupal_add_css(drupal_get_path('module', 'vud_comment') . '/../widgets/updown/updown.css');
}

/**
 * Implements hook_page_alter().
 */
function gofast_page_alter($page) {

  ## Check user agent to prevent unsupported IE
  preg_match('/MSIE (.*?);/', $_SERVER['HTTP_USER_AGENT'], $matches);
  if (count($matches) < 2) {
    preg_match('/Trident\/\d{1,2}.\d{1,2}; rv:([0-9]*)/', $_SERVER['HTTP_USER_AGENT'], $matches);
  }
  if (count($matches) > 1 && strpos($_SERVER['HTTP_USER_AGENT'], "ms-office") === FALSE) {
    if ($_SERVER['REQUEST_URI'] !== "/not_supported") {
      header("Location: /not_supported");
    }
  }
}

/**
 * Implements hook_cron()
 */
function gofast_cron() {
  global $base_url;

  $adm = user_load('5');
  $hour = date("G");
  $minute = date("i");

  if ($hour == 12 && $minute == 00) {
    gofast_node_deadline_notify();
  }

  //check gofast's status
  $gofast_status = variable_get("gofast_status", array());

  /*
   * Alfresco status
   */
  $alfresco_status = gofast_get_http_code('http://localhost:8080' . '/alfresco/');
  $alfresco_status_second_try = gofast_get_http_code('http://localhost:8080' . '/alfresco/');
  if (200 !== $alfresco_status && 200 !== $alfresco_status_second_try && $gofast_status["alfresco"]["state"] !== "KO") {
    watchdog("GOFAST Report", "Alfresco is down");

    //autorestart
    $service_name = "alfresco";
    $autorestart = gofast_check_service_autorestart_activated($service_name);
    if ($autorestart) {
      watchdog("GOFAST Report", "Auto-restart is activated, try to restart service Alfresco");
      $_GET["service"] = $service_name;
      gofast_dashboard_restart_service(true);
    }

    $gofast_status["alfresco"]["state"] = "KO";
    $timestamp_up = $gofast_status["alfresco"]["timestamp"];
    $gofast_status["alfresco"]["timestamp"] = time();

    //Prepare mail

    $subject = "[GoFast Report] Alfresco down on " . $base_url;
    $title = "[GoFast Report] Alfresco down on " . $base_url;
    $footer = "GoFast Alert notification E-mail";

    $body = "Alfresco down on " . $base_url . "<br />";
    $body .= "Alfresco was up since  " . date("j/m/Y H:i:s", $timestamp_up);

    if ($autorestart) {
      $body .= "<br />Auto-restart is activated for this service, it will try to restart automatically";
    }

    $recpt = array(array('recpt' => $adm->mail, 'method' => 'to'));

    //Send mail
    //Reporting only for community (Zabbix for enterprise)
    if (module_exists('gofast_community')) {
      $mail_sent = gofast_mail_queue_api_send_mail($subject, $title, $footer, $body, $recpt);
      if ($mail_sent == true) {
        $gofast_status["alfresco"]["notified"] = true;
      }
    }
  }
  elseif (200 == $alfresco_status && $gofast_status["alfresco"]["state"] == "KO") {
    watchdog("GOFAST Report", "Alfresco is up now");
    $gofast_status["alfresco"]["state"] = "OK";
    $timestamp_down = $gofast_status["alfresco"]["timestamp"];
    $gofast_status["alfresco"]["timestamp"] = time();

    //Prepare mail
    $subject = "[GoFast Report] Alfresco is up now on " . $base_url;
    $title = "[GoFast Report] Alfresco is up now on " . $base_url;
    $footer = "GoFast Alert notification E-mail";

    $body = "Alfresco is up now on " . $base_url . "<br />";
    $body .= "Downtime started on " . date("j/m/Y H:i:s", $timestamp_down);
    $recpt = array(array('recpt' => $adm->mail, 'method' => 'to'));

    //Send mail
    //Reporting only for community (Zabbix for enterprise)
    if (module_exists('gofast_community')) {
      $mail_sent = gofast_mail_queue_api_send_mail($subject, $title, $footer, $body, $recpt);
      if ($mail_sent == true) {
        $gofast_status["alfresco"]["notified"] = true;
      }
    }
  }

  /**
   * Solr Status
   */
  ctools_include('apachesolr.admin', 'apachesolr', '');
  $environment = apachesolr_environment_load(GOFAST_SEARCH_ENV_ID);
  $solr_status = apachesolr_server_status($environment['url'], $environment['service_class']);

  if (!$solr_status && $gofast_status["solr"]["state"] !== "KO") {
    watchdog("GOFAST Report", "Solr is down");

    //autorestart
    $service_name = "solr";
    $autorestart = gofast_check_service_autorestart_activated($service_name);
    if ($autorestart) {
      watchdog("GOFAST Report", "Auto-restart is activated, try to restart service Solr");
      $_GET["service"] = $service_name;
      gofast_dashboard_restart_service(true);
    }

    $gofast_status["solr"]["state"] = "KO";
    $timestamp_up = $gofast_status["solr"]["timestamp"];
    $gofast_status["solr"]["timestamp"] = time();

    //Prepare mail
    $subject = "[GoFast Report] Solr down on " . $base_url;
    $title = "[GoFast Report] Solr down on " . $base_url;
    $footer = "GoFast Alert notification E-mail";

    $body = "Solr down on " . $base_url . "<br />";
    if ($timestamp_up) {
      $body .= "Solr was up since  " . date("j/m/Y H:i:s", $timestamp_up);
    }

    if ($autorestart) {
      $body .= "<br />Auto-restart is activated for this service, it will try to restart automatically";
    }
    $recpt = array(array('recpt' => $adm->mail, 'method' => 'to'));

    //Send mail
    //Reporting only for community (Zabbix for enterprise)
    if (module_exists('gofast_community')) {
      $mail_sent = gofast_mail_queue_api_send_mail($subject, $title, $footer, $body, $recpt);
      if ($mail_sent == true) {
        $gofast_status["solr"]["notified"] = true;
      }
    }
  }
  elseif ($solr_status && $gofast_status["solr"]["state"] == "KO") {
    watchdog("GOFAST Report", "Solr is up now");
    $gofast_status["solr"]["state"] = "OK";
    $timestamp_down = $gofast_status["solr"]["timestamp"];
    $gofast_status["solr"]["timestamp"] = time();

    //Prepare mail
    $subject = "[GoFast Report] Solr is up now on " . $base_url;
    $title = "[GoFast Report] Solr is up now on " . $base_url;
    $footer = "GoFast Alert notification E-mail";

    $body = "Solr is up now on " . $base_url . "<br />";
    if ($timestamp_down) {
      $body .= "Downtime started on " . date("j/m/Y H:i:s", $timestamp_down);
    }

    $recpt = array(array('recpt' => $adm->mail, 'method' => 'to'));

    //Send mail
    //Reporting only for community (Zabbix for enterprise)
    if (module_exists('gofast_community')) {
      $mail_sent = gofast_mail_queue_api_send_mail($subject, $title, $footer, $body, $recpt);
      if ($mail_sent == true) {
        $gofast_status["solr"]["notified"] = true;
      }
    }
  }

  /*
   * Bonita status
   */
  $bonita_status = gofast_get_http_code('http://localhost:8081' . '/bonita');
  if (302 !== $bonita_status && $gofast_status["bonita"]["state"] !== "KO") {
    watchdog("GOFAST Report", "Bonita is down");

    //autorestart
    $service_name = "bonita";
    $autorestart = gofast_check_service_autorestart_activated($service_name);
    if ($autorestart) {
      watchdog("GOFAST Report", "Auto-restart is activated, try to restart service Bonita");
      $_GET["service"] = $service_name;
      gofast_dashboard_restart_service(true);
    }

    $gofast_status["bonita"]["state"] = "KO";
    $timestamp_up = $gofast_status["bonita"]["timestamp"];
    $gofast_status["bonita"]["timestamp"] = time();

    //Prepare mail
    $subject = "[GoFast Report] Bonita down on " . $base_url;
    $title = "[GoFast Report] Bonita down on " . $base_url;
    $footer = "GoFast Alert notification E-mail";

    $body = "Bonita down on " . $base_url . "<br />";
    if ($timestamp_up) {
      $body .= "Bonita was up since  " . date("j/m/Y H:i:s", $timestamp_up);
    }

    if ($autorestart) {
      $body .= "<br />Auto-restart is activated for this service, it will try to restart automatically";
    }

    $recpt = array(array('recpt' => $adm->mail, 'method' => 'to'));

    //Send mail
    //Reporting only for community (Zabbix for enterprise)
    if (module_exists('gofast_community')) {
      $mail_sent = gofast_mail_queue_api_send_mail($subject, $title, $footer, $body, $recpt);
      if ($mail_sent == true) {
        $gofast_status["bonita"]["notified"] = true;
      }
    }
  }
  elseif (302 == $bonita_status && $gofast_status["bonita"]["state"] == "KO") {
    watchdog("GOFAST Report", "Bonita is up now");
    $gofast_status["bonita"]["state"] = "OK";
    $timestamp_down = $gofast_status["bonita"]["timestamp"];
    $gofast_status["bonita"]["timestamp"] = time();

    //Prepare mail
    $subject = "[GoFast Report] Bonita is up now on " . $base_url;
    $title = "[GoFast Report] Bonita is up now on " . $base_url;
    $footer = "GoFast Alert notification E-mail";

    $body = "Bonita is up now on " . $base_url . "<br />";
    if ($timestamp_down) {
      $body .= "Downtime started on " . date("j/m/Y H:i:s", $timestamp_down);
    }

    $recpt = array(array('recpt' => $adm->mail, 'method' => 'to'));

    //Send mail
    //Reporting only for community (Zabbix for enterprise)
    if (module_exists('gofast_community')) {
      $mail_sent = gofast_mail_queue_api_send_mail($subject, $title, $footer, $body, $recpt);
      if ($mail_sent == true) {
        $gofast_status["bonita"]["notified"] = true;
      }
    }
  }

  /**
   * Soffice status
   */
  $soffice_status = gofast_get_soffice_status();
  if (!$soffice_status && $gofast_status["soffice"]["state"] !== "KO") {
    watchdog("GOFAST Report", "Soffice is down");

    //autorestart
    $service_name = "soffice";
    $autorestart = gofast_check_service_autorestart_activated($service_name);
    if ($autorestart) {
      watchdog("GOFAST Report", "Auto-restart is activated, try to restart service Soffice");
      $_GET["service"] = $service_name;
      gofast_dashboard_restart_service(true);
    }

    $gofast_status["soffice"]["state"] = "KO";
    $timestamp_up = $gofast_status["soffice"]["timestamp"];
    $gofast_status["soffice"]["timestamp"] = time();

    //Prepare mail
    $subject = "[GoFast Report] Soffice down on " . $base_url;
    $title = "[GoFast Report] Soffice down on " . $base_url;
    $footer = "GoFast Alert notification E-mail";

    $body = "Soffice down on " . $base_url . "<br />";
    if ($timestamp_up) {
      $body .= "Soffice was up since  " . date("j/m/Y H:i:s", $timestamp_up);
    }

    if ($autorestart) {
      $body .= "<br />Auto-restart is activated for this service, it will try to restart automatically";
    }

    $recpt = array(array('recpt' => $adm->mail, 'method' => 'to'));

    //Send mail
    //Reporting only for community (Zabbix for enterprise)
    if (module_exists('gofast_community')) {
      //$mail_sent = gofast_mail_queue_api_send_mail($subject, $title, $footer, $body, $recpt);
      if ($mail_sent == true) {
        $gofast_status["soffice"]["notified"] = true;
      }
    }
  }
  elseif ($soffice_status && $gofast_status["soffice"]["state"] == "KO") {
    watchdog("GOFAST Report", "Soffice is up now");
    $gofast_status["soffice"]["state"] = "OK";
    $timestamp_down = $gofast_status["soffice"]["timestamp"];
    $gofast_status["soffice"]["timestamp"] = time();

    //Prepare mail
    $subject = "[GoFast Report] Soffice is up now on " . $base_url;
    $title = "[GoFast Report] Soffice is up now on " . $base_url;
    $footer = "GoFast Alert notification E-mail";

    $body = "Soffice is up now on " . $base_url . "<br />";
    if ($timestamp_down) {
      $body .= "Downtime started on " . date("j/m/Y H:i:s", $timestamp_down);
    }

    $recpt = array(array('recpt' => $adm->mail, 'method' => 'to'));

    //Send mail
    //Reporting only for community (Zabbix for enterprise)
    if (module_exists('gofast_community')) {
      $mail_sent = gofast_mail_queue_api_send_mail($subject, $title, $footer, $body, $recpt);
      if ($mail_sent == true) {
        $gofast_status["soffice"]["notified"] = true;
      }
    }
  }

  variable_set("gofast_status", $gofast_status);

  // Detect language when node is created
  $nodes_language = variable_get('node_language_detect');
  if (count($nodes_language) > 0) {
    //Detection du language pour tout les noeuds stockés dans node_language_detect
    foreach ($nodes_language as $key => $node_language) {
      $node = node_load($node_language['nid']);
      $file = $node_language['file'];
      $language = gofast_cmis_item_detect_document_language(NULL, NULL, $file);
      $node->language = $language;
      usurp($node->revision_uid);
      node_save($node);
      usurp();
      //Enleve les noeuds dont les traductions sont faites
      unset($nodes_language[$key]);
      $nodes_language = array_values($nodes_language);
    }
    //On renvoie le tableau sans les noeuds déjà traités.
    watchdog('DETECT language', json_encode($nodes_language));
    variable_set('node_language_detect', $nodes_language);
  }

  //full reindex mode management
  if (variable_get('gofast_full_reindex', false) == true) {
    //full reindex mode activated
    if (!gofast_search_is_open_hour()) {
      module_load_include('inc', 'gofast_search', 'gofast_search.admin');
      //we are not into open hour, so we can fill reindex queue
      //first, check the number of pending docs
      $stats = gofast_search_get_stats(GOFAST_SEARCH_ENV_ID, true);
      //if not too many pending docs
      if ($stats["pending"] < 100 && substr(date("i"), -1) == "5") {
        //calculate theorically number of docs indexed each 10 minutes
        $number_docs_ten_min = GOFAST_SEARCH_CRON_LIMIT_DEFAULT * 9;
        $remaining_nids = variable_get("gofast_full_reindex_nids", "");
        if ($remaining_nids != "") {
          $array_remaining_nids = explode(";", $remaining_nids);
          $i = 0;
          foreach ($array_remaining_nids as $key => $nid) {
            if ($i < $number_docs_ten_min) {
              apachesolr_mark_entity('node', $nid);
              unset($array_remaining_nids[$key]);
              $i++;
              watchdog("GOFAST Full Reindex", "Reindex nid " . $nid . "");
            }
            else {
              break;
            }
          }
          $remaining_nids = implode(";", $array_remaining_nids);
          if (count($array_remaining_nids) == 0) {
            gofast_search_cancel_full_reindex_mode();
            watchdog("GOFAST Full Reindex", "Finished");
          }
          else {
            variable_set("gofast_full_reindex_nids", $remaining_nids);
          }
        }
      }
      else {

      }
    }
    else {

    }
  }
  else {

  }
}

/**
 * Implements hook_node_load()
 *
 * Act on arbitrary nodes being loaded from the database.
 *
 * @param $nodes
 *  An array of the nodes being loaded, keyed by nid.
 *
 * @param $types
 *  An array containing the node types present in $nodes.
 */
function gofast_node_load($nodes, $types) {
  foreach ($nodes as $nid => &$node) {
    // Attach a teaser to the appropiated nodes.
    // Some modules (including apachesolr and gofast ones), rely on teaser
    // property as it was implemented in drupal 6. Don't confuse it with the
    // body summary since users may want to set/get both.
    $node->teaser = '';
    if (isset($node->body[LANGUAGE_NONE][0]['value'])) {
      $node->teaser = gofast_teaser($node->body[LANGUAGE_NONE][0]['value']);
    }
  }
}

/**
 * implémentation du hook_library
 *
 * @return string
 */
function gofast_libraries_info() {
  $libraries = array();

  $libraries['flag-icon-css'] = array(
    'name' => 'flag-icon-css',
    'vendor url' => 'https://lipis.github.io/flag-icon-css/',
    'download url' => 'https://github.com/lipis/flag-icon-css/archive/master.zip',
    'version' => '1.0',
    'version callback' => 'short_circuit_version',
    'files' => array(
      'css' => array(
        'css/flag-icon.css',
      ),
    ),
  );

  $libraries['jquery-fullscreen'] = array(
    'name' => 'jquery-fullscreen',
    'vendor url' => 'https://github.com/private-face/jquery.fullscreen/',
    'download url' => 'https://github.com/private-face/jquery.fullscreen/archive/master.zip',
    'version' => '0.5.1',
    'version callback' => 'short_circuit_version',
    'files' => array(
      'js' => array(
        'jquery.fullscreen.js'
      )
    )
  );


  gofast_xeditable_libraries_info($libraries);
  gofast_ztree_libraries_info($libraries);

  return $libraries;
}

/**
 * Implements hook_library()
 *  Registers JavaScript/CSS libraries associated with Gofast modules.
 *
 * @see https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_library/7
 */
function gofast_library() {
  $path = drupal_get_path('module', 'gofast');
  $lib = 'sites/all/libraries';

  // If exists, add specific .css file for the client environment.
  global $base_url;
  $hostname = parse_url($base_url, PHP_URL_HOST);

  // Inclure dans la librairie "main" uniquement les sources qui doivent être
  // chargées sur toutes les pages.
  $libraries['main'] = array(
    'title' => 'Gofast Library',
    'version' => '1.0',
    'js' => array(
      drupal_get_path('module', 'jquery_update') . '/replace/ui/ui/jquery-ui.js' => array(
        'group' => JS_LIBRARY, // JS_DEFAULT
        'every_page' => TRUE,
        'weight' => 1
      ),
      $lib . '/mCustomScrollbar/js/minified/jquery.mousewheel.min.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => 1
      ),
      $lib . '/mCustomScrollbar/js/minified/jquery.mCustomScrollbar.min.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => 1
      ),
      $path . '/js/hoverIntent.js' => array(
        'group' => JS_LIBRARY, // JS_DEFAULT
        'every_page' => TRUE,
        'weight' => 1
      ),
      $path . '/js/highlight.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => 1
      ),
      $lib . '/ifvisible.js/src/ifvisible.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => 1
      ),
      $path . '/js/utils.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => 2
      ),
      $path . '/js/gofast.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => 3
      ),
      $path . '/js/jquery.ac.html.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => 10
      ),
      $path . '/js/autocomplete.ext.js' => array(
        'group' => JS_THEME + 1,
        'every_page' => TRUE
      ),
      $lib . '/toastr/toastr.js' => array(
        'group' => JS_DEFAULT,
        'every_page' => TRUE
      ),
      $path . '/js/gofast_override_drupal_ajax.js' => array(
        'group' => JS_THEME + 1,
        'every_page' => TRUE
      ),
      $path . '/js/polyfill_url.js' => array(
        'group' => JS_DEFAULT,
        'every_page' => TRUE,
      ),
      $path. '/js/gofast_pager.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
      ),
      $path. '/js/bootstrap-switch.js' => array(
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
      )
    ),
    'css' => array(
      $lib . '/toastr/toastr.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_DEFAULT,
        'weight' => 1
      ),
      drupal_get_path('module', 'jquery_update') . '/replace/ui/themes/base/jquery-ui.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 0
      ),
      $path . '/css/font-awesome.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 0
      ),
      $path . '/css/bootstrap-switch.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 0
      ),
      $lib . '/ztree/css/zTreeStyle/zTreeStyle.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 0
      ),
      $path . '/css/gofast.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 1
      ),
      $path . '/css/' . $hostname . '.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 2
      ),
      $lib . '/mCustomScrollbar/jquery.mCustomScrollbar.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 1
      )
    )
  );

  $libraries['gofast_ajax_file_browser_mobile'] = array(
    'title' => 'Gofast Ajax File Browser Mobile',
    'version' => '1.0',
    'js' => array(
      $lib . '/ajax_file_browser/Browser/ITHitAJAXFileBrowserLoader.js' => array(
        'group' => JS_LIBRARY, // JS_DEFAULT
        'every_page' => TRUE,
        'weight' => 10
      ),
      $path . '/js/gofast_ajax_file_browser_mobile.js' => array(
        'group' => JS_THEME + 1,
        'every_page' => TRUE,
        'weight' => 999
      )
    )
  );
  $libraries['gofast_bootstrap_tour'] = array(
    'title' => 'Gofast Bootstrap Tour',
    'version' => '1.0',
    'js' => array(
      $lib . '/bootstrap_tour/bootstrap-tour.min.js' => array(
        'group' => JS_LIBRARY, // JS_DEFAULT
        'every_page' => TRUE,
        'weight' => 1
      ),
      $path . '/js/gofast_tour.js' => array(
        'group' => JS_LIBRARY, // JS_DEFAULT
        'every_page' => TRUE,
        'weight' => 1000
      )
    ),
      'css' => array(
      $lib . '/bootstrap_tour/bootstrap-tour.min.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 1
      )
    )
  );
  return $libraries;
}

/**
 * Implements hook_field_access().
 */
function gofast_field_access($op, $field, $entity_type, $entity, $account) {
  if (empty($entity)) {
    // We are in field settings page.
    return;
  }

  // Fields that should be maintained internally.
  $fields = array(
    'flag',
    'privatemsg',
    'mimemail',
    'ckeditor',
  );

  if (in_array($field['field_name'], $fields)) {
    return FALSE;
  }
}

/**
 * Helper that returns the cardinality of a given field.
 */
function gofast_field_get_cardinality($field_name) {
  $field = field_info_field($field_name);
  return $field['cardinality'];
}

/**
 * Implements hook_menu()
 */
function gofast_menu() {
  $items = array();

  $items += gofast_ztree_menu();
  $items += gofast_xeditable_menu();
  $items += gofast_api_menu();
  include_once 'gofast.admin.inc';
  $items += gofast_admin_menu();

  $items['admin/config/gofast'] = array(
    'title' => 'GoFast',
    'description' => 'GoFast Configuration',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  ## Prevent unsupported IE
  $items['not_supported'] = array(
    'title' => 'GoFAST',
    'description' => 'GoFast not supported page',
    'page callback' => 'gofast_not_supported',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Manage Books
  $items['books'] = array(
    'title' => 'Books',
    'description' => "Manage your site's book outlines.",
    'page callback' => 'book_admin_overview',
    'access_callback' => 'user_access',
    'access arguments' => array('add content to books'), // or 'create new books' perm
    'type' => MENU_CALLBACK,
    'file' => 'book.admin.inc',
    'file path' => drupal_get_path('module', 'book')
  );

  foreach (gofast_error_handler() as $code => $error) {
    $items["error/{$code}"] = array(
      'title' => $error,
      'page callback' => 'gofast_error_handler',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK
    );
  }

  $items['gofast/node-autocomplete/%'] = array(
    'page callback' => 'gofast_node_autocomplete',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

  $items['gofast/documents-autocomplete/%'] = array(
    'page callback' => 'gofast_documents_autocomplete',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

  $items['gofast_contents_spaces_autocomplete/%'] = array(
    'page callback' => 'gofast_contents_spaces_autocomplete',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

  $items['admin/config/gofast/global'] = array(
    'title' => t('Gofast Configuration', array(), array('context' => 'gofast')),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gofast.admin.inc'
  );

    $items['admin/batch/integrity'] = array(
    'title' => t('Gofast Configuration', array(), array('context' => 'gofast')),
    'page callback' => 'gofast_batch_integrity',
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gofast.admin.inc'
  );

    $items['home'] = array(
    'title' => t('My private space', array(), array('context' => 'gofast')),
    'page callback' => 'gofast_goto_home',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['gofast/variable/set'] = array(
    'title' => t('API set Drupal variable', array(), array('context' => 'gofast')),
    'page callback' => 'gofast_api_set_variable',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

   $items['gofast/contextual_messages/set/%user'] = array(
    'title' => t('API set contextual messages variable', array(), array('context' => 'gofast')),
    'page arguments' => array(3),
    'page callback' => 'gofast_api_set_contextual_messages_variable',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

   $items['gofast/all_comments/render/%node'] = array(
    'title' => t('API render comments', array(), array('context' => 'gofast')),
    'page arguments' => array(3),
    'page callback' => 'gofast_api_get_render_all_comments',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['gofast/status'] = array(
    'title' => 'Status',
    'description' => "Drupal status",
    'page callback' => 'gofast_get_status',
    'access_callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['gofast/node-info/%'] = array(
    'page callback' => 'gofast_get_node_infos_async',
    'page arguments' => array(2, TRUE),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

  $items['gofast/node-actions/%'] = array(
    'page callback' => 'gofast_get_node_actions_async',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

  $items['gofast/node-breadcrumb/%'] = array(
    'page callback' => 'gofast_get_node_breadcrumb_async',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

  $items['gofast/check-locations/%'] = array(
    'page callback' => 'gofast_process_location_check_async',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

  $items['gofast/js-error'] = array(
    'page callback' => 'gofast_write_log_error_js',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

   $items['gofast/dashboard'] = array(
    'page callback' => 'gofast_dashboard',
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => FALSE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['gofast/integrity_dashboard'] = array(
    'page callback' => 'gofast_integrity_dashboard',
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => FALSE,
    'type' => MENU_NORMAL_ITEM,
  );

   $items['gofast/dashboard/restart'] = array(
    'page callback' => 'gofast_dashboard_restart_service',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

   $items['gofast/dashboard/stop'] = array(
    'page callback' => 'gofast_dashboard_stop_service',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

   $items['gofast/dashboard/autorestart'] = array(
    'page callback' => 'gofast_dashboard_autorestart_service',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

   $items['gofast/stamp/add'] = array(
    'page callback' => 'gofast_stamp_add',
    'type' => MENU_CALLBACK,
    'access arguments' =>array(),
    'access callback'=>TRUE,
  );

   $items['gofast/node/%/get_audit_node'] = array(
    'page callback' => 'gofast_get_audit_node',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback'=>TRUE,
   );

  $items['gofast/tour/visited_pages'] = array(
    'page callback' => 'gofast_tour_visited_pages',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );

  $items['gofast/tour/visited_pages/reset'] = array(
    'page callback' => 'gofast_tour_visited_pages_reset',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );


  $items['gofast/is_internal'] = array(
    'page callback' => 'gofast_get_is_internal_from_nid',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['gofast/is_confidential'] = array(
    'page callback' => 'gofast_get_is_confidential_from_nid',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  return $items;
}

/**
 * Implements hook_comment_view_alter().
 * Override comments permissions
 */
function gofast_comment_view_alter(&$build) {
  $links = $build['links']['comment']['#links'];
  $node = $build['#node'];
  $nid = isset($node->nid) ? $node->nid : NULL;
  $comment = $build['#comment'];

  if (isset($nid)) {
    $links['comment-reply']['attributes']['class'][] = 'ctools-use-modal ctools-modal-center';
    $links['comment-reply']['href'] = 'gofast/nojs/comment/reply/' . $nid . '/' . $comment->cid;

    if (gofast_comment_og_access('delete', $comment)) {
      $links['comment-delete'] = $links['comment-reply'];
      $links['comment-delete']['title'] = "<span class='fa fa-trash-o'></span>";
      $links['comment-delete']['href'] = 'gofast/nojs/comment/delete/' . $nid . "/" . $comment->cid;
      $links['comment-delete']['attributes']['class'] = array(
          'ctools-use-modal',
          'af-button-small'
      );
    }else{
        unset($links['comment-delete']);
    }
    if (gofast_comment_og_access('edit', $comment)) {
      $links['comment-edit'] = $links['comment-reply'];
      $links['comment-edit']['title'] = "<span class='fa fa-edit'></span>";
      $links['comment-edit']['href'] = 'gofast/nojs/comment/edit/' . $comment->cid;
    }else{
        unset($links['comment-edit']);
    }

    $build['links']['comment']['#links'] = $links;
  }
}

/**
 * Determines whether the current user has access to a particular comment.
 */
function gofast_comment_og_access($op, $comment) {
  global $user;

  // Load comment object and extract node.
  if(is_numeric($comment)){
      $comment = comment_load($comment);
  }
  if (is_object($comment)) {
    $node = node_load($comment->nid);
  }

  if ($node) {
    switch ($op) {
      case 'edit':
      case 'delete':
        return node_access("delete", $node) || $comment->uid == $user->uid;
    }
  }

  return NULL;
}

/*
 * Implements hook_comment_presave
 * Prevents comment uid to change at edition
 */
function gofast_comment_presave($comment){
    global $user;

    if(empty($comment->original)){
        //This is a comment creation, do nothing
        return;
    }

    if($comment->uid != $comment->original->uid || $comment->name != $comment->original->name){
        $comment->name = $comment->original->name;
        $comment->uid = $comment->original->uid;
    }

    if($user->uid !== $comment->uid){
        //Store modification of comment someone who isn't the author and inform audit / notification system
        $comment->field_edited_by[LANGUAGE_NONE][0]['value'] = $user->uid;
        $comment->field_edited_timestamp[LANGUAGE_NONE][0]['value'] = time();
        $_POST["override_audit_comment_uid"] = $user->uid;
    }
}

/**
 * Implements hook_permission()
 */
function gofast_permission() {
  // Allow users to access the configuration page and submits settings update.
  return array(
    'administer site configuration' => array(
      'title' => t('Administer Gofast Settings', array(), array('context' => 'gofast')),
      'description' => t('Access the configuration page, update Gofast settings.', array(), array('context' => 'gofast')),
      'restrict access' => TRUE
    )
  );
}

function gofast_ajax_delivery($output = NULL) {
  /** @todo: check library + print added js/css */
  print $output ? $output : '';
}

/**
 * Implements hook_entity_insert()
 */
function gofast_entity_insert($entity, $type) {
  list($id, $vid, $bundle) = entity_extract_ids($type, $entity);
  _gofast_entity_last_events(array("$type|{$id}", 'insert'));
}

/**
 * Implements hook_entity_update()
 */
function gofast_entity_update($entity, $type) {
  list($id, $vid, $bundle) = entity_extract_ids($type, $entity);
  _gofast_entity_last_events(array("$type|{$id}", 'update'));
}

/**
 * Implements hook_entity_delete()
 */
function gofast_entity_delete($entity, $type) {
  list($id, $vid, $bundle) = entity_extract_ids($type, $entity);
  _gofast_entity_last_events(array("$type|{$id}", 'delete'));
}

/**
 * Helper function that registers/reminds entity events during a page load,
 */
function _gofast_entity_last_events($event = NULL, $reset = FALSE) {
  $_events = &drupal_static(__FUNCTION__, array(), $reset);
  if (is_array($event)) {
    $eid = array_shift($event);
    $_events[$eid] = count($event) > 1 ? $event : reset($event);
  }
  return $_events;
}

/**
 * Maintains Gofast modules weights higher than og module weight so that hooks
 * are invoked in a more convenient way (og implementations have to be executed
 * before ours).
 */
function _gofast_manage_hook_system_weight() {
  $og_weight = db_select('system')
          ->fields('system', array('weight'))
          ->condition('name', 'og', '=')
          ->execute()
          ->fetchField();

  $modules = array_filter(module_list(), function($name) {
    return strpos($name, 'gofast') === 0;
  });

  db_update('system')
          ->fields(array('weight' => $og_weight + 1))
          ->condition('name', $modules, 'IN')
          ->execute();
}

/**
 * Implements hook_enable()
 */
function gofast_enable() {
  // Ensure this module hooks implementations are called after og module ones.
  _gofast_manage_hook_system_weight();
}

/**
 * Helper function that returns field values depending on following parameters :
 *
 * @param string $field_name
 *  The field machine name.
 * @param string $entity_type
 *  (optional). Default to node.
 * @param string $bundle
 *  (optional).
 * @param array $ids
 *  (optional).
 * @return
 *  An array of field values, keyed by their respective entity's id.
 */
function gofast_get_field_values($field_name, $entity_type = 'node', $bundle = NULL, $ids = array()) {

  $query = db_select("field_revision_{$field_name}", 'f')
          ->fields('f', array('entity_id', "{$field_name}_value"))
          ->condition('entity_type', $entity_type);

  if (isset($bundle)) {
    $query->condition('bundle', $bundle);
  }

  if (!empty($ids)) {
    $query->condition('entity_id', $ids, 'IN');
  }

  return $query->condition('deleted', 0)
                  ->execute()
                  ->fetchAllKeyed();
}

/**
 * Returns all characters that should be avoided in naming conventions.
 *
 * # pound,          < left angle bracket,   $ dollar sign,         + plus sign
 * % percent,        > right angle bracket,  ! exclamation point,   ` backtick
 * & ampersand,      * asterisk,             ' single quotes,       | pipe
 * { left bracket,   ? question mark,        " double quotes,       = equal sign
 * } right bracket,  / forward slash,        : colon,               \ back slash
 * @ at sign         , comma
 */
function gofast_special_characters() {
  return array('#', '<', '$', '+', '%', '>', '!', '`', '&', '*', '‘', '\'', '’', '“', '"', '”', '|', '{', '?', '=', '}', '/', ':', '\\', '@', ',');
}

/**
 * Returns a list of invalid characters according to OS's restrictions. This
 * should be matched with Alfresco's constraints on filenames.
 */
function gofast_invalid_characters() {
  // Note: Left/right, simple/double quotation marks characters are allowed, but
  // double quotes are not.
  return array('<', '>', '*', '|', '?', '"', '/', ':', '\\');
}

/**
 * Returns a list of invalid filenames, whatever the extension could be.
 */
function gofast_invalid_filenames() {
  // This list is entirely built from Windows filename restrictions.
  return array('com1', 'com2', 'com3', 'com4', 'com5', 'com6', 'com7', 'com8', 'com9', 'lpt1', 'lpt2', 'lpt3', 'lpt4', 'lpt5', 'lpt6', 'lpt7', 'lpt8', 'lpt9', 'con', 'nul', 'prn', 'aux');
}

/**
 * Validate a filename according to common OS's filesystem restrictions. All
 * node bundles title should be validated through this function since any bundle
 * may be subject to sync.
 *
 * @param string $str
 *  The string to validate.
 *
 * @return mixed
 *  Boolean TRUE if the string passed validation, FALSE otherwise.
 */
function gofast_validate_filename($str) {
  // Matches any string containing a single or more invalid chars.
  $chars = '(.*[' . preg_quote(implode('', gofast_invalid_characters()), '/') . ']+.*)';

  // Matches invalid names whatever the extension if any.
  $names = '^(' . implode('|', gofast_invalid_filenames()) . ')(\.|$)+.*';

  // Matches any string ending with a dot, or beginning with a dot (Mac OS).
  $dot = '(^\.+.*)|(.*[\.]?.*[\.]+$)';

  // Matches any string ending with one or more whitespace character.
  $wsp = '(.*[\s]+$)';

  // Build the pattern, use 'i' modifier for case insensitive matches (Windows
  // name restrictions are case insensitive).
  $pattern = "/{$chars}|{$dot}|{$wsp}|{$names}/i";

  /**
   * @todo: catch & return matches so that validate handlers can set error details.
   */
  return !preg_match($pattern, $str);
}

/**
 * Error pages callback. Allow to custom error pages.
 * @see /admin/config/system/site-information
 */
function gofast_error_handler($error = NULL) {
  $info = array(
    '403' => theme('forbidden'),
    '404' => theme('not_found')
          // ...
  );

  if (!isset($error)) {
    return $info;
  }

  if (isset($info[$error])) {
    return $info[$error];
  }

  // Minimal fallback.
  return 'Error ' . $error;
}

/**
 * Implements hook_preprocess
 */

function gofast_preprocess_forbidden(&$variables){
    $variables['class'] = "btn__error";
}

/**
 * Implements hook_preprocess
 */

function gofast_preprocess_not_found(&$variables){
    $variables['class'] = "btn__error";
}


/**
 * Callback function : see "/not_supported"
 */
function gofast_not_supported(){
  return theme('not_supported');
}

/**
 * Implements hook_form_alter
 */
function gofast_form_alter(&$form, &$form_state) {
  if($form['#form_id'] === 'og_ui_add_users') {
    $form['og_user']['name']['#autocomplete_path'] = 'gofast_userlist_og_autocomplete';
    $form['og_user']['#attributes']['class'][] = 'og-roles-force-single';
  }
  gofast_ztree_form_alter($form, $form_state);

  if($form['#form_id'] === 'user_login_block'){
   drupal_set_title(t("Login", array(), array("context" => "gofast")));
  }

  if($form['#form_id'] === 'article_node_form' || $form['#form_id'] === 'conference_node_form'){
      global $base_url;
      $form['#prefix'] = '<script src="' .$base_url . '/sites/all/libraries/ckeditor/ckeditor.js"></script>';
  }
}

function gofast_node_form_validate(&$form, &$form_state) {
  if (isset($form_state['values'][GOFAST_OG_CONTENT_MEMBERSHIP_FIELD]) && empty($form_state['values'][GOFAST_OG_CONTENT_MEMBERSHIP_FIELD][LANGUAGE_NONE])) {
    form_set_error(GOFAST_OG_CONTENT_MEMBERSHIP_FIELD, t('There is no selected group. Please select at least one group.', array(), array('context' => 'gofast')));
  }
}

/**
 * Implements hook_node_form_alter().
 */
function gofast_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (isset($form['body'])) {
    // Each form with a body field should not allowuser to edit format options.
    $form['#after_build'][] = 'gofast_form_after_build';
  }
  $node = $form['#node'];

  if($node->type == 'alfresco_item'){
      if(isset($_GET['path'])){
        $form['#path'] = $_GET['path'];
        $form[GOFAST_CMIS_LOCATIONS_FIELD][LANGUAGE_NONE]['#entity']->field_emplacement['und'][]['value'] = $_GET['path'];
      }
       $form['#validate'][] = 'gofast_form_validate';
  }
  if($node->type == 'article'){
        if(!empty($form['#node']->nid)){
            unset ($form['field_date']);
        }else{
            if(isset($_GET['nid'])){
                $article_node = node_load($_GET['nid']);
                $form['book']['bid']['#default_value'] = $article_node->book['bid'];
            }
        }
  }

  //Overriding title in case we create a translation for a given node
  $create_translation = isset($_GET['translation']) && isset($_GET['target']);
  if ($create_translation) {
    $current_title = $node->title;
    $title_info = pathinfo($current_title);
    if (isset($title_info['extension'])) {
      $new_title = $title_info['filename'];
    }
    else {
      $new_title = $current_title;
    }
    // Adding the suffix with the current language
    $new_title .= strtoupper('_' . $_GET['target']);
    $form['title']['#default_value'] = $new_title;

    // removing the previous node selected locations
    if (isset($node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE][0])) {
      $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE] = array();
      $form[GOFAST_CMIS_LOCATIONS_FIELD][LANGUAGE_NONE]['#default_value'] = array();
    }
    // removing the previous node og_parents
    if (isset($node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE][0])) {
      $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE] = array();
      $form[GOFAST_OG_CONTENT_MEMBERSHIP_FIELD][LANGUAGE_NONE][0]['default']['#default_value'] = array();
    }
  }

  // Prepend a validate handler for title.
  array_unshift($form['#validate'], 'gofast_form_validate_title');

  // We allow to select language only for contents.
  if (in_array($node->type, gofast_og_content_bundles()) && $node->type !== 'conference') {
    $form['wrapper'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('gofast-wrapper-fix')
      )
    );

    $form['title']['#prefix'] = '<div class="col-md-10">';
    $form['title']['#suffix'] = '</div>';

    $form['language']['#prefix'] = '<div class="col-md-2">';
    $form['language']['#suffix'] = '</div>';

    // Arrange options as a unique list by merging disabled & enabled languages.

    $form['language']['#options'] = array_flatten($form['language']['#options']);
    $form['wrapper']['title'] = $form['title'];
    $form['wrapper']['title']['#title'] = t($form['wrapper']['title']['#title']);
    $form['wrapper']['language'] = $form['language'];
    $form['wrapper']['language']['#weight'] = 1;

      unset($form['title']);
      unset($form['language']);
    }


  // We hide the language selection for spaces (OG)
  if (in_array($node->type, array_keys(gofast_og_node_types()))) {
    $form['language']['#access'] = FALSE;
  }

  if(isset($form['field_publication_history'])){
      $form['field_publication_history']['#access'] = FALSE;
  }

  // Except for 'article' node type, users shouldn't be able to edit the body
  // but only the summary value, removing this class will prevent javascript
  // from processing text elements and remove summary "Hide/Show" switch toggle.
  /*if ($node->type !== 'article') {
    $key = array_search('text-summary', $form['body'][LANGUAGE_NONE][0]['summary']['#attributes']['class']);
    if ($key !== FALSE) {
      unset($form['body'][LANGUAGE_NONE][0]['summary']['#attributes']['class'][$key]);
    }
    // In addition, hide the body textarea.
    $form['body']['#prefix'] = '<div class="gofast-og-body-wrapper">';
    $form['body']['#suffix'] = '</div>';
    drupal_add_css('.gofast-og-body-wrapper .form-item-body-und-0-value{display:none;}', array('type' => 'inline'));
  }*/



  if ($node->type !== 'alfresco_item' && !in_array($node->type, array_keys(gofast_og_node_types()))) {
    $form['#validate'][] = 'gofast_node_form_validate';
  }

    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save', array(), array('context' => 'gofast')),
      '#id' => 'submit_' . str_replace('-', '_', $form_state['node']->type), // /!\ IMPORTANT : fixed the multiple id issue when submitting on ajax
      '#prefix' => '',
      '#suffix' => '',
      '#ajax' => array(
        'wrapper' => 'ajax_content',
        'callback' => 'gofast_ajax_submit_callback'
      ),
      '#weight' => '10'
    );

    $form['#attached']['js'][] = array(
      'type' => 'file',
      'group' => JS_THEME + 1,
      'data' => drupal_get_path('module', 'gofast') . '/js/gofast_ajax_form.js',
    );

    if ($node->type === 'alfresco_item' && strpos($_SERVER['REQUEST_URI'],'external')==0){
      $form['wrapper']['language']['#options']['auto'] = t('Detected language',array(),array("context"=>"gofast"));
    }

  $form['#after_build'][] = 'gofast_node_form_hide_group_fields';

  //No notification checkbox

  $form['prevent_notify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Prevent notification : The other users won\'t be notified.'),
    '#weight' => '10',
    '#default_value' => GOFAST_DEFAULT_VALUE_PREVENT_NOTIFY,
    '#prefix' => "<span class='".GOFAST_CLASS_PREVENT_NOTIFY."'",
    '#suffix' => "</span>"
  );
  $form['#submit'][] = 'gofast_node_form_submit';

  //Call a hook after_gofast_node_form_alter
  foreach(module_implements('after_gofast_node_form_alter') as $module){
      $function = $module . '_after_gofast_node_form_alter';
      call_user_func_array($function, array(&$form, &$form_state));
  }
}

function gofast_node_form_submit(&$form, &$form_state){
  if (isset($form_state['values']['body']['und'][0]['value'])) {
    // XSS control if this node is not whitelisted
    $default_documents_form_configuration = array(
      'xss_whitelist' => [],
    );
    $documents_form_defaults = variable_get("documents_form_defaults", $default_documents_form_configuration);
    $xss_whitelist = is_array($documents_form_defaults['xss_whitelist']) ? $documents_form_defaults['xss_whitelist'] : [];

    if(!in_array($form_state['values']['nid'], $xss_whitelist, TRUE)){
      $form_state['values']['body']['und'][0]['value'] = gofast_xss_clean($form_state['values']['body']['und'][0]['value']);
    }
  }
  $_POST['prevent_notify'] = $form_state['values']['prevent_notify'];
}

function gofast_node_form_hide_group_fields(&$form, &$form_state) {
  //field_group_hide_field_groups($form, array('group_body', 'group_vt_document'));
  $queryStrings = drupal_get_query_parameters();
  if (!empty($queryStrings) && isset($queryStrings['deadline']) && isset($queryStrings['gid'])) {
    field_group_hide_field_groups($form, array('group_body', 'group_taxonomies', 'group_vt_state', 'group_external_links'));
  } else {
    field_group_hide_field_groups($form, array('group_body', 'group_deadline', 'group_taxonomies', 'group_vt_state', 'group_external_links'));
  }
  return $form;
}

function gofast_ajax_submit_callback(&$form, &$form_state) {

  $commands = array();
  if ($errors = form_get_errors()) {
    // This variable is to detect if the form is remote_url when provoking the input error during creation
    if (isset($form['remote_url'])) {
      $form_state['is_remote_url'] = TRUE;
    }
    $form_state['rebuild'] = TRUE;
    $error_msg = theme('status_messages');
    $output = drupal_rebuild_form($form['#form_id'], $form_state, $form);
    // $commands[] = ajax_command_html('#messages-placeholder', $error_msg);
    $output = $error_msg . render($output);
    $output = gofast_normalize_string_from_ajaxifying($output);
    $commands[] = array(
      'command' => 'error_creating_node',
      'form' => $output,
      'custom_fields' => array(GOFAST_OG_CONTENT_MEMBERSHIP_FIELD),
      'errors' => $errors,
      'wrapper' => '#ajax_content'
    );
  }
  else {
    $form_state['node_ajaxifying'] = TRUE;

    $node = node_form_submit_build_node($form, $form_state);

    if ($node->language == 'auto') {
        $validators = array();
        $validators['file_validate_extensions'] = array();
        $file = file_save_upload('reference', $validators, "public://");
        $file_size = format_size($file->filesize);
        if ($file_size < 2){
            $language = gofast_cmis_item_detect_document_language(NULL,NULL,$file);
            $node->language = $language;
        }else{
            $must_detect_after = true;
            $node->language = und;

        }
   }
    node_save($node);
    if($must_detect_after){
         $get_valeur = variable_get('node_language_detect',array());
         $get_valeur[] = array(
             'nid' => $node->nid,
             'file' => $file,
         );
         variable_set('node_language_detect', $get_valeur);
    }

    if ($node->nid) {
      $form_state['values']['nid'] = $node->nid;
      $form_state['nid'] = $node->nid;
      // TODO with webform
      //$redirect = ($node->type === 'webform') ? '/node/'.$node->nid.'/webform/components' : '/node/' . $node->nid;
//      if ($node->type === 'webform') {
//        drupal_goto('/node/' . $node->nid);
//      }
      if($node->type != "task"){
        if(isset($form['#path'])){
            if($node->type == "alfresco_item"){
                $commands[] = array(
                    'command' => 'success_creating_node',
                     'data' => '/node/' . $node->nid
                 );
            }else{
                 $commands[] = array(
                     'command' => 'success_creating_node',
                     'data' => '/gofast/browser?&path=' . $form['#path']
                 );
            }
      }else{
       $command_data = ($node->type == "contact") ? '/contacts-listing' : '/node/' . $node->nid;
        $commands[] = array(
            'command' => 'success_creating_node',
              'data' => $command_data
          );

        }
      }else{
        //Do not reload full page
//         $commands[] = array(
//              'command' => 'success_creating_node',
//              'data' => '/node/' . $node->og_group_content_ref[LANGUAGE_NONE][0]['target_id'] . '/#ogkanban'
//          );
        ctools_include('ajax');
        ctools_include('modal');
        $commands[] = ctools_modal_command_dismiss();
        $commands[] = gofast_command_callback("Gofast.reloadKanbanFromPollingExternal", array($node->field_board[LANGUAGE_NONE][0]['target_id']));
      }
      if (in_array($node->type, array_keys(gofast_og_node_types())) && isset($form['og_ztree_templates_folder']['templates']['#value'])){
	  gofast_ajax_file_browser_add_template_folder_form_submit($form,$form_state);
      }
    }
  }
  $form_state['node_ajaxifying'] = FALSE;

  global $user;
  gofast_cmis_temp_file_remove($user);
  variable_delete($user->name . "_file_form_populate");

  return array('#type' => 'ajax', '#commands' => $commands);
}


function gofast_form_validate($form, $form_state){
   gofast_form_unset_error('field_date][und][0][value');
}

/**
 * Validate handler.
 *
 *  Set a form error if a node title contains invalid title.
 */
function gofast_form_validate_title(&$form, &$form_state) {
  $node = $form_state['node'];
  $title = &$form_state['values']['title'];

  // Always strip whitespaces from the title.
  $title = trim($title);

  // All content types are subject to the same validator.
  if (!gofast_validate_filename($title)) {
    form_set_error('title', t('Title contains illegals characters or an invalid name.', array(), array('context' => 'gofast')));
  }

  // Specific rules for Gofast Spaces.
  if (gofast_og_is_space($node)) {
    $ogm_type = GOFAST_OG_PARENT_GROUP_FIELD;
    if (strpos($title, '_') === 0 || strpos($title, '#') === 0)
      form_set_error('title', t('A space title cannot begin with an [_] or [#].', array(), array('context' => 'gofast')));
    if (strpos($title, '#') !== FALSE)
      form_set_error('title', t('A space title cannot contain the following char [#].', array(), array('context' => 'gofast')));
  }
  else {
    $ogm_type = GOFAST_OG_CONTENT_MEMBERSHIP_FIELD;
  }

  // Prevent having 2 nodes with the same title within a single space. We don't
  // check alfresco items here since documents can reside in another location
  // than the parent space directory.

  $og_field = isset($form_state['values'][$ogm_type][LANGUAGE_NONE]) ? $form_state['values'][$ogm_type][LANGUAGE_NONE] : array();
  $nids = array();

  foreach ($og_field as $membership) {
    $parent_gid = $membership['target_id'];
    $nids += gofast_og_get_content($parent_gid) + gofast_og_get_children($parent_gid);
  }

  // If not new, remove the node from the list to check.
  if (isset($node->nid)) {
    unset($nids[$node->nid]);
  }

  if (!empty($nids)) {
    // Check if any matches occurs.
    $duplicates = db_select('node', 'n')
            ->fields('n', array('nid'))
            ->condition('type', 'alfresco_item', '<>')
            ->condition('nid', $nids, 'IN')
            ->condition('title', $title, '=')
            ->execute()
            ->fetchAllAssoc('nid');

    if (!empty($duplicates)) {
      /* @todo mettre un lien vers le noeud */
      if($form_state['values']['type'] !== "conference"){
        form_set_error('title', t('A node having the same title and the same parent space already exists. Please set another title.', array(), array('context' => 'gofast')));
      }
    }
  }
}

/**
 * Form after-build callback.
 */
function gofast_form_after_build($form) {
  // Remove access to HTML format options if any.
  if (isset($form['body'][LANGUAGE_NONE][0]['format'])) {
    $form['body'][LANGUAGE_NONE][0]['format']['#access'] = FALSE;
  }
  return $form;
}


/**
 * Implements hook_form_FORM_ID_alter()
 */
function gofast_form_user_login_block_alter(&$form, &$form_state)
{
  // Bugfix : Access denied implies a redirect to /error/403 after submit even
  // if user just logged in.

  ## if we need a redirection to a node when a user connects via link sharing
  $current_url = $_SERVER['HTTP_REFERER'];
  $parts = parse_url($current_url);
  parse_str($parts['query'], $query);
  if (!empty($query['node'])) {
    $destination = 'node/' . $query['node'];
    $form['#action'] = '/' . $destination;
  } else {
    $path = current_path();
    if ($path === 'error/403') {
      $destination = drupal_get_destination();

      if (isset($_GET['path']) && !empty($_GET['path'])) {
        $_SESSION['login_path'] = $_GET['path'];
      }else{
        $form['#action'] = $parts["path"];
      }
    }


    // Prevent redirect to user/logout on log in for users just logged out.
    if ($form['#action'] === '/user/logout') {
      $form['#action'] = '/';
    }

    // Prevent redirect to user/logout on log in for users just logged out.
    if ($form['#action'] === '/node') {
      $form['#action'] = '/';
	}
    }

  //force emptied login field (do not offer suggestion of previous fill-in)
  $form['name']['#attributes']['autocomplete'] = 'off';

  //Clear local storage
  $form['#suffix'] = "<script>localStorage.clear();indexedDB.deleteDatabase('matrix-js-sdk:riot-web-sync');indexedDB.deleteDatabase('matrix-js-sdk:crypto');</script>";
}

function gofast_user_login(&$edit, $account) {

  global $base_url;
  global $cookie_domain;
  global $mobile_url;


  $standard_prefix_url = variable_get_value('base_url_standard');

  if ($base_url == $mobile_url) {
    setcookie('gofast_mobile_login_sid', session_id(), strtotime('+1 year'), '/', $cookie_domain, true); // set the mobile version sid cookie
  } elseif ($base_url == $standard_prefix_url) {
    setcookie('gofast_complete_login_sid', session_id(), strtotime('+1 year'), '/', $cookie_domain, true); // set the complete version sid cookie
  }

  setcookie('gofast_user', $account->name, strtotime( '+1 year' ), '/', $cookie_domain, true);

  gofast_resynchro_ldap_membership_one_user($account);

}

function gofast_user_logout($account) {
  global $user;



  if (isset($_COOKIE["gofast_mobile_login_sid"])) {
    db_query("DELETE FROM {sessions} WHERE uid = '" . $user->uid . "' AND sid = '" . $_COOKIE["gofast_mobile_login_sid"] . "'");
    watchdog('session_logout', "Logout from essentiel");
  }

  if (isset($_COOKIE["gofast_complete_login_sid"])) {
    db_query("DELETE FROM {sessions} WHERE uid = '" . $user->uid . "' AND sid = '" . $_COOKIE["gofast_complete_login_sid"] . "'");
    watchdog('session_logout', "Logout from Gofast +");
  }

  gofast_delete_cookie('gofast_user');
  recently_read_session_api_cleanup();
}

/**
 * Wrapper function that returns themed action links for a given node.
 *
 * @param $node
 *  The node object
 * @param $text
 *  (optional) Display custom text along with the button wrapper.
 * @param $class
 *  (optional) An array of additional wrapper class
 */
function gofast_get_node_actions($node, $text = '', $class = array()) {
  return theme('gofast_block_file_management', array('node' => $node, 'text' => $text, 'class' => $class));
}

/**
 * Wrapper function that returns themed action links for a given node.
 *
 * @param $node
 *  The node object
 * @param $text
 *  (optional) Display custom text along with the button wrapper.
 * @param $class
 *  (optional) An array of additional wrapper class
 */
function gofast_get_microblogging_actions($id = '',$text = '', $onclick = '') {
  return theme('gofast_block_microblogging_management', array('blog_id' => $id));
}

/**
 * Implements hook_entity_info_alter().
 */
function gofast_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['custom_gofast'] = array(
    'label' => t('Custom GoFAST', array(), array('context' => 'gofast')),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['gofast_node_infos'] = array(
    'label' => t('Node Infos', array(), array('context' => 'gofast')),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_preprocess_node().
 */
function gofast_preprocess_node(&$vars) {
  // Provide alternate template files, so we can easily override based tempates
  // depending on view modes.
  $vars['theme_hook_suggestions'][] = 'node__' . $vars['view_mode'];
  $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__' . $vars['view_mode'];

  // Provide specific class as well.
  $vars['classes_array'][] = 'node-' . $vars['view_mode'];
}

/**
 * Returns the breadcrumbs alt content, containing :
 * Refresh button (alfresco_items only)
 * Comments button (contents only)
 * Lock owner (alfresco_items only)
 * Contextual actions (spaces & contents)
 */
function gofast_get_breadcrumbs_alt($node) {
  $node_refresh_action = gofast_get_refresh_action_node($node);
  $refresh_action = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-refresh', 'buttons' => $node_refresh_action));

  $node_comments_action = gofast_get_comments_actions_node($node);
  $comments_actions = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-comments', 'buttons' => $node_comments_action));

  $node_lock_action = gofast_get_lock_action_node($node);
  $lock_action = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-lock', 'buttons' => $node_lock_action));

  if (module_exists('gofast_workflows') && $node->type == 'alfresco_item'){
    $node_workflow_action = gofast_get_workflow_action_node($node, true);
    $workflow_action = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-wf', 'buttons' => $node_workflow_action));
  } else {
    $workflow_action = '';
  }

  $status_conference = '';
  if (module_exists('gofast_conference') && $node->type == 'conference'){
    $status_conference = gofast_conference_get_status($node);
    //$status_conference_theme = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-conference-status', 'buttons' => $status_conference));
  }

  $contextual_actions = "<div id='contextual-actions-loading' class='loader-actions not-processed'></div>";
  if(GOFAST_DEFAULT_VALUE_PREVENT_NOTIFY == true){
    $prevent_notify_default_value = "";
    $prevent_notify_default_value2 = "true";

  }else{
     $prevent_notify_default_value =  "checked";
     $prevent_notify_default_value2 = "false";
  }

  $prevent_notify_toggle = "";
  if($node->type == 'alfresco_item'){
    $prevent_notify_toggle .= '<div class="'.GOFAST_CLASS_PREVENT_NOTIFY.' contextual-actions btn-group btn-group-xs" style="height:30px;" >
   <input id="edit-prevent-notify-update" class="form-checkbox" value="" type="checkbox" '.$prevent_notify_default_value.'></div><script>Gofast.preventNotifySetDefaultValue("'.$prevent_notify_default_value2.'");</script>';
  }
  return '<div class="breadcrumb-alt">'.$prevent_notify_toggle . $status_conference . $refresh_action . $workflow_action . $comments_actions . $lock_action . $contextual_actions .'</div>';
}

/**
 * Implements hook_preprocess_page
 */
function gofast_preprocess_page(&$vars) {
  // Load ajax_views.ajax on every page for the menu block
  views_add_js('ajax_view');

  // Load the language switch block (only if we have more than one).
  if (count(language_list()) >= 2) {
    $lang = gofast_block_view('lang_switch');
    $vars['lang_switch'] = $lang['content'];
  }
//  $nid_spaces = array();
//  foreach (gofast_og_get_spaces_by_bundle() as $key => $value) {
//    $nid_spaces = array_merge($nid_spaces, array_keys($value));
//  }
//  drupal_add_js(array(
//    'idSpaces' => $nid_spaces
//          ), 'setting');

  // It it necessary to check isset in case of logging out
  if (isset($vars['gofast_ajax_file_browser_mobile_enabled'])) {
    if (!$vars['gofast_ajax_file_browser_mobile_enabled']) {
      drupal_add_js('(function($, Drupal){ Drupal.behaviors.removeHiddenBackground = {
      attach: function (context, settings) {
        $("body").removeClass("body_display_none");
      }
    };})(jQuery, Drupal);', array('type' => 'inline', 'scope' => 'footer'));
    }
  }
  else {
    drupal_add_js('(function($, Drupal){ Drupal.behaviors.removeHiddenBackground = {
      attach: function (context, settings) {
        $("body").removeClass("body_display_none");
      }
    };})(jQuery, Drupal);', array('type' => 'inline', 'scope' => 'footer'));
  }

  // Load libraries to page so everything can work as expected.
  //variable qui indique quelle methode de fallback utiliser si le plugin office ne marche pas ou n\'est pas présent
  //TODO mapper cette variable a une variable drupal éditable depuis formulaire de config de la plateforme
  //valeures possibles : java ou LO
  $fallback_edit_inline = variable_get('ceo_download_edit_fallback', 'java');
  drupal_add_js('var fallback_edit_inline = "' . $fallback_edit_inline . '";', 'inline');

  if (user_is_logged_in()) {
    global $user;

    if (isset($vars['node'])) {
      $node = $vars['node'];
      $vars['contextual_actions'] = gofast_get_breadcrumbs_alt($node);
    }
  }
  drupal_add_css(libraries_get_path('load-awesome') . '/css/ball-atom.css');

  //Call hook_gofast_messages_alter
  foreach(module_implements('gofast_messages_alter') as $module){
    call_user_func_array($module . '_gofast_messages_alter', array(&$_SESSION['messages']));
  }
}

/*
 * Implements hook_gofast_messages_alter
 * Catch messages to get the drupal security update warnings and advagg green warnings
 */
function gofast_gofast_messages_alter(&$messages){

  foreach($messages['error'] as $k => $message){
    if(strpos($message, t('There is a security update available for your version of Drupal. To ensure the security of your server, you should update immediately!')) !== FALSE){
      unset($messages['error'][$k]);
    }
    if(strpos($message, t('One or more problems were detected with your Drupal installation.')) !== FALSE){
      unset($messages['error'][$k]);
    }
  }

  foreach($messages['status'] as $k => $message){
    if(strpos($message, "The AdvAgg bypass cookie is currently enabled") !== FALSE){
      unset($messages['status'][$k]);
    }
  }

   foreach($messages['warning'] as $k => $message){

    preg_match_all('!\d+!', $message, $tab_nb);
    if(strpos($message,"You have used ".$tab_nb[0]." out of ".$tab_nb[1]." login attempts. After all ".$tab_nb[2]." have been used, you will be unable to login.") !== FALSE){
       $messages['status'][$k]="You have 5 authorized connection attempts before your account is blocked." ;
    }
  }


  if(empty($messages['error'])){
      unset($messages['error']);
  }

  if(empty($messages['status'])){
      unset($messages['status']);
  }
}

/*
 * Implements hook_update_projects_alter
 * Don't inform Drupal aboit it's components versions to prevent multiple checks and calls except if :
 * The command is running from a CLI (drush)
 * The request is from a dev server
 */
function gofast_update_projects_alter(&$projects) {
  if(!drupal_is_cli() && !gofast_dev_mode()){
    $projects = array();
  }
}

function gofast_get_contextual_actions_webform($node) {
  global $user;
  if (node_access('update', $node, $user)) {
    $node_actions = array();
    if (in_array('webform', arg())) {
      $path = drupal_get_path('module', 'gofast_webform');
      drupal_add_js($path . '/gofast_webform.js', array('type' => 'file', 'scope' => 'header', 'group' => JS_THEME));
      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_form', array('nid' => $node->nid)) . '</li>';
      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results', array('nid' => $node->nid)) . '</li>';
      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_configuration', array('nid' => $node->nid)) . '</li>';
    }
    else if (in_array('webform-results', arg())) {
      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results', array('nid' => $node->nid)) . '</li>';
      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results_analysis', array('nid' => $node->nid)) . '</li>';
      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results_download', array('nid' => $node->nid)) . '</li>';
      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results_table', array('nid' => $node->nid)) . '</li>';

      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_form', array('nid' => $node->nid)) . '</li>';
      $node_actions[]['themed'] = '<li>' . theme('gofast_webform_form_builder', array('nid' => $node->nid)) . '</li>';
    }


    $node_contextual_actions = array();

    $node_contextual_actions[] = array(
      'id' => 'toggle-fitscreen',
      'title' => t('Set content to full windows size', array(), array('context' => 'gofast')),
      'button-text' => '',
      'icon-class' => 'fa fa-arrows-alt',
    );

    if (!empty($node_actions)) {
      $node_contextual_actions[] = array(
        'id' => 'node-dropdown',
        'title' => 'Contextual actions',
        'button-text' => '',
        'icon-class' => 'fa fa-bars',
        'children' => $node_actions
      );
    }

    return $node_contextual_actions;
  }
}

function gofast_get_node_new_comments($node) {
  $res = db_query("SELECT cid, pid, uid, subject, nid, changed, thread, field_comment_is_private_value
          FROM {comment}
          LEFT JOIN {field_data_field_comment_is_private}
          ON entity_id=cid
          WHERE nid = :nid
          AND status = :nst
          ORDER BY thread DESC", array(':nid' => $node->nid, ':nst' => COMMENT_PUBLISHED));

  $last_viewed_node = node_last_viewed($node->nid);
  $timestamp = ($last_viewed_node > NODE_NEW_LIMIT ? $last_viewed_node : NODE_NEW_LIMIT);

  $new_comments = array();
  foreach ($res as $comment) {
    global $user;
    //Check if comment is visible
    if($comment->field_comment_is_private_value){
        if($comment->uid != $user->uid){
            continue;
        }
    }

    if ($comment->changed > $timestamp) {
      $new_comments[] = $comment;
    }
  }

  return $new_comments;
}

function gofast_get_content_state_archived($node) {
  $archived_state = FALSE;
  $archived_taxonomy_term = taxonomy_get_term_by_name("Pre-Archived", 'state');
  $archived_taxonomy_term_id = reset($archived_taxonomy_term)->tid;
  if (isset($node->{'field_state'}[LANGUAGE_NONE][0]['tid']) && $node->{'field_state'}[LANGUAGE_NONE][0]['tid'] === $archived_taxonomy_term_id) {
    $archived_state = TRUE;
  }
  return $archived_state;
}

function gofast_get_refresh_action_node($node , $mobile = false) {
  $refresh_actions = array();

  // New comments
  if ($node->type === 'alfresco_item') {
    $refresh_button = array(
      'id' => 'refresh-preview',
      'alt' => t('Refresh preview', array(), array('context' => 'gofast')),
      'title' => t("Refresh preview", array(), array('context' => 'gofast')),
      'button-text' => '',
      'icon-class' => 'fa fa-refresh',
      'disabled' => TRUE,
      'onClick' => 'Drupal.gofast_cmis.reloadPreview();',
    );

    if($mobile == true){
        unset($refresh_button['disabled']);
    }

    $refresh_actions[] = $refresh_button;
  }
  return $refresh_actions;
}

/*
 * $add param set to true : Just return the add comment action
 */
function gofast_get_comments_actions_node($node, $add = FALSE) {
  $list_comments = array();
  $comments_actions = array();

  // New comments
  if (in_array($node->type, gofast_og_content_bundles())) {
    $new_comments = gofast_get_node_new_comments($node);

    $new_comments_count = !empty($new_comments) ? count($new_comments) : 0;
    $new_comments_class = $new_comments_count ? ' new-comments' : '';
    $btn_classes = 'fa fa-comments' . $new_comments_class;
    global $base_url;
    if($add){
      $comment_button = array(
        'id' => 'unread-comments',
        //'classes' => array('ctools-use-modal', 'ctools-modal-gofast-cked'),
        'alt' => t('New comment', array(), array('context' => 'gofast')),
        'title' => t("New comment"),
        'button-text' => '+',
        'icon-class' => 'fa fa-comments',
        'href' => $base_url . "/gofast/nojs/comment/reply/{$node->nid}",
        'classes' => array('ctools-use-modal ctools-modal-center block-comment-button')
      );
      $comments_actions[] = $comment_button;
      return $comments_actions;
    }

    foreach ($new_comments as $comment) {
      $comment_link = theme('gofast_link_generic', array(
        'text' => $comment->subject,
        'link_id' => "comment-link-".$comment->cid, // The id=comment-<n> already exists in the forum section. Therefore, 2 elements with the same id, which is impossible, occurs the problem that click the comments in the right block section doesn't jump to the appropriate comment in the forum section.
        'link_class' => 'btn btn-sm',
        'href' => '/node/'.$node->nid.'#comment-'.$comment->cid,
        'icon_class' => "fa fa-comment"
      ));
      $list_comments[]['themed'] = '<li>' . $comment_link . '</li>';
    }

    $comment_button = array(
      'id' => 'unread-comments',
      //'classes' => array('ctools-use-modal', 'ctools-modal-gofast-cked'),
      'alt' => t('Unread comments', array(), array('context' => 'gofast')),
      'title' => t("Unread comments"),
      'button-text' => $new_comments_count,
      'icon-class' => $btn_classes,
    );
    if($new_comments_count > 0){
      $comment_button['link_id'] = "comment-link-".$new_comment[0]->cid;
      $comment_button['href'] = '/node/'.$node->nid.'#comment-'.$new_comments[0]->cid;
    }
    else{
      $comment_button['disabled'] = TRUE;
    }
    $comments_actions[] = $comment_button;

    if (!empty($list_comments)) {
      $comments_actions[] = array(
        'id' => 'comments-dropdown',
        'title' => t('Unread comments', array(), array('context' => 'gofast')),
        'button-text' => '',
        'icon-class' => 'fa fa-sort-desc',
        'children' => $list_comments
      );
    }
  }
  return $comments_actions;
}

function gofast_comment_insert($comment){
  //Save the node to trigger activity feed date update if the comment is not private
  if($comment->field_comment_is_private['und'][0]['value'] == 0){
    $node = node_load($comment->nid);
    node_save($node);
  }
}

function gofast_comment_update($comment){
  //Save the node to trigger activity feed date update if the comment is not private
  if($comment->field_comment_is_private['und'][0]['value'] == 0){
    $node = node_load($comment->nid);
    node_save($node);
  }
}

function gofast_get_lock_action_node($node) {
  $lock_action = array();

  // Node lock status
  if ($node->type === 'alfresco_item') {
    $locked_owner = gofast_cmis_node_get_lock($node);
    $unlock_button = array();
    if ($locked_owner === 'nolocked') {
      $unlock_button = array(
        'id' => 'unlock_document_span_todo',
        'title' => t('Sometimes, a document is not shown as locked but Microsoft Office considere it as locked. In this case you can click here to force unlock', array(), array('context' => 'gofast')),
        'button-text' => '',
        'icon-class' => 'fa fa-unlock',
        'alt' => 'Unlock',
        'disabled' => true
      );
    }
    else {
      $locked_owner = $locked_owner ? user_load_by_name(array('name' => trim($locked_owner))) : NULL;
      $lock_icon = gofast_onlyoffice_document_get_soft_lock($node) ? 'fa-unlock' : 'fa-lock';
      if ($locked_owner !== NULL) {
        $unlock_button = array(
          'id' => 'unlock_document_span',
          'title' => t('@user is locking this document', array('@user' => gofast_user_get_display_name_sql($locked_owner->uid) )),
          'button-text' => '',
          'icon-class' => 'fa document_locked ' . $lock_icon,
          'alt' => 'Unlock',
          'avatar' => theme('user_picture', array('account' => $locked_owner, 'dimensions' => 15))
        );
        if (!gofast_user_can_unlock_document($node, $locked_owner)) {
          //$unlock_button['disabled'] = true;
          $unlock_button['classes'][] = 'not-unlockable';
        }
        else {
          $unlock_button['onClick'] = 'Drupal.gofast_cmis.unlockDocument(\'' . $node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value'] . '\', \'' . $locked_owner->uid . '\')';
        }
      }
    }
    $lock_action[] = $unlock_button;
  }
  return $lock_action;
}

function gofast_get_contextual_actions_node($node, $browser_path = FALSE, $fromTree = FALSE) {
  $node_actions = array();
  $node_contextual_actions = array();

  if($node == "filebrowser"){
    //Selected elements are stores in POST the input
    $selected = $_POST['selected'];
    $fromTree = $_POST['fromTree'];

    //Just in case
    if(count($selected) == 0){
      return;
    }
    $browser_actions = gofast_get_file_browser_actions($selected, $fromTree);

    return $browser_actions;
  }

  if ($node->type === 'webform') {
    global $user;
    if (node_access('update', $node, $user)) {
      if (in_array('webform', arg())) {
        $path = drupal_get_path('module', 'gofast_webform');
        drupal_add_js($path . '/gofast_webform.js', array('type' => 'file', 'scope' => 'header', 'group' => JS_THEME));
        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_form', array('nid' => $node->nid)) . '</li>';
        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results', array('nid' => $node->nid)) . '</li>';
        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_configuration', array('nid' => $node->nid)) . '</li>';
      }
      else if (in_array('webform-results', arg())) {
        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results', array('nid' => $node->nid)) . '</li>';
        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results_analysis', array('nid' => $node->nid)) . '</li>';
        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results_download', array('nid' => $node->nid)) . '</li>';
        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_results_table', array('nid' => $node->nid)) . '</li>';

        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_form', array('nid' => $node->nid)) . '</li>';
        $node_actions[]['themed'] = '<li>' . theme('gofast_webform_form_builder', array('nid' => $node->nid)) . '</li>';
      }
    }
  }

  foreach (gofast_views_get_node_available_actions($node, $browser_path, $fromTree) as $action) {

    if(is_array($action)){

      $children = array();
      foreach($action['children'] as $child){
         $children[]['themed'] = $child;
       }

       $node_actions[] = array(
        'themed' => $action['action'],
        'children' => $children
       );

    }
    else  if (strpos($action, "header:") !== FALSE) {
      $header = explode("header:", $action)[1];
      $node_actions[]['themed'] = '<li class="dropdown-header">' . $header . '</li>';
    }
    else if (strpos($action, "divider:") !== FALSE) {
      $node_actions[]['themed'] = '<li role="separator" class="divider"></li>';
    }
    else {
      $node_actions[]['themed'] = '<li>' . $action . '</li>';
    }
  }

  if(gofast_og_is_space($node)) {
    $node_path = gofast_cmis_space_get_webdav_path($node->nid);
    $node_contextual_actions[] = array(
      'id' => 'open-browser',
      'title' => t('Browse from here', array(), array('context' => 'gofast')),
      'button-text' => '',
      'icon-class' => 'fa fa-sitemap open-browser',
      'href' => '/gofast/browser',
      'target' => '_blank'
    );
  }

  /* This item allows fullscreen view (like F11). Not activated yet.
    libraries_load('jquery-fullscreen');
    array(
    'id' => 'toggle-fullscreen',
    'title' => t('Set content to fullscreen'),
    'button-text' => '',
    'icon-class' => 'fa fa-desktop',
    ), */
  $node_contextual_actions[] = array(
    'id' => 'toggle-fitscreen',
    'title' => t('Set content to full windows size', array(), array('context' => 'gofast')),
    'button-text' => '',
    'icon-class' => 'fa fa-arrows-alt',
    'onClick' => "Gofast.toggle_fitscreen(this);"
  );

  if (!empty($node_actions)) {
    $node_contextual_actions[] = array(
      'id' => 'node-dropdown',
      'title' => 'Contextual actions',
      'button-text' => '',
      'icon-class' => 'fa fa-bars',
      'children' => $node_actions
    );
  }
  global $user;
  $can_access = gofast_og_node_access($node, 'view', $user);
  $is_adm = gofast_user_is_adm();

  if( gofast_og_is_space($node) && $can_access === NODE_ACCESS_IGNORE && $is_adm == false ){
    return $node_contextual_actions = array();
  }else{
    return $node_contextual_actions;
  }

}

/*
 * Get node actions for file browser
 */
function gofast_get_file_browser_actions($selected, $fromTree = FALSE){
  $browser_actions = array();

  //First, we try to figure out what the user has selected to build the menu

  if(count($selected) == 1){ //Only one item is selected

    $path = $selected[0];
    $path_decoded = rawurldecode($path);
    $nid = gofast_ajax_file_browser_get_nid_from_href($path_decoded);

    if(is_numeric($nid)){ //A node is associated with this item
      $node = node_load($nid);
      if($node->type == "alfresco_item"){ //Check locations
          gofast_process_location_check_async($nid, true);
      }
      $node = node_load($nid, NULL, TRUE);
      $browser_actions = gofast_get_contextual_actions_node($node, $path);
    }else{ //No associated nodes
      $browser_actions = gofast_get_contextual_actions_node(null, $path, $fromTree);
      if(strpos(json_encode($browser_actions), "Contextual actions") === false){
          $browser_actions = gofast_get_mass_actions_on_selected_items($selected);
      }
    }
  }else{
    $browser_actions = gofast_get_mass_actions_on_selected_items($selected);
  }
  return $browser_actions;
}

/*
 * Multiple items selected in File Browser
 */
function gofast_get_mass_actions_on_selected_items($selected){
  $contains_space = false;
  $actions = array();

  foreach($selected as $path){ //Check if one of the selected items is a space
    if(substr($path, -1) == "/"){ //Remove slash at the end
      $path = substr($path, 0, -1);
    }

    $path = explode('/', $path);
    $path = array_pop($path);

    if(substr($path, 0, 1) == "_"){
      $contains_space = true;
    }
  }

  //GOFAST-5338
  foreach($selected as $path){ //Check if one of the selected items is a folder
    if(substr($path, -1) == "/"){ //Remove slash at the end
      $path = substr($path, 0, -1);
    }

    $path = explode('/', $path);
    $path = array_pop($path);
    $extension = explode(".", $path);
    if(count($extension) < 2){
        $contains_folder = true;
    }else{
        $extension = array_pop($extension);
        if(strlen($extension) < 1 || strlen($extension) > 5 || strpos($extension, " ") !== FALSE){
            $contains_folder = true;
        }
    }
  }

  if(!$contains_space){
    $actions[]['themed'] = '<li>' . theme('gofast_link_generic', array(
          'text' => t('Delete', array(), array('context' => 'gofast')),
          'link_id' => "delete",
          'link_class' => 'btn btn-sm',
          'href' => '',
          'icon_class' => "fa fa-trash",
          'target' => '_blank',
          'onClick' => 'Gofast.ITHit.deleteSelected(event)',
        )) . '</li>';
    if(!$contains_folder){
        $actions[]['themed'] = '<li>' . theme('gofast_link_generic', array(
              'text' => t('Download', array(), array('context' => 'gofast')),
              'link_id' => "download",
              'link_class' => 'btn btn-sm',
              'icon_class' => "fa fa-cloud-download",
              'onClick' => 'Gofast.ITHit.downloadSelected()',
            )) . '</li>';
    }
  }
  $attr = array(
    'onClick' => "Gofast.ITHit.bulkSelected(event)"
  );

  foreach(module_implements('alter_mass_actions_on_selected_items') as $module){
    $function = $module . '_alter_mass_actions_on_selected_items';
    $actions = call_user_func( $function, $actions, $contains_space, $contains_folder, $selected );
  }
  if(!$contains_space && !$contains_folder){
    $actions[]['themed'] = '<li>' . gofast_dropdown_link(t('Manage Metadata', array(), array('context' => 'gofast')), '/modal/nojs/manage-taxonomy', 'taxonomy_open_span', 'ctools-use-modal manage-taxonomy', 'fa fa-tags', $attr). '</li>';
    $actions[]['themed'] = '<li>' . gofast_dropdown_link(t('Share/Add locations', array(), array('context' => 'gofast')), '/modal/nojs/add-locations', 'locations_open_span', 'ctools-use-modal add-locations', 'fa fa-share-alt', $attr). '</li>';
    $actions[]['themed'] = '<li>' . gofast_dropdown_link(t('Create publications', array(), array('context' => 'gofast')), '/modal/nojs/manage-publications', 'locations_open_span', 'ctools-use-modal manage-publications', 'fa fa-arrow-up', $attr). '</li>';
    $actions[]['themed'] = '<li>' . gofast_dropdown_link(t('Share by email', array(), array('context' => 'gofast')), '/modal/nojs/manage-mail-sharing', 'locations_open_span', 'ctools-use-modal manage-mail-sharing', 'fa fa-envelope', $attr). '</li>';
    $actions[]['themed'] = '<li>' . gofast_dropdown_link(t('Archive', array(), array('context' => 'gofast:ajax_file_browser')), '/modal/nojs/bulk-archive', 'locations_open_span', 'ctools-use-modal bulk-archive', 'fa fa-archive',$attr). '</li>';
    $actions[]['themed'] = '<li>' .  gofast_dropdown_link(t('Add to cart', array(), array('context' => 'gofast')), '/modal/nojs/bulk_add_to_cart', 'cart_open_span', 'ctools-use-modal add_to_cart', 'fa fa-cart-plus', $attr). '</li>';
  }

  return array(
    0 => array(
      'id' => 'toggle-fitscreen',
    ),
    1 => array(
      'id' => 'node-dropdown',
      'title' => 'Contextual actions',
      'button-text' => "",
      'icon-class' => 'fa fa-bars',
      'children' => $actions,
    )
  );
}

function gofast_preprocess_html(&$vars) {
  // Detect browser capabilities.
  $browser = gofast_get_browser();
  if (isset($browser->browser)) {
    $vars['classes_array'][] = $browser->browser;
  }
}

/**
 * Implements hook_block_info
 */
function gofast_block_info() {
  $blocks['gofast_node_infos'] = array(
    'info' => t('Node Infos', array(), array('context' => 'gofast')),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => -40,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_PHP,
    'pages' => '<?php return TRUE; ?>', // @todo
  );

  $blocks['gofast_node_actions'] = array(
    'info' => t('Node Actions', array(), array('context' => 'gofast')),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => -50,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_PHP,
    'pages' => '<?php return TRUE; ?>', // @todo condition
  );

  $blocks['lang_switch'] = array(
    'info' => t('Gofast Languages Switcher', array(), array('context' => 'gofast')),
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -50,
    'status' => 1,
    'region' => -1,
    'visibility' => BLOCK_VISIBILITY_PHP,
    'pages' => '<?php return TRUE; ?>',
  );

  $blocks['gofast_node_comments_tree'] = array(
    'info' => t('Node Comments tree', array(), array('context' => 'gofast')),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => -60,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_PHP,
    'pages' => '<?php return TRUE; ?>', // @todo condition
  );

  $blocks['gofast_audit_node_page'] = array(
    'info' => t('The audit of the node', array(), array('context' => 'gofast')),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => -20,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_PHP,
    'pages' => '<?php return TRUE; ?>', // @todo condition
  );

  return $blocks;
}

/**
 * Implements hook_block_info
 */
function gofast_block_view($delta = '') {
  $block = array();
  $subject = $content = '';

  switch ($delta) {
    case 'gofast_node_infos':
      //$subject = t('Info');/** @todo : icon -i- */
      if (arg(0) == 'node' && is_numeric(arg(1))) { /** @todo : condition dans hook_block_info */
        $nodeid = arg(1);
        $node = node_load($nodeid);
        global $user;
        //if($node->type === 'forum' && $node->uid !== $user->uid) {
        //  $content = "";
        //} else {
          $content = gofast_get_node_infos($node, TRUE);
       // }
      }
      break;

    case 'gofast_node_actions':
      if (arg(0) === 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $text = t('Manage content', array(), array('context' => 'gofast'));
        $content = gofast_get_node_actions($node, $text, array('actions-wrapper'));
      }
      break;

    case 'gofast_node_comments_tree':
      if (arg(0) === 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        if($node->status == 0){ //Node is unpublished
            $content = "" ;
        }else{
             $content = gofast_get_comments_view($node);
        }
      }
      break;

    case 'lang_switch':
      $content = gofast_get_lang_switcher_content();
      break;
    case 'gofast_audit_node_page':
        global $user;
        if (gofast_user_has_role('administrator',$user) == 1){
            if (arg(0) == 'node' && is_numeric(arg(1))) {
                $node = node_load(arg(1));/** @todo : condition dans hook_block_info */
                if($node->type === "alfresco_item" && !gofast_mobile_is_mobile_domain()){
                    $subject = t('Audit' , array() , array('context' => 'gofast:gofast_audit'));
                    $content = "<div class='loader_audit_node'></div>";
                }
            }
        }
  }

  $block['subject'] = $subject;
  $block['content'] = $content;

  return $block;
}

function gofast_get_lang_switcher_content() {

  if (drupal_multilingual()) {
    $path = $_GET['q'];
    $available_languages = language_list();
    $links = array();
    global $language;
    foreach ($available_languages as $available_language) {
        if($available_language->enabled == 0){
            continue;
        }

      $options = array();
      $options['query'] = array('language' => $available_language->language);
      if ($language->language === $available_language->language) {
        $options['attributes'] = array('class' => array('current'));
      }
      $links[] = l($available_language->language, $path, $options);
    }
    $content = implode('|', $links);
  } else {
    $content = '';
  }
  return $content;
}

/**
 * Hook theme
 */
function gofast_theme() {
  $themes['node_title'] = array(
    'variables' => array(
      'node' => NULL,
      'icon_size' => 24,
      'link' => TRUE
    )
  );

  $themes['contextual_links'] = array(
    'template' => 'tpl/contextual_links',
    'variables' => array(
      'btn_group_id' => NULL,
      'buttons' => array()
    )
  );

    $themes['not_found'] = array(
    'template' => 'tpl/not_found',
  );

    $themes['forbidden'] = array(
    'template' => 'tpl/forbidden',
  );

  $themes['not_supported'] = array(
    'template' => 'tpl/not_supported',
  );

  $themes['account_settings'] = array(
    'template' => 'tpl/account_settings',
    'variables' => array(
      'href' => NULL,
      'class' => NULL,
      'text' => NULL
    )
  );

  $themes['node_infos'] = array(
    'template' => 'tpl/node_infos',
  );

  $themes['gofast_dashboard'] = array(
    'template' => 'tpl/dashboard',
    'variables' => array(
      'alfresco_status' => NULL,
      'bonita_status' => NULL,
      'solr_status' => NULL,
      'soffice_status' => NULL,
      'cron' => NULL,
    )
  );

  $themes['gofast_sync_status'] = array(
    'template' => 'tpl/gofast-sync-status',
  );

  $themes['gofast_integrity_status'] = array(
    'template' => 'tpl/gofast-integrity-status',
  );

  $themes['gofast_integrity_results'] = array(
    'template' => 'tpl/gofast-integrity-results',
  );

  $themes['gofast_dashboard_process'] = array(
    'variables' => array(
      'name' => NULL,
      'state' => NULL,
      'timestamp' => NULL,
      'button' => NULL
    )
  );

    $themes['node_locations'] = array(
    'template' => 'tpl/node_locations',
    'variables' => array(
      'node_locations_options' => array(
        'link_text' => NULL,
        'href' => NULL
      )
    )
  );
   $themes['node_locations_members'] = array(
    'template' => 'tpl/node_locations_members',
    'variables' => array(
        'members' => NULL,
        'members_name'=>NULL,
        'members_roles'=>NULL,
      )
  );

  gofast_xeditable_theme($themes);

  return $themes;
}

function gofast_get_comments_view($node) {
  return gofast_comments_tab($node);
}

function gofast_comments_tab($node) {

  $content = "";

  $comments_help_html_title = t("Comments");
  $comments_help_html = t("You can comment a content. Comments added by all users about this content are summarized here, and you can access it directly by clicking");
  // TODO GF3 : Port method
  $comments_help_html_final = "";
  //$comments_help_html_final = gofast_return_html_help_hidden($comments_help_html_title, $comments_help_html, "bottom", "comments-wrapper", "50", "20", "absolute", "middle");
  $content .= $comments_help_html_final;

  // On ajoute lien pour l'ajout de commentaire
  $href = '/gofast/nojs/comment/reply/' . $node->nid;
  $text = t("Add a comment");

  // TODO GF3 : Restore modal button
  //$content .= ctools_modal_text_button($text, $href, $alt, $class);
  $html_img_comments = '<span><i class="fa fa-comments-o"></i>&nbsp;' . $text . '</span>';
  //$content .= '<a href=' . $href . ' title="' . $text . '" alt="' . $text . '" class="ctools-use-modal">' . $html_img_comments . '</a>';$
  $node_comments_action = gofast_get_comments_actions_node($node, TRUE);
  $comments_actions = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-comments', 'buttons' => $node_comments_action));
  $block_title = t('Comments ', array(), array('context' => 'gofast')) . $comments_actions;
  $content .= '<h2 class="block-title">' . $block_title . '</h2>';

  // Récuperer les comentaires associés au noeud
  $res = db_query("SELECT cid, pid, uid, subject, nid, changed, thread, field_comment_is_private_value
        FROM {comment}
        LEFT JOIN {field_data_field_comment_is_private}
        ON entity_id=cid
        WHERE nid = :nid
        AND status = :nst
        ORDER BY thread DESC", array(':nid' => $node->nid, ':nst' => COMMENT_PUBLISHED));

  $res_compare = db_query("SELECT cid, pid, uid, subject, nid, changed, thread, field_comment_is_private_value
        FROM {comment}
        LEFT JOIN {field_data_field_comment_is_private}
        ON entity_id=cid
        WHERE nid = :nid
        AND status = :nst
        ORDER BY thread DESC", array(':nid' => $node->nid, ':nst' => COMMENT_PUBLISHED))->fetchAll();

  // Timestamp de la dernière fois que l'user a vu le noeud
  $last_viewed_node = node_last_viewed($node->nid);
  // Tenir compte de la "limite de la nouveauté" (30jours?)
  $timestamp = ($last_viewed_node > NODE_NEW_LIMIT ? $last_viewed_node : NODE_NEW_LIMIT);

  // Pour chaque commentaire on ajoute la propriéte "link" (ancre)
  // et la propriété "new" (fonction de $timestamp)
  $comments = array();
  global $user;
  //$comments_tree = array();
  foreach ($res as $comment) {
    //Check if comment is visible
    if($comment->field_comment_is_private_value){
        if($comment->uid != $user->uid){
            continue;
        }
    }

    //Check parents of each comments to verify if we have the permission to see them
    $thread = $comment->thread;
    $thread = str_replace("/", "", $thread);
    $thread = explode(".", $thread);
    array_pop($thread);
    while(!empty($thread)){
        $search = implode('.', $thread) . "/";
        foreach($res_compare as $candidate){
            if($candidate->thread == $search){
                $candidate->field_comment_is_private[LANGUAGE_NONE][0]['value'] = $candidate->field_comment_is_private_value;
                if(!comment_access('view', $candidate)){
                    continue 3;
                }
            }
        }
        array_pop($thread);
    }

    $comment->link = 'comment-' . $comment->cid;
    $comment->new = $comment->changed > $timestamp ? 1 : 0;
    $comments[] = $comment;
  }

  if (!empty($comments)) {
    // Ajoute un attribut indent pour l'indentation (reply to...)
    $comments[0]->indent = 0;
    for ($i = 1; $i < count($comments); $i++) {
      $comments[$i]->indent = (substr_count($comments[$i]->thread, '.') + 1) - (substr_count($comments[$i - 1]->thread, '.') + 1);
    }
  }
  // Créer un index sous forme d'arbre
  $content .= '<div style="font-size:85%;">';
  $content .= gofast_toc_tree($comments);
  $content .= '</div>';
  //json_encode($comments_tree);
  return $content;
}

function gofast_toc_tree($comments = array()) {
  $k = count($comments);
  $str = $k > 1 ? t('Comments', array(), array('context' => 'gofast')) : t('Comment', array(), array('context' => 'gofast'));
  $pos = 0;

  $tree = '<ul class = "menu jquerymenu book_block" style="margin-bottom:0;">';
  //$tree .= '<li id="commentaire" style="color:#636363; margin-bottom:4px;">';
  //$tree .= $k . ' ' . $str . ' </li>';

  if ($k == 0) {
    return $tree . '</ul>';
  }
  $user_commenter = user_load($comments[0]->uid);
  $user_picture = theme('user_picture', array('account' => $user_commenter, 'dimensions' => 15));
  $new = '<span class="new"><a href="#" alt="' . t('New', array(), array('context' => 'gofast')) . '" title="' . t('New', array(), array('context' => 'gofast')) . '!"> *</a></span>';
  for ($i = 0; $i < $k - 1; $i++) {
    $user_commenter = user_load($comments[$i]->uid);
    $user_picture = theme('user_picture', array('account' => $user_commenter, 'dimensions' => 15));
    $new = $comments[$i]->new ? $new : '';
    if ($comments[$i + 1]->indent > 0) {
      $tree .= '<li id="' . $comments[$i]->cid . '" class="parent closed comment-flexed">';
      $tree .= $user_picture;
      $tree .= '<span class="parent closed" style="margin-top:2px;"></span>';
      $tree .= '<a anchor="' . $comments[$i]->link . '" class="scrolltoanchor" href="/node/' . $comments[$i]->nid . '#' . $comments[$i]->link . '">' . $comments[$i]->subject . '</a>' . $new;
      $tree .= '<ul>';
      $pos++;
    }
    if ($comments[$i + 1]->indent < 0) {
      $indent = $comments[$i + 1]->indent;
      $tree .= '<li id="' . $comments[$i]->cid . '" class="comment-flexed">';
      $tree .= $user_picture;
      $tree .= '<a anchor="' . $comments[$i]->link . '" class="scrolltoanchor" href="/node/' . $comments[$i]->nid . '#' . $comments[$i]->link . '">' . $comments[$i]->subject . '</a>' . $new . '</li>';
      while ($indent != 0) {
        $tree .= '</ul></li>';
        $indent++;
        $pos--;
      }
    }
    if ($comments[$i + 1]->indent == 0) {
      $tree .= '<li id="' . $comments[$i]->cid . '" class="comment-flexed">';
      $tree .= $user_picture;
      $tree .= '<a anchor="' . $comments[$i]->link . '" class="scrolltoanchor" href="/node/' . $comments[$i]->nid . '#' . $comments[$i]->link . '">' . $comments[$i]->subject . '</a>' . $new . '</li>';
    }
  }
  $new = $comments[$i]->new ? $new : '';
  $tree .= '<li id="' . $comments[$k - 1]->cid . '" class="comment-flexed">';
  $user_comment = user_load($comments[$k - 1]->uid);
  $user_pictu = theme('user_picture', array('account' => $user_comment, 'dimensions' => 15));
  $tree .= $user_pictu;
  $tree .= '<a anchor="' . $comments[$i]->link . '" class="scrolltoanchor" href="/node/' . $comments[$i]->nid . '#' . $comments[$i]->link . '">' . $comments[$i]->subject . '</a>' . $new . '</li>';
  while ($pos != 0) {
    $tree .= '</ul></li>';
    $pos--;
  }
  $tree .= '</ul>';
  return $tree;
}


/**
 * This function prepares the locations for a node.
 */
function gofast_get_node_locations($node, $origine = null) {
  global $user;
  $all_paths = array();
  $selected_paths = array();
  $check_disabled_locations = array();
  $disabled_paths = array();

  if ($node->type === "alfresco_item") {
    // We are processing node that is alfresco_item
    $check_disabled_locations = array();
    if($origine == null){
        $user_paths = gofast_ztree_get_paths();
    }else{
        $user_paths = gofast_ztree_get_paths(false, null, $origine);
    }

    // New ztree selected items
    $selected_spaces = array();
    $map_id_locations = array();
    $check_disabled_locations = array();
    $node_locations_paths = array();

    if (isset($node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE])) {
      $node_locations_paths = array_map(function($element) {
        return $element['value'];
      }, $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE]);
    }

    foreach ($node_locations_paths as $node_location_path) {
      // For every location we retrieve the node id
      if (!isset($map_id_locations[$node_location_path])) {
        $item = gofast_cmis_item_get_by_path($node_location_path);
        if(isset($item->properties['gofast:nid'])){
          $item_nid = $item->properties['gofast:nid'];
          $map_id_locations[$node_location_path] = $item_nid;
        }
        else {
          $map_id_locations[$node_location_path] = $node_location_path;
        }
      }
    }

    $node_parents = gofast_og_get_parent($node);
    $selected_spaces = array_merge($selected_spaces, $node_parents);
    // For every parent we check the permission, disable check if not member
    foreach ($node_parents as $node_parent) {
      if (!node_access('view', node_load($node_parent))) {
        $check_disabled_locations[$node_parent] = gofast_cmis_space_get_webdav_path($node_parent);
      }
    }

    $selected_paths = array_flip($map_id_locations);

    if(!empty($selected_paths)) {
      $user_paths += $selected_paths;
    }

    $all_paths = $user_paths;
  }
  else {
    // We are processing content node that is not alfresco_item
    $all_paths = gofast_ztree_get_paths(TRUE);

    $og_selected_paths = array_map(function($item) {
      if(count($item) === 1) {
        return node_load($item['target_id']);
      }
      return $item['entity'];
    }, $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE]);

    foreach ($og_selected_paths as $space) {
      $selected_paths[$space->nid] = gofast_cmis_space_get_webdav_path($space->nid);
      if (!node_access('view', $space)) {
        $check_disabled_locations[$space->nid] = gofast_cmis_space_get_webdav_path($space->nid);
      }
    }
  }

  // This disables the root spaces (_Organisation, _Groups, _Public, _Extranet
  // and every user private spaces that are not current user private space).
  foreach ($all_paths as $gid => $path) {
    $parts = explode('/', $path);
    if (intval($gid) !== 0 && (count($parts) === 3 && $parts[2] !== '_'.$user->name)) {
      $disabled_paths[$gid] = $path;
    }
  }

  return array(
    'all_paths' => $all_paths,
    'selected_paths' => $selected_paths,
    'check_disabled_paths' => $check_disabled_locations,
    'disabled_paths' => $disabled_paths,
  );
}

/**
 * This function prepares the locations for a node.
 */
function gofast_get_node_locations_async($node, $origine = null, $template = false  , $browser_path = null, $is_publication = false, $conference_path = null ,$is_confidential = false, $is_internal = false) {

  global $user;
  $all_paths = array();
  $selected_paths = array();
  $check_disabled_locations = array();
  $disabled_paths = array();

  if ($node->type === "alfresco_item" || $node->type === "conference") {
    // We are processing node that is alfresco_item
    $check_disabled_locations = array();
    if($origine == null){
        $origine = "/Sites/";
        $has_origine = null;
    }else{
         $has_origine = true;
    }
    if($browser_path != null){
        $has_browser_path = true;
    }else{
        $has_browser_path = false;
    }
    $item = gofast_cmis_item_get_by_path($origine, FALSE);
    if($template == false){
        $user_paths =  gofast_cmis_webservice_item_get_descendants($item->id, "groupsfolders", true);
    }else{
        $user_paths =  gofast_cmis_webservice_item_get_descendants($item->id, "templates", true);
    }


    // New ztree selected items
    $selected_spaces = array();
    $map_id_locations = array();
    $check_disabled_locations = array();
    $node_locations_paths = array();

    if($has_origine == null){
        if (isset($node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE]) && count($node->og_group_content_ref) !== 0) {
          $node_locations_paths = array_map(function($element) {
            return $element['value'];
          }, $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE]);
        }
    }
    if($has_browser_path && !isset($_REQUEST['ename'])){
        $node_locations_paths[] = $browser_path;
    }

    if($conference_path != null){
        $node_locations_paths = array_map(function($element) {
            return $element['value'];
          }, $conference_path);
    }

    foreach ($node_locations_paths as $key=>$node_location_path) {
      // For every location we retrieve the node id
      if (!isset($map_id_locations[$node_location_path])) {
        $item = gofast_cmis_item_get_by_path($node_location_path);
        if(isset($item->properties['gofast:nid'])){
          $item_nid = $item->properties['gofast:nid'];
          ## Removes spaces that the user does not have access to in publication form ( https://ceo-vision.com/jira/browse/GOFAST-5519 )
          if($is_publication){
              if(!og_user_access(node, $item_nid, 'create alfresco_item content')){
                  unset($node_locations_paths[$key]);
                  continue;
              }
          }
          $map_id_locations[$node_location_path] = $item_nid;
        }
        else {
          $map_id_locations[$node_location_path] = $node_location_path;
        }

        //We load (non async) the neighbours of the selected paths as ztree consider them loaded
        $paths_to_load = explode('/', substr($node_location_path, 1));
        //We don't need to load the 1st level as it is already loaded
        $path_to_load = '/'.$paths_to_load[0].'/'.$paths_to_load[1].'/'.$paths_to_load[2].'/';
        unset($paths_to_load[0]);
        unset($paths_to_load[1]);
        unset($paths_to_load[2]);
        $continue = FALSE; //2 subs are loaded so we don't need to load 1/2 paths
        foreach($paths_to_load as $path_element){
          if(!$continue){
            $item_load = gofast_cmis_item_get_by_path($path_to_load);
            $user_paths = array_merge($user_paths, gofast_cmis_webservice_item_get_descendants($item_load->id, "groupsfolders", true));
          }
          $path_to_load .= $path_element.'/';
          $continue = !$continue;
        }
          unset($user_paths[$node_location_path]);

          }
    }

    foreach(array_flip($user_paths) as $key => $path) {
              $all_path[$key] = $path;
          }

         $string_liste = "";
    foreach($all_path as $gid=>$path){
        $string_liste .= $gid."::*::".$path."\n";
    }
       $liste = explode("\n", $string_liste);
   $formatted_liste = array();
   foreach($liste as $element_liste){
       $array_element_liste = explode("::*::", $element_liste);
       if($array_element_liste[0] !== 0 && $array_element_liste[0] != ""){
        $formatted_liste[$array_element_liste[0]] = $array_element_liste[1];
       }
   }

   $user_paths = $formatted_liste;

    if($has_origine == null){
        $node_parents_paths = $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE];
    }else{
        $node_parents_paths = array();
    }
    // For every parent we check the permission, disable check if not member, not admin or not document's author
    foreach ($node_parents_paths as $node_parent_path) {
      //if (!node_access('view', node_load($node_parent))) {
    $gid = gofast_og_get_group_id_from_title_without_cmis($node_parent_path['value'],true,true);

    global $user;
    $roles = gofast_og_get_user_final_roles_for_space('node', $gid, $user->uid);
    $role = reset($roles);
    $can_delete = false;
    //if it's a publication, always allow to uncheck preselected path
    if($role == "administrator member" || $node->uid == $user->uid || $is_publication){
         $can_delete = true;
    }
    if(!og_user_access('node', $gid, 'create alfresco_item content') ||  $can_delete == false){
        if(gofast_cmis_space_get_webdav_path($gid) === $node_parent_path['value']){
            $check_disabled_locations[$gid] = $node_parent_path['value'];
        }else{
            //Disable for subfolder
            $check_disabled_locations[$node_parent_path['value']] = $node_parent_path['value'];
        }
      }
    }
    $selected_paths = array_flip($map_id_locations);
    if($has_browser_path != null && array_search($browser_path, $selected_paths) === false){
        $selected_paths[$browser_path] = $browser_path;
    }


    if(!empty($selected_paths)) {
      //$user_paths += $selected_paths;
    }

    $all_paths = $user_paths;
  }
  else {
    // We are processing content node that is not alfresco_item
    if ($origine == null) {
      $spaces = array();
      $gid = 'all';
      if ($gid == 'all') {
        foreach (array('Groups', 'Organisations', 'Public', 'Extranet') as $spaces_names) {
          $gid = gofast_og_get_group_id_from_title($spaces_names, 'Sites/_' . $spaces_names);
          $spaces[$gid] = gofast_cmis_space_get_webdav_path($gid);

          foreach (gofast_og_get_children($gid, FALSE, TRUE) as $sub_spaces) {
            if (og_user_access('node', $sub_spaces->nid, 'create alfresco_item content')) {
              $spaces[$sub_spaces->nid] = gofast_cmis_space_get_webdav_path($sub_spaces->nid);
            }
          }
        }
        // add Private Space
        $private_space_gid = gofast_og_get_user_private_space($user, FALSE);
        $spaces[$private_space_gid] = gofast_cmis_space_get_webdav_path($private_space_gid); // '/Sites/Private Space';
      }
      asort($spaces);
      $all_paths = $spaces;
    }
    else {
      $spaces = array();
      $space_item = gofast_cmis_item_get_by_path($origine, FALSE);
      $gid = $space_item->properties['gofast:nid'];

      if(null !== $gid){
        $spaces[$gid] = gofast_cmis_space_get_webdav_path($gid);

        foreach (gofast_og_get_children($gid, FALSE, TRUE) as $sub_spaces) {
          if (og_user_access('node', $sub_spaces->nid, 'create alfresco_item content')) {
            $spaces[$sub_spaces->nid] = gofast_cmis_space_get_webdav_path($sub_spaces->nid);
          }
        }
        asort($spaces);
      }
      $all_paths = $spaces;
    }

    //in some case, $node corresponds to the parent space instead of direct node
    if($node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE] == null){
        //Get the referer URL to check if this request is made from a node
        $referer = $_SERVER["HTTP_REFERER"];
        $parts = explode("/", $referer);
        if(is_numeric(end($parts))){
            $nid = end($parts);
            if(isset(node_load($nid)->nid)){
                $node = node_load(end($parts));
            }else{
                $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE][0]['target_id'] = $node->nid;
            }
        }else{
           $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE][0]['target_id'] = $node->nid;
        }
    }

    //in some case, $node corresponds to the parent space instead of direct node
    if($node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE] == null){
        //Get the referer URL to check if this request is made from a node
        $referer = $_SERVER["HTTP_REFERER"];
        $parts = explode("/", $referer);
        if(is_numeric(end($parts))){
            $nid = end($parts);
            if(isset(node_load($nid)->nid)){
                $node = node_load(end($parts));
            }else{
                $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE][0]['target_id'] = $node->nid;
            }
        }else{
           $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE][0]['target_id'] = $node->nid;
        }
    }

    $og_selected_paths = array_map(function($item) {
      if(count($item) === 1) {
        return node_load($item['target_id']);
      }
      return $item['entity'];
    }, $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE]);

    if($origine == null){
      foreach ($og_selected_paths as $space) {
        $selected_paths[$space->nid] = gofast_cmis_space_get_webdav_path($space->nid);

        //We load (non async) the neighbours of the selected paths as ztree consider them loaded
        $paths_to_load = explode('/', substr($selected_paths[$space->nid], 1));
        //We don't need to load the 1st level as it is already loaded
        $path_to_load = '/' . $paths_to_load[0] . '/' . $paths_to_load[1] . '/' . $paths_to_load[2] . '/';
        unset($paths_to_load[0]);
        unset($paths_to_load[1]);
        unset($paths_to_load[2]);
        $continue = FALSE; //2 subs are loaded so we don't need to load 1/2 paths

        foreach ($paths_to_load as $path_element) {
          if (!$continue) {
            $item_load = gofast_cmis_item_get_by_path($path_to_load);

            //path to add
            $map_id_locations = gofast_cmis_webservice_item_get_descendants($item_load->id, "groups", true);
            $paths_to_add = array_flip($map_id_locations);
            $all_paths = $all_paths + $paths_to_add;
          }
          $path_to_load .= $path_element . '/';
          $continue = !$continue;
        }

        //if (!node_access('view', $space)) {
        if(!og_user_access('node', $space->nid, 'create alfresco_item content')){
          $check_disabled_locations[$space->nid] = gofast_cmis_space_get_webdav_path($space->nid);
        }
      }
    }

    //merge selected path into all_path (root space)
    if ($origine != null) {
      // = array_merge($all_paths, $selected_paths);
    }

  }
  // This disables the root spaces (_Organisation, _Groups, _Public, _Extranet
  // and every user private spaces that are not current user private space).
  foreach ($all_paths as $gid => $path) {
    $parts = explode('/', $path);
    $parts = array_filter($parts);
    if (intval($gid) !== 0 && (count($parts) === 2 && $parts[2] !== '_'.$user->name)) {
      $disabled_paths[$gid] = $path;
    }
  }

  $result =  array(
    'all_paths' => $all_paths,
    'selected_paths' => $selected_paths,
    'check_disabled_paths' => $check_disabled_locations,
    'disabled_paths' => $disabled_paths,
  );



  if(isset($node->field_criticity['und'][0]['tid'])){
    $is_internal = taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Internal Distribution" ? TRUE : FALSE;
    $is_confidential = taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Confidential Data" ? TRUE : FALSE;
  }

  // unset spaces public or||and extranet depend of type of Criticity
  if ($is_confidential && $is_internal) {
    foreach ($result as $k => $v) {
      foreach ($v as $j => $s) {
        if (strpos($s, 'Public') || preg_match($j, 'Public')) {
          unset($result[$k][$j]);
        } elseif (strpos($s, 'Extranet') || preg_match($j, 'Extranet')) {
          unset($result[$k][$j]);
        }
      }
    }
  }elseif($is_confidential){
    foreach ($result as $k => $v) {
      foreach ($v as $j => $s) {
        if (strpos($s, 'Public') || preg_match($j, 'Public')) {
          unset($result[$k][$j]);
        }
      }
    }
  }elseif($is_internal){
    foreach ($result as $k => $v) {
      foreach ($v as $j => $s) {
        if (strpos($s, 'Extranet') || preg_match($j, 'Extranet')) {
          unset($result[$k][$j]);
        }
      }
    }
  }

  $result['message'] = "test";

    return $result;
}

/**
 * This function check access spaces for logged user in breadcrumbs and disable
 * link for spaces aren't autorized
 * @param  $space_nid : Id of space or parent group
 * @return $access_state : state of access : locked or unlocked (css class )
 */
function gofast_access_spaces($space_nid){
    $user_logged_spaces = gofast_og_get_spaces_by_user();
    $access_state="locked";
    foreach($user_logged_spaces as $nid_space_user){
        if($nid_space_user == $space_nid ){
            $access_state="unlocked";
            break;
            }
        }
    return $access_state;
}

function gofast_get_node_infos($node, $async = false) {
  if($async){
    return theme('node_infos', array('nid' => $node->nid));
  }else{
    return gofast_get_node_infos_async($node->nid, $async);
  }
}

function gofast_get_node_infos_async($nid, $asyncr = true) {
  $node = node_load($nid);
  global $user;

  if(count(module_implements("extra_metadata")) >= 1){
    foreach (module_implements("extra_metadata") as $module) {
      $metadata = call_user_func($module . "_extra_metadata", $node);
      if(!empty($metadata)){
        $extra_metadata = TRUE;
      }else{
        $extra_metadata = FALSE;
      }
    }
  }
  if($extra_metadata){
    $output = '<ul class="nav nav-tabs gofast-extra-metadata-tab">';
    $output .= '<li role="presentation" class="active"><a href="#gofast-node-info-basic" aria-controls="gofast-node-info-basic" role="tab" data-toggle="tab">'. t('Metadata', array(), array('context' => 'gofast')) . '</a></li>';
    $output .= '<li role="presentation"><a href="#gofast-node-info-extra" aria-controls="gofast-node-info-extra" role="tab" data-toggle="tab">'. t('Extra metadata', array(), array('context' => 'gofast')). '</a></li>';
    $output .= '</ul>';
  }

  $output .= '<div class="tab-content" id="gofast-node-infos-tab-content">';

  $output .= '<div id="gofast-node-info-basic" role="tabpanel" class="tab-pane active">';

  $temps_o_debut = microtime(true);
  if ($node->type == 'alfresco_item' && $node->status != 0) {
    $infos = gofast_cmis_alfresco_get_infos($node);
  }
  else {
    $infos = false;
  }
  $temps_o_fin = microtime(true);
  watchdog('CMIS get infos LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));

  if ($node->type === 'alfresco_item') {
    $lock_state = isset($node->cmis_lock_owner) ? $node->cmis_lock_owner : gofast_cmis_webservice_execute_request("getlocked", gofast_cmis_node_get_item_id($node));
  }
  else {
    $lock_state = 'nolocked';
  }

  //$canEdit = node_access("update", $node) && $lock_state === "nolocked" && !gofast_get_content_state_archived($node);
  $canEdit = node_access("update", $node) && $lock_state === "nolocked";


  $temps_o_debut = microtime(true);
  // Initialization of variables to show in the page
  $wrapper = entity_metadata_wrapper("node", $node);
  $category = $wrapper->{'field_category'}->value();
  $info['node_category'] = $category ? i18n_taxonomy_localize_terms($category)->name : '';

 $tags = $wrapper->{'field_tags'}->value();
 if ($canEdit &&
      (!module_exists('gofast_retention') || ( module_exists('gofast_retention') && $info['retention_end_date'] == NULL )
      )
  ) {
    $tags_values = array_map(function($element) {
      if(isset($element->name)){ //We parse names and IDs of tags
        return htmlspecialchars($element->name)."[GOFAST_TAG_SEPARATOR]".$element->tid;
      }
      return NULL;
    }, $tags);
    $info['node_keywords'] = is_array($tags) ? implode(', ', $tags_values) : '';
 }
 else{
    $node_keywords_value = '<ul class="select2-tags">';
    $tags_values = array_map(function ($element) {
      if (isset($element->name)) { //We parse names and IDs of tags
        return '<li class="gofast-tags-noedit" data-name="' . $element->name . '" data-id="' . $element->tid . '">' . $element->name . '</li>';
      }
      return NULL;
    }, $tags);
    $node_keywords_value .= is_array($tags) ? implode('', $tags_values) : '';
    $node_keywords_value .= '</ul>';
    $info['node_keywords'] = $node_keywords_value;
 }

  if ($node->type !== 'forum') {
    $state = $wrapper->{'field_state'}->value();
    $info['node_state'] = $state ? i18n_taxonomy_localize_terms($state)->name : '';
  }

  $criticity = isset($wrapper->{'field_criticity'}) ? $wrapper->{'field_criticity'}->value() : FALSE;
  $info['node_criticity'] = $criticity ? i18n_taxonomy_localize_terms($criticity)->name : '';

  $deadline = $wrapper->{'field_date'}->value();
  $date_format = $user->language === 'fr' ? 'd/m/Y' :  'm/d/Y';
  $info['node_deadline'] = $deadline ? date($date_format, $deadline) : '';

  //retention date
  if( $node->type === "alfresco_item" && module_exists('gofast_retention') ){
    $date_format_retention = 'm/d/Y h:i';
    if($node->field_retention_end[LANGUAGE_NONE][0]['value'] !== NULL){
      $retention_end_date = new DateObject();
      $retention_end_date->setTimestamp($node->field_retention_end[LANGUAGE_NONE][0]['value']);

      $info['retention_end_date'] = $retention_end_date->format($date_format_retention);
    }
  }

  if ($node->type === "alfresco_item") {
    $ztree_options = array("widget_locations" => "true",
      "form" => array(
        'field_name' => GOFAST_CMIS_LOCATIONS_FIELD,
        'id' => $node->nid,
        'url' => '/update_node_field'
    ));
  }
  else {
    $ztree_options = array("widget_locations" => "true",
      "form" => array(
        'field_name' => GOFAST_OG_CONTENT_MEMBERSHIP_FIELD,
        'id' => $node->nid,
        'url' => '/update_node_field'
    ));
  }

  //DEBUG
  $temps_o_debut = microtime(true);
  $async = true;
   if ($node->type === "alfresco_item") {
        //$path_options = gofast_get_node_locations_async($node);
         $node_locations_paths = array();
         $map_id_locations = array();
         $selected_spaces = array();

          if (isset($node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE])) {
            $node_locations_paths = array_map(function($element) {
              return $element['value'];
            }, $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE]);
          }

          foreach ($node_locations_paths as $node_location_path) {
            $node_location_path = htmlspecialchars_decode($node_location_path);
            // For every location we retrieve the node id
            if (!isset($map_id_locations[$node_location_path])) {
              $item = gofast_cmis_item_get_by_path($node_location_path);
              if(isset($item->properties['gofast:nid'])){
                $item_nid = $item->properties['gofast:nid'];
                $map_id_locations[$node_location_path] = $item_nid;
              }
              else {
                $map_id_locations[$node_location_path] = $node_location_path;
              }
            }
          }

        $node_parents = gofast_og_get_parent($node);
        $selected_spaces = array_merge($selected_spaces, $node_parents);
        $selected_paths = array_flip($map_id_locations);
        $path_options = array("all_paths" => $selected_paths,
                              "selected_paths" => $selected_paths,
                              "check_disabled_paths" => array(),
                              "disabled_paths" => array());


        $all_paths = $path_options['all_paths'];
   }else{
         $node_locations_paths = array();
         $map_id_locations = array();
         $selected_spaces = array();

          $node_parents = gofast_og_get_parent($node);
          foreach ($node_parents as $node_location_path) {
            // For every location we retrieve the node id
           // $map_id_locations[gofast_get_node_title($node_location_path)] = $node_location_path;
           $map_id_locations[gofast_cmis_space_get_webdav_path($node_location_path)] = $node_location_path;
          }


        $selected_spaces = array_merge($selected_spaces, $node_parents);
        $selected_paths = array_flip($map_id_locations);
        $path_options = array("all_paths" =>  $selected_paths , //$map_id_locations,
                              "selected_paths" => $selected_paths,
                              "check_disabled_paths" => array(),
                              "disabled_paths" => array());


       $all_paths = $path_options['all_paths'];
      // $async = false;

   }
  $temps_o_fin = microtime(true);
  watchdog('CMIS pre widget render LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));
  $temps_o_debut = microtime(true);

  $location_widget = gofast_ztree_block_content($node->nid, $all_paths, $ztree_options, $path_options, $async);

  // We unset ztree variables so we can render the ztree without errors
  unset($location_widget['user_visible_paths']);
  unset($location_widget['pre_selected_paths']);
  unset($location_widget['disabled_paths']);
  unset($location_widget['obfuscated_paths']);

  $location_values = array();

  # GOFAST-5790 Fix error when we make a publication
  unset($path_options['selected_paths']['/Sites']);

  //DEBUG TC
  if(count($node->og_group_content_ref) > 0){
    foreach ($path_options['selected_paths'] as $key => $pre_selected_location) {
      $cleaned_path = gofast_ztree_get_drupal_path_from_webdav_path(array($pre_selected_location));
      if (intval($key) !== 0) {
        $location_values[] =  l(reset($cleaned_path), 'node/' . $key, array( 'attributes' => array("class" => "ajax-navigate ".gofast_access_spaces($key), "nid" => $key)));
      }
      else {
        $parts = explode('/', $pre_selected_location);
        $parent_group = null;
        while ($parent_group === null) {
          array_pop($parts);
          $parent_group = gofast_og_get_group_id_from_title_2(implode('/', $parts), TRUE);
        }
        if($parent_group == null){
          $location_values[] = l(reset($cleaned_path), "/gofast/browser", array('query' => array('path' => $pre_selected_location), 'attributes' => array("class" => "ajax-navigate", "nid" => $parent_group), 'fragment' => 'ogdocuments'));
        }else{
          $location_values[] = l(reset($cleaned_path), "/node/" . $parent_group, array('attributes' => array("class" => "ajax-navigate ".gofast_access_spaces($parent_group), "nid" => $parent_group), 'fragment' => 'ogdocuments'));
        }
      }
    }
    $info['node_locations'] = isset($location_values) && is_array($location_values) ? implode('<br />', $location_values) : '';

  }else{
      $info['node_locations'] = $path_options['selected_paths'][0];
  }
  //END DEBUG TC

  $temps_o_fin = microtime(true);
  watchdog('CMIS widget render LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));
  $temps_o_debut = microtime(true);

  // We retrieve the current node entity links
  $target_nodes = isset($wrapper->{'field_target_link'}) ? $wrapper->{'field_target_link'}->value() : array();
  $target_links = array_map(function($element) {
      if($element->status == "1"){
        return theme('node_title', array('node' => $element));
      }else{
        return;
      }
  }, $target_nodes);
  $info['node_target_links'] = !empty($target_nodes) ? implode('<br />', $target_links) : '';

  // We retrieve entities that refers this node
  // Exclude : templates nodes
  $excluded = FALSE;
  if ($node->type === 'alfresco_item') {
    foreach ($path_options['selected_paths'] as $selected_path) {
      if (strpos($selected_path, TEMPLATES_FOLDER_NAME) !== FALSE) {
        $excluded = TRUE;
        break;
      }
    }
  }

  $source_link_ids = array();
  if (!$excluded) {
    $results = db_select('field_data_field_target_link', 'f')
               ->fields("f");
    $results->join('node_revision', 'n', 'n.nid = f.entity_id');
    $results = $results->condition('f.field_target_link_target_id', $node->nid)
            ->condition('n.status', "1")
            ->execute()->fetchAll();
    foreach ($results as $row) {
      $source_link_ids[] = $row->entity_id;
    }
  }
  $source_links = array_map(function($element) {
    return theme('node_title', array('node' => $element));
  }, node_load_multiple($source_link_ids));
  $info['node_source_links'] = !empty($source_links) ? implode('<br /> ', $source_links) : t('None', array(), array('context' => 'gofast'));

  gofast_node_info_attachments($info, $wrapper);

  // We retrieve node external links
  $external_page_url = isset($wrapper->{'field_external_page_url'}) ? $wrapper->{'field_external_page_url'}->value() : array();
  $external_links = array_map(function($element) {
    $url = !isset(parse_url($element)["scheme"]) ? 'http://' . $element : $element;
    return l($element, $url);
  }, $external_page_url);
  $info['node_external_page_url'] = !empty($external_page_url) ? implode('<br />', $external_links) : '';

  $popularity = $wrapper->{'field_popularity'}->value();
  $info['node_popularity'] = isset($popularity) ? $popularity : 0;
  if(isset($popularity)){
        $info['node_popularity'] .= '  <a title="'.t("Display popularity history", array(), array("context" => "gofast")).'" class="ctools-use-modal" href="/gofast/nojs/radioactivity/graphic/'.$node->nid.'"><i class="fa fa-question-circle" style=" color: #777;"></i></a>  ';
  }
  $info['node_view_count'] = isset(nodeviewcountcount_count_node_views($node, NULL, TRUE)[0]) ? nodeviewcountcount_count_node_views($node, NULL, TRUE)[0]->expression : 0;

  $is_book = isset($node->book) && $node->book['bid'] !== 0;
  if ($is_book) {
    // Book is main page ?
    if ($node->nid === $node->book['bid']) {
      $info['node_book'] = t('This is the main page of a book', array(), array('context'=> 'gofast:gofast_book'));
    }else {
      $main_page_node = node_load($node->book['bid']);
      $uri = entity_uri('node', $main_page_node);
      $info['node_book'] = l($main_page_node->title, url($uri['path'], $uri['options']), array('attributes' => array(), 'html' => TRUE));
    }
      if (node_access('update', $node)) {
        $form_id = 'article_node_form';
        $_POST['is_popover'] = TRUE;
        $article_form = drupal_get_form($form_id,$node);
        $book_block_output = drupal_render($article_form);
        $options_book = array(
          'popup_variables' => array(
            'container_id' => 'popup_block_book_' . $node->nid,
            'container_class' => NULL,
            'title' => t('Edit book', array(), array('context' => 'gofast')),
            'link_text' => '</br>' . $info['node_book'],
            'link_class' => 'editable-click',
            'type' => 'a',
            'emptytext' => t('None', array(), array('context' => 'gofast')),
            'delegated' => 'true',
            'placement' => 'left',
            'context' => $node->type,
            'content' => htmlentities($book_block_output) ,
          )
        );

        $info['node_book'] = theme('popup_content', $options_book);
      }
  }else{
       if (node_access('update', $node)) {
        $form_id = 'article_node_form';
        $_POST['is_popover'] = TRUE;

        /*$article_form = drupal_get_form($form_id,$node);
        $book_block_output = drupal_render($article_form);
        $options_book = array(
          'popup_variables' => array(
            'container_id' => 'popup_block_book_' . $node->nid,
            'container_class' => NULL,
            'title' => t('Edit book', array(), array('context' => 'gofast')),
            'link_text' => '</br>' . t('None', array(), array('context' => 'gofast')),
            'link_class' => 'editable-click',
            'type' => 'a',
            'emptytext' => t('None', array(), array('context' => 'gofast')),
            'delegated' => 'true',
            'placement' => 'left',
            'context' => $node->type,
            'content' => htmlentities($book_block_output) ,
          )
        );

        $info['node_book'] = theme('popup_content', $options_book);*/
      }
  }

  if ($node->type !== "alfresco_item") {
    $info['document_author'] = user_load($node->uid)->name;
  }
  else {
    $info['document_author'] = $infos['document_author'];
    $info['document_reference'] = $infos['document_reference'];
    $conditions = array('source' => 'node/' . $node->nid);
    $path = path_load($conditions);
    if($path["alias"]){
        $info['alias'] = $path["alias"];
    }else{
        $info['alias'] = "";
    }
  }

  $publication = gofast_cmis_node_is_published($node);
  $publication_node = $publication !== FALSE ? node_load($publication) : NULL;
  $info['node_publication'] = isset($publication_node) && $publication_node !== FALSE ? l($publication_node->title, '/node/' . $publication_node->nid) : '';

  $publication_source = gofast_cmis_get_publication_source($node);
  $publication_source_node = $publication_source !== FALSE ? node_load($publication_source) : NULL;
  $info['node_publication_source'] = $publication_source_node !== NULL ? l($publication_source_node->title, '/node/' . $publication_source_node->nid) : '';

  if ($publication_source !== FALSE) {
    $output .= '<p class="text-danger bg-warning">' . t("This document is a publication", array(), array('context' => 'gofast')) . '</p>';
  }

  if(!$canEdit) {
    if($lock_state !== 'nolocked'){
       $output .= '<p class="text-danger bg-warning">' . t("The document is being edited, you can't change its metadatas", array(), array('context' => 'gofast')) . '</p>';
    }
    else {
       $output .= '<p class="text-danger bg-warning">' . t("You have read-only permission on this document", array(), array('context' => 'gofast')) . '</p>';
    }
   }
  else if (module_exists('gofast_retention') && isset($info['retention_end_date']) ) {
      $retention_node = true;
      if(node_access("delete", $node)){
           $retention_node_can_edit = true;
           $output .= '<p class="text-danger bg-warning">' . t("This document has a retention date, you can't change its content or its category", array(), array('context' => 'gofast:gofast_retention')) . '</p>';
      }else{
           $output .= '<p class="text-danger bg-warning">' . t("This document has a retention date, you can't change its content, its category or its state", array(), array('context' => 'gofast:gofast_retention')) . '</p>';
      }
  }elseif(node_access("delete", $node) && gofast_get_content_state_archived($node)){
        $output .= '<p class="text-danger bg-warning">' . t("This document is archived, you can't change its content", array(), array('context' => 'gofast:gofast_retention')) . '</p>';
  }

  $is_confidential = isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Confidential Data";
  if($is_confidential){
    $output .= '<p class="text-danger bg-warning">' . t("This document is confidential: you can't download and share it", array(), array('context' => 'gofast:gofast_cmis')) . '</p>';
  }

  $is_internal = isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Internal Distribution";
  if ($is_internal) {
    $output .= '<p class="text-danger bg-warning">' . t("Document for Internal Distribution: downloading and sharing in Extranet Spaces forbidden", array(), array('context' => 'gofast:gofast_cmis')) . '</p>';
  }

  $temps_o_fin = microtime(true);
  watchdog('CMIS other data processing LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));
  $temps_o_debut = microtime(true);

  // If the user has the rights, update shown fields to display x-editable
  if ($canEdit) {
    $loaded = libraries_load('x-editable');

    // Init variables for taxonomy fields
    $field_taxonomy = array(
      'pk' => $node->nid,
      'type' => 'select2',
      'showbuttons' => 'bottom',
      'select2' => array(
        'multiple' => true,
        'allowClear' => true,
      ),
      'placement' => 'left',
      'mode' => 'popup',
      'url' => '/update_node_field',
      'inputclass' => 'input-extra-large',
      'delegated' => 'true',
    );

    // Field category of the node
    //TODO prevent edit this field if node is in retention mode ( must be after change of criteria to fire retention mode )
    if($info['retention_end_date'] == NULL){
        $available_categories = gofast_xeditable_vocabulary_to_select_items(GOFAST_VID_CATEGORY, $node);
        $field_node_category = array(
          'name' => 'field_category',
          'value' => $info['node_category'],
          'title' => t('Node category', array(), array('context' => 'gofast')),
          'emptytext' => t('None', array(), array('context' => 'gofast')),
          'source' => $available_categories,
          'params' => ['vid' => GOFAST_VID_CATEGORY],
          'select2' => array(
            'placeholder' => t('Type any category', array(), array('context' => 'gofast')),
            'multiple' => false,
            'allowClear' => true,
          ),
        );
        $field_category = array_replace_recursive($field_taxonomy, $field_node_category);
        $info['node_category'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_category));
    }
    $info['node_keywords'] = !empty($tags_values) ? '<ul><li>' . implode('</li><li>', $tags_values) . '</li></ul>' : '';

    $field_node_keywords = array(
      'pk' => $node->nid,
      'type' => 'select2',
      'placement' => 'left',
      'showbuttons' => 'bottom',
      'mode' => 'popup',
      'url' => '/update_node_field',
      'inputclass' => 'input-extra-large',
      'name' => 'field_tags',
      'value' => implode(',', $tags_values),
      'data' => array('tags' => !empty($tags_values) ? $tags_values : null),
      'source' => '/gofast/tag_autocomplete',
      'title' => t('Node keywords', array(), array('context' => 'gofast')),
      'emptytext' => t('None', array(), array('context' => 'gofast')),
      'params' => ['vid' => GOFAST_VID_TAGS],
      'delegated' => 'true',
      'wrapper_class' => array(
        'node-info-keywords',
      )
    );
    $info['node_keywords'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_node_keywords));

    if ($node->type !== 'forum') {

      $states_options = gofast_xeditable_vocabulary_to_select_items(GOFAST_VID_STATE);
     /* array_walk($states_options, function(&$element) {
        if($element['id'] === t('Archived', array(), array('context' => 'gofast'))) {
          $element['disabled'] = TRUE;
        }
      });*/

      // Field state of the node
       //TODO prevent edit this field if node is in retention mode, except for admin and doc author( must be after change of criteria to fire retention mode )
     if($info['retention_end_date'] == NULL || ($info['retention_end_date'] !== NULL && node_access("delete", $node))){
      $field_node_state = array(
        'name' => 'field_state',
        'value' => $info['node_state'],
        'title' => t('Node state', array(), array('context' => 'gofast')),
        'emptytext' => t('None', array(), array('context' => 'gofast')),
        'source' => $states_options,
        'params' => ['vid' => GOFAST_VID_STATE],
        'select2' => array(
          'placeholder' => t('Type any state', array(), array('context' => 'gofast')),
          'multiple' => false,
          'allowClear' => true,
        ),
      );
      $field_state = array_replace_recursive($field_taxonomy, $field_node_state);
      $info['node_state'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_state));
     }
    }

    // Field state of the node
    if(!$is_confidential || node_access("delete", $node)){
        $field_node_criticity = array(
          'name' => 'field_criticity',
          'value' => $info['node_criticity'],
      'title' => t('Node criticity', array(), array('context' => 'gofast')),
      'emptytext' => t('None'),
      'source' => gofast_xeditable_sort_criticity(gofast_xeditable_vocabulary_to_select_items(GOFAST_VID_CRITICITY), $node),
      'params' => ['vid' => GOFAST_VID_CRITICITY],
      'select2' => array(
        'placeholder' => t('Type any criticity', array(), array('context' => 'gofast')),
        'multiple' => false,
        'allowClear' => true,
      ),
        );
        $field_criticity = array_replace_recursive($field_taxonomy, $field_node_criticity);
        $info['node_criticity'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_criticity));
    }

    // Field deadline of the node
    $field_node_deadline = array(
      'pk' => $node->nid,
      'name' => 'field_date',
      'showbuttons' => 'bottom',
      'value' => $info['node_deadline'],
      'format' => dateformat_PHP_to_bootstrapDatePicker($date_format),
      'type' => 'datetime',
      'title' => t('Node deadline', array(), array('context' => 'gofast')),
      'emptytext' => t('None', array(), array('context' => 'gofast')),
      'url' => '/update_node_field',
      'delegated' => 'true',
      'datetimepicker' => array(
        'minView' => 1,
        'todayHighlight' => true,
        'language' => $user->language,
        'bootcssVer' => 3,
      ),
      'mode' => 'popup',
      'placement' => 'left',
    );
     $info['node_deadline'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_node_deadline));

    $location_block_output = drupal_render($location_widget);
    $options = array(
      'node_locations_options' => array(
        'link_text' => $info['node_locations'],
        'href' => '/modal/nojs/node/' . $node->nid . '/manage-locations',
        'container_id' => 'popup_block_' . $node->nid,
        'container_class' => NULL,
      )
    );

    if($info['node_locations'] !== null){
        $info['node_locations'] = theme('node_locations', $options);
    }else{
         $info['node_locations'] = "<div>";
    }

    $field_target_links = array(
      'pk' => $node->nid,
      'type' => 'select2',
      'placement' => 'left',
      'showbuttons' => 'bottom',
      'mode' => 'popup',
      'url' => '/update_node_field',
      'inputclass' => 'input-extra-large',
      'name' => 'field_target_link',
      'value' => implode(', ', array_map(function($element) {
                        return $element->nid;
                      }, $target_nodes)),
      'data' => array('links' => !empty($target_links) ? $target_links : null),
      'source' => '/gofast/node_autocomplete',
      'title' => t('Links to other content', array(), array('context' => 'gofast')),
      'emptytext' => t('None', array(), array('context' => 'gofast')),
      'delegated' => 'true',
      'wrapper_class' => array(
        'node-info-target-links',
      )
    );
    $info['node_target_links'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_target_links));

    $field_node_external_page_url = array(
      'name' => 'field_external_page_url',
      'value' => implode(',', $external_page_url),
      'data' => array('links' => !empty($external_links) ? $external_links : null),
      'title' => t('Links webpages content', array(), array('context' => 'gofast')),
      'delegated' => 'true',
      'emptytext' => t('None', array(), array('context' => 'gofast')),
      'select2' => array(
        'tags' => array(),
        'multiple' => true,
        'placeholder' => t('Enter website url', array(), array('context' => 'gofast')),
      ),
    );
    $field_external_page_url = array_replace_recursive($field_taxonomy, $field_node_external_page_url);
    $info['node_external_page_url'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_external_page_url));

    //if ($node->type === "alfresco_item") {
      $loaded = libraries_load('x-editable');
      drupal_add_js(drupal_get_path('module', 'gofast') . '/js/gofast_xeditable.js', array('type' => 'file', 'weight' => 5));
      $field_document_author = array(
        'pk' => $node->nid,
        'placement' => 'left',
        'showbuttons' => 'bottom',
        'mode' => 'popup',
        'url' => '/update_node_field',
        'inputclass' => 'input-extra-large',
        'name' => GOFAST_CMIS_DOCUMENT_AUTHOR_FIELD,
        'value' => $info['document_author'],
        'title' => t('Enter document author', array(), array('context' => 'gofast')),
        'emptytext' => t('None', array(), array('context' => 'gofast')),
        'delegated' => 'true',
        'type' => 'typeaheadjs',
        'wrapper_class' => array(
          'node-info-document_author',
        )
      );
      $info['document_author'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_document_author));
    //}


      $loaded = libraries_load('x-editable');
      drupal_add_js(drupal_get_path('module', 'gofast') . '/js/gofast_xeditable.js', array('type' => 'file', 'weight' => 5));
      $field_alias = array(
        'pk' => $node->nid,
        'placement' => 'left',
        'showbuttons' => 'bottom',
        'mode' => 'popup',
        'url' => '/update_node_field',
        'inputclass' => 'input-extra-large',
        'name' => GOFAST_CMIS_ALIAS_FIELD,
        'value' => $info['alias'],
        'title' => t('Enter a URL alias', array(), array('context' => 'gofast')),
        'emptytext' => t('None', array(), array('context' => 'gofast')),
        'delegated' => 'true',
        'type' => 'typeaheadjs',
        'wrapper_class' => array(
          'node-info-alias',
        )
      );
      $info['alias'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_alias));

    if ($node->type === "alfresco_item") {
        $field_document_reference = array(
        'pk' => $node->nid,
        'placement' => 'left',
        'showbuttons' => 'bottom',
        'mode' => 'popup',
        'url' => '/update_node_field',
        'inputclass' => 'input-extra-large',
        'name' => 'field_document_reference',
        'value' => $info['document_reference'],
        'title' => t(variable_get("document_reference_label", "Document reference"), array(), array('context' => 'gofast')),
        'emptytext' => t('None', array(), array('context' => 'gofast')),
        'delegated' => 'true',
        'type' => 'typeaheadjs',
        'wrapper_class' => array(
          'node-info-document_reference',
        )
      );
      $info['document_reference'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_document_reference));
    }
  }else{
    if ($node->type === "alfresco_item" && module_exists('gofast_retention') && isset($info['retention_end_date'])
       && (node_access("update", $node) && $lock_state === "nolocked" && !gofast_get_content_state_archived($node))
    ) {

      $loaded = libraries_load('x-editable');
      drupal_add_js(drupal_get_path('module', 'gofast') . '/js/gofast_xeditable.js', array('type' => 'file', 'weight' => 5));

     // Init variables for taxonomy fields
      $field_taxonomy = array(
        'pk' => $node->nid,
        'type' => 'select2',
        'showbuttons' => 'bottom',
        'select2' => array(
          'multiple' => true,
          'allowClear' => true,
        ),
        'placement' => 'left',
        'mode' => 'popup',
        'url' => '/update_node_field',
        'inputclass' => 'input-extra-large',
        'delegated' => 'true',
      );


      // Field category of the node
      $available_categories = gofast_xeditable_vocabulary_to_select_items(GOFAST_VID_CATEGORY, $node);
      $field_node_category = array(
        'name' => 'field_category',
        'value' => $info['node_category'],
        'title' => t('Node category', array(), array('context' => 'gofast')),
        'emptytext' => t('None', array(), array('context' => 'gofast')),
        'source' => $available_categories,
        'params' => ['vid' => GOFAST_VID_CATEGORY],
        'select2' => array(
          'placeholder' => t('Type any category', array(), array('context' => 'gofast')),
          'multiple' => false,
          'allowClear' => true,
        ),
      );
      $field_category = array_replace_recursive($field_taxonomy, $field_node_category);
      $info['node_category'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_category));
    }
  }

  if ($canEdit_archived){

    $loaded = libraries_load('x-editable');
    drupal_add_js(drupal_get_path('module', 'gofast') . '/js/gofast_xeditable.js', array('type' => 'file', 'weight' => 5));

    // Init variables for taxonomy fields
    $field_taxonomy = array(
      'pk' => $node->nid,
      'type' => 'select2',
      'showbuttons' => 'bottom',
      'select2' => array(
        'multiple' => true,
        'allowClear' => true,
      ),
      'placement' => 'left',
      'mode' => 'popup',
      'url' => '/update_node_field',
      'inputclass' => 'input-extra-large',
      'delegated' => 'true',
    );


    if ($node->type !== 'forum') {


      $states_options = gofast_xeditable_vocabulary_to_select_items(GOFAST_VID_STATE);

      $field_node_state = array(
        'name' => 'field_state',
        'value' => $info['node_state'],
        'title' => t('Node state', array(), array('context' => 'gofast')),
        'emptytext' => t('None', array(), array('context' => 'gofast')),
        'source' => $states_options,
        'params' => ['vid' => GOFAST_VID_STATE],
        'select2' => array(
          'placeholder' => t('Type any state', array(), array('context' => 'gofast')),
          'multiple' => false,
          'allowClear' => true,
        ),
      );
      $field_state = array_replace_recursive($field_taxonomy, $field_node_state);
      $info['node_state'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_state));


    }

  }


  // These following fields cannot be edited
  $format = $wrapper->{'field_format'}->value();
  $format_value = theme('gofast_node_icon_format', array('node' => $node));
  $format_value .= $format ? i18n_taxonomy_localize_terms($format)->name : NULL;
  //add extension
  if ($node->type === "alfresco_item" && $format_value != NULL ) {
    $extension = pathinfo($node->field_filename[LANGUAGE_NONE][0]['value'], PATHINFO_EXTENSION);
    $format_value .= ' ('.$extension.')';
  }
  $output .= theme('gofast_node_info_field', array('title' => 'Format', 'values' => $format_value));
  //$type = $format_value;

  if ($node->type === "alfresco_item") {
    //$output .= theme('gofast_node_info_field', array('title' => 'Extension', 'values' => $infos["extension"]));
    $output .= theme('gofast_node_info_field', array('title' => 'Size', 'values' => $infos["size"]));
    //$type .= $infos["extension"] . ' ' . t('Size') . ' : ' . $infos["size"];
  }

  $votes = fivestar_get_votes('node', $node->nid, 'vote');
  $values = array(
    'user' => empty($votes['user']['value']) ? 0 : $votes['user']['value'],
    'average' => empty($votes['average']['value']) ? 0 : $votes['average']['value'],
    'count' => empty($votes['count']['value']) ? 0 : $votes['count']['value'],
  );

  $settings = array(
    'stars' => 5,
    'allow_clear' => TRUE,
    'allow_revote' => TRUE,
    'allow_ownvote' => TRUE,
    'description' => '',
    'widget' => array('name' => 'minimal', 'css' => 'sites/all/modules/fivestar/widgets/minimal/minimal.css'),
    'style' => 'average', //'smart'
    'text' => 'average', //'dual'
    'content_type' => 'node',
    'content_id' => $node->nid,
    'tag' => 'vote',
    'autosubmit' => TRUE,
    'title' => FALSE,
    'feedback_enable' => FALSE, //FALSE,
    'labels_enable' => FALSE, //FALSE,
    'labels' => array(),
    'microdata' => array(),
    'field_name' => 'field_fivestar',
    'langcode' => LANGUAGE_NONE,
    'entity_type' => 'node',
    'entity_id' => $node->nid,
  );
  $fivestar = drupal_get_form('fivestar_custom_widget', $values, $settings);

  $temps_o_fin = microtime(true);
  watchdog('CMIS xeditable processing LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));
  $temps_o_debut = microtime(true);

  //$output .= theme('gofast_node_info_field', array('title' => t('Type'), 'values' => $type));
  // Prints all the fields in the block (normal if not able to edit, x-editable otherwise).
  $output .= theme('gofast_node_info_field', array('title' => 'Category', 'values' => $info['node_category']));
  if ($node->type !== 'forum') {
    $output .= theme('gofast_node_info_field', array('title' => 'State', 'values' => $info['node_state']));
  }

  $output .= theme('gofast_node_info_field', array('title' => 'Rating', 'values' => drupal_render($fivestar)));

  $icon_members='  <a title="'.t("Show user access", array(), array('context' => 'gofast')).'" class="ctools-use-modal node-info-member-link btn btn-default" href="/gofast/nojs/node/' . $node->nid . '/locations-members"><i class="fa fa-users" style=" color: #777;"></i></a> ';
  $output .= theme('gofast_node_info_field', array('title' => 'Locations / Shares', 'values' => $info['node_locations'], 'multiline' => TRUE,'title_suffix_html' => $icon_members));
  if (!empty($info['node_publication'])) {
    $output .= theme('gofast_node_info_field', array('title' => 'Publication', 'values' => $info['node_publication'], 'multiline' => TRUE));
  }
  if (!empty($info['node_publication_source'])) {
    $output .= theme('gofast_node_info_field', array('title' => 'Publication Source', 'values' => $info['node_publication_source'], 'multiline' => TRUE));
  }
  $output .= theme('gofast_node_info_field', array('title' => 'Links to', 'values' => $info['node_target_links'], 'multiline' => TRUE));
  $output .= theme('gofast_node_info_field', array('title' => "Links from", 'values' => $info['node_source_links']));
  if(!empty($info['node_target_lien'])){
    $output .= theme('gofast_node_info_field', array('title' => 'Attachments', 'values' => $info['node_target_lien'], 'multiline' => TRUE));
  }
  $output .= theme('gofast_node_info_field', array('title' => '', 'values' => $info['node_source_lien'], 'multiline' => TRUE));
  $output .= theme('gofast_node_info_field', array('title' => 'External links', 'values' => $info['node_external_page_url'], 'multiline' => TRUE));
  $output .= theme('gofast_node_info_field', array('title' => 'Tags', 'values' => $info['node_keywords'], 'multiline' => TRUE));
  $output .= theme('gofast_node_info_field', array('title' => variable_get("document_reference_label", "Document reference"), 'values' => $info['document_reference']));
  $output .= theme('gofast_node_info_field', array('title' => 'Deadline', 'values' => $info['node_deadline'], 'medium'));
  if($node->type == "article"){
    $output .= theme('gofast_node_info_field', array('title' => 'Book', 'values' => $info['node_book']));
  }


  if( $node->type === "alfresco_item" && module_exists('gofast_retention')  && isset($info['retention_end_date'])){
    $output .= theme('gofast_node_info_field', array('title' => 'Retention end date', 'values' => format_date(strtotime($info['retention_end_date']), 'medium')));
  }

  $output .= theme('gofast_node_info_field', array('title' => 'Criticity', 'values' => $info['node_criticity']));
  $output .= theme('gofast_node_info_field', array('title' => 'Popularity/View count', 'values' => $info["node_popularity"] . ' / ' . $info["node_view_count"]));
  $output .= theme('gofast_node_info_field', array('title' => 'Author', 'values' => $info['document_author']));
  $output .= theme('gofast_node_info_field', array('title' => 'Alias URL', 'values' => $info['alias']));

  $temps_o_fin = microtime(true);
  watchdog('CMIS theming processing LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));
  $temps_o_debut = microtime(true);

  $node_language = $wrapper->language->value();
  $translatable_languages = i18n_node_language_list($node);
  $translated_languages = translation_node_get_translations($node->tnid);
  $language_icon = gofast_get_flag_icon_by_langcode($node_language) . '&nbsp;' . $translatable_languages[$node_language];
  $available_languages = array_map(function($lang_key) use ($translatable_languages, $translated_languages) {
    $item = array('id' => $lang_key, 'text' => $translatable_languages[$lang_key], 'icon' => gofast_get_flag_icon_by_langcode($lang_key));
    if (isset($translated_languages[$lang_key])) {
      $item['disabled'] = TRUE;
    }
    return $item;
  }, array_keys($translatable_languages));
  $info['node_language'] = !empty($node_language) ? $language_icon : null;

  if ($canEdit) {
    libraries_load("flag-icon-css");
    $field_node_language = array(
      'pk' => $node->nid,
      'type' => 'select2',
      'showbuttons' => 'bottom',
      'name' => 'language',
      'value' => $node_language,
      'data' => array('links' => !empty($node_language) ? $language_icon : null),
      'title' => t('Node language', array(), array('context' => 'gofast')),
      'source' => $available_languages,
      'placement' => 'left',
      'mode' => 'popup',
      'url' => '/update_node_field',
      'inputclass' => 'input-extra-large',
      'delegated' => 'true',
      'emptytext' => 'Select language',
      'wrapper_class' => array(
        'select2-node-language',
      )
    );
    $info['node_language'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_node_language));
  }

  $node_translations = translation_node_get_translations($node->tnid);

  $available_translations = array();
  if (!empty($node_translations)) {
    unset($node_translations[$wrapper->language->value()]);
    foreach ($node_translations as $lang_key => $node_translation) {
      $lang_link = '/node/' . $node_translation->nid;
      $title = $translatable_languages[$lang_key] . ' - ' . $node_translation->title;
      $icon = gofast_get_flag_icon_by_langcode($lang_key);
      $link = '<a class="node-lang-icon" type="button" href="' . $lang_link . '" title="' . $title . '">' . $icon . '</a>';
      $available_translations[$lang_key] = $link;
    }
  }

  $temps_o_fin = microtime(true);
  watchdog('CMIS translation processing LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));
  $temps_o_debut = microtime(true);

  // Then, display all the information about the history of the node

  $history_content = gofast_node_info_get_history($node, $infos);

  $output .= theme('gofast_node_info_field', array('title' => 'History', 'values' => $history_content));

  $temps_o_fin = microtime(true);
  watchdog('CMIS history processing LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));
  $temps_o_debut = microtime(true);

  $revisions_content = '';

  if ($node->type === 'alfresco_item') {
    gofast_cmis_set_context("node", "version", $infos["last_version"]);

  //get the field_publication_history content, to get the mapping between versions doc and versions publication
  $publication_history = $node->field_publication_history[LANGUAGE_NONE][0]["value"];
  $publication_history = json_decode($publication_history, true);

  if(isset($node->field_publication[LANGUAGE_NONE][0]['target_id'])){
      $publication_node = node_load($node->field_publication[LANGUAGE_NONE][0]['target_id']);
       if(isset($publication_history[$infos["last_version"]])){
        $attribute_title_publication = t("Publication")." : ".format_date($publication_history[$infos["last_version"]]["date"], 'medium') . t(" by ");
        $attribute_title_publication .= $publication_history[$infos["last_version"]]["creator"];

        if(isset($publication_history[$infos["last_version"]]["comment"])){
          $attribute_title_publication .= " " . t("Comment") . ": " . $publication_history[$infos["last_version"]]["comment"];
        }
       $version_reference_publication = $publication_node->reference . ";" . $publication_history[$infos["last_version"]]["published_version"];
       $link_published_version = l($publication_history[$infos["last_version"]]["published_version"], "/cmis/browser", array('attributes' => array('title' => $attribute_title_publication, 'style' => $style), 'query' => array("id" => $version_reference_publication)));
       $return_str = " (".$link_published_version.")";
    }
  }else{
      $return_str = "";
  }

     $html_list = "<ul class='list-inline' id='block-last-version'><li>".$infos["last_version"].$return_str."</li></ul>";
    $revisions_content .= "<span id='gofast_cmis_container_versions'><input id='gofast_cmis_container_versions_button' type='button' value='".t("Show versions list", array(),  array('context' => 'gofast'))."' onClick='Drupal.gofast_cmis.async_show_all_versions(".$node->nid.");' />$html_list</span>";
  }
  else {
      $revisions_content = "";
  }
  $output .= theme('gofast_node_info_field', array('title' => 'Revisions', 'values' => $revisions_content));

  $translations_zone = '<span class="translations">' . implode(' ', $available_translations) . '</span>';
  $output .= theme('gofast_node_info_field', array('title' => 'Language', 'values' => $info['node_language'] . $translations_zone));
  //$output .= theme('gofast_node_info_field', array('title' => t('Translations'), 'values' => implode(' ', $available_translations)));

  $temps_o_fin = microtime(true);
  watchdog('CMIS revisions processing LOADING TIME', round($temps_o_fin - $temps_o_debut, 4));
  $temps_o_debut = microtime(true);

  $output .= '</div>';

  if(count(module_implements("extra_metadata")) >= 1){
    $output .= '<div id="gofast-node-info-extra" role="tabpanel" class="tab-pane">';
    foreach(module_implements("extra_metadata") as $module){
        $metadata = call_user_func($module . "_extra_metadata", $node );
        $output .= $metadata;
    }
    $output .= '</div>';
  }

  $output .= '</div>';

  //if the node is unpublished we can't read infos of the node.
  if ($node->status == 0 ){
      switch ($node->type) {
          case 'forum':
              $output = '<p class="text-danger bg-warning">' . t("The forum was deleted, you can't read infos", array(), array('context' => 'gofast')) . '</p>';
              break;
          case 'article':
              $output = '<p class="text-danger bg-warning">' . t("The article was deleted, you can't read infos", array(), array('context' => 'gofast')) . '</p>';
              break;
          case 'webform':
              $output = '<p class="text-danger bg-warning">' . t("The webform was deleted, you can't read infos", array(), array('context' => 'gofast')) . '</p>';
              break;
          default:
              $output = '<p class="text-danger bg-warning">' . t("The document was deleted, you can't read infos", array(), array('context' => 'gofast')) . '</p>';
              break;
      }
  }


  if($asyncr){
    $commands = array();
    $commands[] = ajax_command_html("#block-gofast-gofast-node-infos", $output);

    print ajax_render($commands);
    exit;
  }else{
    return $output;
  }
}

function gofast_node_info_get_history($node, $infos) {

  //if the node is not an alfresco_item, the history is not the same ( don't execute cmis requests)
  if($node->type != "alfresco_item"){
      $history_content = '<br /><ul id="node-history" class="list-unstyled">';
        $created = $node->created;
        $changed = $node->changed;
        $display_update_date = false;
        if($created !== $changed && $node->last_comment_timestamp !== $changed){
            $display_update_date = true;
        }

        $node_created_date = $created;

        $user_creator = $node->uid;
        $creator = user_load($user_creator);
        $creator_img = theme('user_picture', array('account' => $creator, 'dimensions' => 20));
        $history_content .= '<li>' . $creator_img . ' ' . format_date($node_created_date, 'medium') . " (" . t('Creation', array(), array('context' => 'gofast')) . ")</li>";

        if ($display_update_date) {
          $user_modifier = $node->revision_uid;
          $node_modification_date = $changed;

          $modifier = user_load($user_modifier);
          $modifier_img = theme('user_picture', array('account' => $modifier, 'dimensions' => 20));
          $history_content .= '<li>' . $modifier_img . " " . format_date($node_modification_date, 'medium') . " (" . t('Last version', array(), array('context' => 'gofast')) . ")</li>";
        }

        $db_comments = db_query("select uid,cid,field_comment_is_private_value,changed from comment INNER JOIN field_data_field_comment_is_private ON cid=entity_id where nid=".$node->nid." AND field_comment_is_private_value=0 ORDER BY changed DESC;")->fetchAll();
        if(count($db_comments) > 0){
            $commenter = user_load($db_comments[0]->uid);
            $commenter_img = theme('user_picture', array('account' => $commenter, 'dimensions' => 20));
            $history_content .= '<li>' . $commenter_img . " " . format_date($db_comments[0]->changed, 'medium') . " (" . t('Last comment', array(), array('context' => 'gofast')) . ")</li>";
        }


        $history_content .= '</ul>';

        return $history_content;
  }

  $versions_item = gofast_cmis_webservice_item_get_versions($node->field_reference[LANGUAGE_NONE][0]['value'], false);
  $last_version_item = reset(gofast_cmis_webservice_item_get_versions($node->field_reference[LANGUAGE_NONE][0]['value'], false));
  $first_version_item = end(gofast_cmis_webservice_item_get_versions($node->field_reference[LANGUAGE_NONE][0]['value'], false));

  $created = strtotime($first_version_item->createdDate);
  $changed = strtotime($last_version_item->createdDate);

  $history_content = '<br /><ul id="node-history" class="list-unstyled">';
  if ($infos !== false) {
    //on verifie si la version actuelle vaut 1.0 Si oui, on n'affiche que la date de création, pas de modification
    $last_version = $infos["last_version"];
     $display_update_date = $created !== $changed;
  }
  else {
    $node_revisions = node_revision_list($node);
    $display_update_date = $created !== $changed;
  }
  $node_created_date = $created;

  $user_creator = $first_version_item->creator;
  $creator = user_load_by_name(array('name' => check_plain(gofast_alter_username_before_load($user_creator))));
  $creator_img = theme('user_picture', array('account' => $creator, 'dimensions' => 20));
  $history_content .= '<li>' . $creator_img . ' ' . format_date($node_created_date, 'medium') . " (" . t('Creation', array(), array('context' => 'gofast')) . ")</li>";

  if ($display_update_date) {
      $user_modifier = $last_version_item->creator;
      $node_modification_date = $changed;

    $modifier = user_load_by_name(array('name' => check_plain(gofast_alter_username_before_load($user_modifier))));
    $modifier_img = theme('user_picture', array('account' => $modifier, 'dimensions' => 20));
    $history_content .= '<li>' . $modifier_img . " " . format_date($node_modification_date, 'medium') . " (" . t('Last version', array(), array('context' => 'gofast')) . ")</li>";
  }

  $db_comments = db_query("select uid,cid,field_comment_is_private_value,changed from comment INNER JOIN field_data_field_comment_is_private ON cid=entity_id where nid=".$node->nid." AND field_comment_is_private_value=0 ORDER BY changed DESC;")->fetchAll();
   if(count($db_comments) > 0){
       $commenter = user_load($db_comments[0]->uid);
       $commenter_img = theme('user_picture', array('account' => $commenter, 'dimensions' => 20));
       $history_content .= '<li>' . $commenter_img . " " . format_date($db_comments[0]->changed, 'medium') . " (" . t('Last comment', array(), array('context' => 'gofast')) . ")</li>";
   }
  $history_content .= '</ul>';

  return $history_content;
}

/**
 * Returns $info['node_target_lien'] & $info['node_source_lien'] that represents
 * attached links and reverse attached links
 */
function gofast_node_info_links(&$info, $wrapper) {
  $node = $wrapper->value();
  // We retrieve the current node entity links
  $target_attachment_nodes = isset($wrapper->{'field_lien'}) ? $wrapper->{'field_lien'}->value() : array();
  $target_links = array_map(function($element) {
    return isset($element) ? theme('node_title', array('node' => $element)) : '';
  }, $target_attachment_nodes);
  $info['node_target_lien'] = !empty($target_attachment_nodes) ? implode('<br />', $target_links) : '';

  // We retrieve entities that refers this node
  // Exclude : templates nodes
  $excluded = FALSE;
  $source_link_ids = array();
  if (!$excluded) {
    $results = db_select('field_data_field_lien', 'f')
            ->fields('f')
            ->condition('field_lien_target_id', $node->nid)
            ->execute();
    foreach ($results as $row) {
      $source_link_ids[] = $row->entity_id;
    }
  }
  $source_links = array_map(function($element) {
    return theme('node_title', array('node' => $element));
  }, node_load_multiple($source_link_ids));
  $info['node_source_lien'] = !empty($source_links) ? implode('<br /> ', $source_links) : '';
}

/**
 * Returns $info['node_target_lien'] & $info['node_source_lien'] that represents
 * attached links and reverse attached links
 */
function gofast_node_info_attachments(&$info, $wrapper) {
  $node = $wrapper->value();
  // We retrieve the current node entity links
  $target_attachment_nodes = isset($wrapper->{'field_lien'}) ? array_filter($wrapper->{'field_lien'}->value()) : array();
  $target_links = array_map(function($element) {
    return isset($element) ? theme('node_title', array('node' => $element)) : NULL;
  }, $target_attachment_nodes);
  $info['node_target_lien'] = !empty($target_attachment_nodes) ? implode('<br />', $target_links) : '';

  // We retrieve entities that refers this node
  // Exclude : templates nodes
  $excluded = FALSE;
  $source_link_ids = array();
  if (!$excluded) {
    $results = db_select('field_data_field_lien', 'f')
            ->fields('f')
            ->condition('field_lien_target_id', $node->nid)
            ->execute();
    foreach ($results as $row) {
      $source_link_ids[] = $row->entity_id;
    }
  }
  $source_links = array_map(function($element) {
    return theme('node_title', array('node' => $element));
  }, node_load_multiple($source_link_ids));
  $info['node_source_lien'] = !empty($source_links) ? implode('<br /> ', $source_links) : '';
}

function gofast_user_can_unlock_document($node, $lock_owner, $user = NULL) {
  if ($user === NULL) {
    global $user;
  }

  if ($user->uid === 1) {
    return true;
  }
  if ($user->uid === $lock_owner->uid) {
    return true;
  }
    $user_managed_spaces = gofast_og_get_managed_spaces($user);
    $node_parents = gofast_og_get_parent($node);
    if (count(array_intersect($user_managed_spaces, $node_parents)) > 0) {
      return true;
    }
  return false;
}

/**
 * This function returns a span element with the selected country icon and automatically loads the library of icons if needed.
 * It also returns the closest flag for ambiguous langcode (eg. en=>gb).
 * @param string $langcode the langcode icon to get (cf http://www.iso.org/iso/country_names_and_code_elements)
 * @return string the span with the icon.
 */
function gofast_get_flag_icon_by_langcode($langcode) {
  libraries_load("flag-icon-css");
  switch ($langcode) {
    case 'en' :
      $lang = 'us';
      break;
    default:
      $lang = $langcode;
      break;
  }
  return '<span class="flag-icon flag-icon-' . $lang . '"></span>';
}

/**
 * Hook node view
 * Here we re-generate breadcrumbs.
 * @param type $node
 * @param type $view_mode
 * @param type $langcode
 */
function gofast_node_view($node, $view_mode, $langcode) {
  //drupal_add_library('system', 'ui.draggable');

  global $user;

  if ($view_mode === 'full') {
    drupal_add_js(drupal_get_path('module', 'gofast_cmis') . "/js/gofast_cmis_document_preview.js");
    drupal_add_js(drupal_get_path('module', 'gofast_cmis') . "/js/gofast_cmis_annotator.js");
  }

  if ($view_mode === "full") {
    //We add some node information in Drupal.settings js object that we would need some time
    $js_node = ["id" => $node->nid, "type" => $node->type, "title" => urlencode($node->title)];
    drupal_add_js(["gofast" => ["node" => $js_node]], 'setting');

    if(gofast_get_content_state_archived($node)){
      drupal_set_message(t("This document is archived and cannot be edited."), 'info', FALSE);
    }
  }
}

/**
 * This function allows to override the default breadcrumbs
 * @param type $node
 * @return type
 */
function gofast_get_breadcrumb_ajax($node) {
  $bc = gofast_node_get_crumb_path($node);
  if (!empty($bc)) {
    drupal_set_breadcrumb($bc);
    return theme('breadcrumb', array('breadcrumb' => $bc));
  }
}


/**
 * This function generates the crumbs for a given node.
 * If the node is document (alfresco_item), generate the crumbs from locations.
 * Otherwise, generates the crumbs from og_membership
 * @param node $node the given node
 * @return array a list of crumbs generated for each line.
 */
function gofast_node_get_crumb_path($node)
{
  $node = node_load($node->nid, NULL, TRUE);
  $crumbs = array();
  if ($node->type === "alfresco_item") {
    $document_main_location = array($node->{GOFAST_CMIS_MAIN_LOCATION_FIELD}[LANGUAGE_NONE][0]['value']);
    $document_locations = isset($node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE]) ? array_map(function ($element) {
      return ($element['value']);
    }, $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE]) : array();
    $document_paths = array_unique(array_merge($document_main_location, $document_locations));
    asort($document_paths);

    if (!empty($document_paths)) {
      $locations_crumbs = gofast_node_emplacements_get_crumbs($document_paths, $node);
      $crumbs = $locations_crumbs;
    }
  } elseif ($node->type === 'article' || $node->type === 'webform' || $node->type === 'forum') {

    $document_locations = $node->{og_group_content_ref}[LANGUAGE_NONE];
    foreach ($document_locations as $locations) {
      $document_paths[] = gofast_cmis_space_get_webdav_path($locations['target_id']);
    }

    $document_paths = array_unique($document_paths);
    asort($document_paths);
    if (!empty($document_paths)) {
      $locations_crumbs = gofast_node_emplacements_get_crumbs($document_paths, $node);
      $crumbs = $locations_crumbs;
    }
  } else {
    $crumbs = gofast_node_get_crumbs($node, FALSE);
  }

  return $crumbs;
}

/**
 * This function generates crumbs for node
 * @param node $node the given node
 * @param boolean $root_space_link specify whether we have to make last crumb as a link
 * (usefull for recursion call form crumb generation of locations)
 * @return array the list of crumbs
 */
function gofast_node_get_crumbs($node, $root_space_link = FALSE, $toOgdocument = FALSE)
{
  global $base_url;
  global $mobile_url;
  $crumbs = array();
  $node_parents = gofast_og_get_parent($node);

  if (empty($node_parents) || $node_parents === FALSE) {
    $crumb = array();

    $title = $node->type === "private_space" ? $node->name : t($node->title, array(), array('context' => 'gofast'));
    if ($root_space_link) {
      $gid = $node->nid;
      $attr = array('attributes' => array("class" => "ajax-navigate " . gofast_access_spaces($gid) . "", "nid" => $gid));
      if ($base_url == $mobile_url) {
        $url_path_value = "home_page_navigation";
        $fragment = "navBrowser";
      } else {
        $url_path_value = "node/" . $gid;
      }
      $crumb[] = l($title, $url_path_value, $attr);
    } else {
      $crumb[] = $title;
    }

    $crumb[] = l(t('Home'), "");
    $crumbs[] = array_reverse($crumb);
  } else {

    $document_name = $node->title;

    if ($node->type === 'alfresco_item') {
      $node_reference = gofast_cmis_node_get_item_id($node);
      $lock_state = gofast_cmis_webservice_execute_request("getlocked", $node_reference);
    } else {
      $lock_state = 'nolocked';
    }

    if (((gofast_og_is_space($node) && og_user_access('node', $node->nid, 'administer group'))
        || (!gofast_og_is_space($node) && node_access('update', $node)))
      && $lock_state === 'nolocked'
    ) {
      $loaded = libraries_load('x-editable');
      drupal_add_js(drupal_get_path('module', 'gofast') . '/js/gofast_xeditable.js', array('type' => 'file', 'weight' => 5));
      // Field title of the node
      if ($node->type == 'conference') { // [GOFAST-6529] & [GOFAST-6255]
        $field_node_title = array(
          'pk' => $node->nid,
          'name' => 'title',
          'value' => $node->title,
          'title' => t('Page title', array(), array('context' => 'gofast')),
          'url' => '/update_node_field',
          'mode' => 'popup',
          'link_value' => '<a href="/node/' . $node->nid . '">' . $node->title . '</a>'
        );
      } else {
        $field_node_title = array(
          'pk' => $node->nid,
          'name' => 'title',
          'value' => $node->title,
          'title' => t('Page title', array(), array('context' => 'gofast')),
          'url' => '/update_node_field',
          'mode' => 'popup',
        );
      }
      $document_name = theme('x-editable_field', gofast_xeditable_enrich_values($field_node_title));
    }
    $node_parents = !is_array($node_parents) ? array($node_parents) : $node_parents;

    if ($base_url == $mobile_url) {
      $url_path_value = "home_page_navigation";
      $fragment = "navBrowser";
    } else {
      $url_path_value = "node/" . $node->nid;
      $fragment = "ogdocuments";
    }

    // Looping over each parent
    foreach ($node_parents as $space_nid) {
      $crumb = array();
      // If the node is not a space, it does not have a dn so we go out
      if (!gofast_og_is_space(node_load($space_nid))) {
        return;
      }

      if ($root_space_link) {
        $path = gofast_cmis_space_get_webdav_path($node->nid);
        if (strpos($path, 'alfresco/webdav') === FALSE) {
          $pathm = '/alfresco/webdav' . $path;
        } else {
          $pathm = $path;
        }

        $crumb[] = urldecode(l($node->title,"/".$url_path_value . "?&path=" . str_replace('&', '%26', str_replace('/alfresco/webdav', "", $pathm)),
          array(
            'fragment' => $fragment,
            'attributes' => array(
              "class" => "ajax-navigate " . gofast_access_spaces($node->nid) . "",
              "nid" => $node->nid,
            )
          )
        ));
      } else {
        $crumb[] = '<b>' . $document_name . '</b>';
      }
      while (!empty($space_nid)) {
        $gid = $space_nid;
        $title = gofast_get_node_title($gid);
        $path = "/alfresco/webdav" . gofast_cmis_space_get_webdav_path($gid);
        if (strpos($path, 'alfresco/webdav') === FALSE) {
          $pathm = '/alfresco/webdav' . $path;
        } else {
          $pathm = $path;
        }

        $crumb[] = urldecode(l(
          $title,
          "/" . $url_path_value . "?&path=" . str_replace('&', '%26', str_replace('/alfresco/webdav', "", $pathm)),
          array(
            'fragment' => $fragment,
            'attributes' => array(
              "class" => "ajax-navigate " . gofast_access_spaces($gid) . "",
              "nid" => $gid,
            )
          )
        ));
        $space_nid = gofast_og_get_parent(node_load($space_nid));
      }
      $crumb[] = l(t('Home'), "");
    }
    $crumbs[] = array_reverse($crumb);
  }
  return $crumbs;
}

/**
 * This function generates crumbs for node locations
 * @param type $locations the node locations
 * @return array the list of crumbs
 */
function gofast_node_emplacements_get_crumbs($locations, $node) {
  global $base_url;
  global $mobile_url;


  $location_values = array();
  $i = 0;
  $document_name = $node->title;

  if ($node->type === 'alfresco_item') {
    $node_reference = gofast_cmis_node_get_item_id($node);
    $lock_state = gofast_cmis_webservice_execute_request("getlocked", $node_reference);
  }
  else {
    $lock_state = 'nolocked';
  }

  if ( ( ( gofast_og_is_space($node) && og_user_access('node', $node->nid, 'administer group'))
      || (! gofast_og_is_space($node) && node_access('update', $node) ) )
      && $lock_state === 'nolocked') {
    $loaded = libraries_load('x-editable');
    drupal_add_js(drupal_get_path('module', 'gofast') . '/js/gofast_xeditable.js', array('type' => 'file', 'weight' => 5));
    // Field title of the node
    $field_node_title = array(
      'pk' => $node->nid,
      'name' => 'title',
      'value' => pathinfo($node->title)['filename'],
      'title' => t('Page title', array(), array('context' => 'gofast')),
      'url' => '/update_node_field',
      'mode' => 'popup',
    );
    $document_name = theme('x-editable_field', gofast_xeditable_enrich_values($field_node_title));
  }

  foreach ($locations as $pre_selected_location) {
    $cleaned_path = substr(gofast_ztree_get_drupal_path_from_webdav_path(array($pre_selected_location))[0], 1);
    $parts = explode('/', $pre_selected_location);
    $parent_group = gofast_og_get_group_id_from_title($pre_selected_location, TRUE);
    $folders = array();
    $folder_path = $pre_selected_location."/";
    if ($parent_group !== FALSE) {
      $node_crumb_path = gofast_node_get_crumbs(node_load($parent_group), TRUE, TRUE);
      $location_values[$i] = $node_crumb_path[0];
      $location_values[$i][] = '<b>' . $document_name . '</b>';
    }
    else {
      $pos = 0;
      foreach (array_reverse($parts) as $part) {
         if($part == ""){
             continue;
         }

        //Truncate path of the last occurence of "part" (i.e. folder name)
        $path = substr($folder_path, 0, strrpos($folder_path, "/".$part."/")+1);
        $folders[$pos]['name'] = $part;
        $folders[$pos]['path'] = $folder_path;
        $folder_path = $path;

        $parent_group = gofast_og_get_group_id_from_title($path, TRUE);
        $pos++;
        if ($parent_group !== FALSE) {
          break;
        }
      }
      if($parent_group !== FALSE){
          $group = node_load($parent_group);
          $parent_crumb = gofast_node_get_crumbs($group, TRUE, TRUE);
          $location_values[$i] = $parent_crumb[0];
      }

      if ($base_url == $mobile_url) {
        $url_path_value = "home_page_navigation";
        $fragment = "navBrowser";
      } else {
        $url_path_value = "node/" . $parent_group;
        $fragment = "ogdocuments";
      }

      foreach (array_reverse($folders) as $folder) {
        $location_values[$i][] = urldecode(l($folder['name'], "/". $url_path_value."?&path=" . rawurlencode($folder['path']), array(
                                  'fragment' => $fragment,
                                  'attributes' => array(
                                      "class" => "ajax-navigate ".gofast_access_spaces($parent_group)."",
                                      "nid" => $parent_group,
                                )
                              )
                            ));
      }
      $location_values[$i][] = '<b>' . $document_name . '</b>';
    }
    $i++;
  }
  return $location_values;
}


function gofast_get_node_space_breadcrumb_async($nid,$uid=NULL,$userlist=FALSE,$ulid=NULL,$final_role=TRUE){
   print gofast_get_space_breadcrumb_ajax(node_load($nid),$uid,$userlist,$ulid,$final_role);
}


/**
 * This function allows to override the default space breadcrumbs
 * @param type $node
 * @return type
 */
function gofast_get_space_breadcrumb_ajax($node,$uid=NULL,$userlist=FALSE,$ulid=NULL,$final_role=TRUE) {
  $bc = gofast_node_space_get_crumbs($node);
  if (!empty($bc)) {
    drupal_set_breadcrumb($bc);
    if(empty($bc)) {
        return;
    }
    $output = '';
    if (isset($bc[0]) && !is_array($bc[0])) {
        array_shift($bc);
    $items = array();
    foreach ($bc as $item) {
      if (!is_array($item)) {
        $items[] = $item;
      }
      else {
        $items[] = $item['data'];
      }
    }
    return '<div class="bc gofast bc-gofast">' . implode(' » ', $items) . '</div>';
    }
    else {
    $output = '<div class="bc gofast bc-gofast">';


    $full_bc = $bc;
    $reverse_bc = array_reverse($bc);
    $array_clone = $reverse_bc;
    $first_element_bc = array_shift($array_clone);
    if(isset($first_element_bc['data'])) {
      array_shift($reverse_bc);
      $full_bc = array_reverse($reverse_bc);
    }

    foreach ($full_bc as $key => $crumbs) {
      if(isset($crumbs['data'])) {
        continue;
      }
      array_shift($crumbs);
      $line = implode(' » ', $crumbs);
        $class = "gofast_bc_display";
        $output .= "<div id='" . $key . "' class='" . $class . "' style='margin:2px;' >" . $line;
        if($final_role == TRUE){
          if($userlist == TRUE){
              if(!empty(gofast_userlist_og_get_userlist_roles('node',$node->nid,$ulid))){
                  $output .= ' (' . t(array_shift(gofast_userlist_og_get_userlist_roles('node',$node->nid,$ulid,FALSE,TRUE)),array(),array('context' => 'gofast:gofast_userlist')) . ')';
              }
              $output .= "</div>";
          }else{
              if(!empty(gofast_og_get_user_final_roles_for_space('node',$node->nid,$uid))){
                  $output .= ' (' . t(array_shift(gofast_og_get_user_final_roles_for_space('node',$node->nid,$uid)),array(),array('context' => 'gofast:gofast_userlist')) . ')';
              }
              $output .= "</div>";
          }
        }
    }
    $output .= "</div>";

    }

    return $output;
  }
}
/**
 * Get crumbs for space node
 * @param type $node
 */
function gofast_node_space_get_crumbs($node){
  $crumbs = array();
  $node_parents = gofast_og_get_parent($node);

      if (empty($node_parents) || $node_parents === FALSE) {
        $crumb = array();

        $title = $node->type === "private_space" ? $node->name : t($node->title, array(), array('context' => 'gofast'));
            $gid = $node->nid;
            $attr = array('attributes' => array("class" => "ajax-navigate", "nid" => $gid));
            $url_path = "node/" . $gid;
            $crumb[] = l($title, $url_path, $attr);

        $crumb[] = l(t('Home'), "");
        $crumbs[] = array_reverse($crumb);
      }
      else {

        $document_name = $node->title;

        if ($node->type === 'alfresco_item') {
          $node_reference = gofast_cmis_node_get_item_id($node);
          $lock_state = gofast_cmis_webservice_execute_request("getlocked", $node_reference);
        }
        else {
          $lock_state = 'nolocked';
        }

            $path = gofast_cmis_space_get_webdav_path($node->nid);
            if(strpos($path, 'alfresco/webdav') === FALSE){
              $pathm = '/alfresco/webdav' . $path;
            }else{$pathm = $path;}
            $document_name = urldecode(l($node->title, "/node/" . $node->nid. "?&path=" . str_replace('&', '%26', str_replace('/alfresco/webdav', "", $pathm)), array(
                            'fragment' => 'ogdocuments',
                            'attributes' => array(
                                "class" => "ajax-navigate",
                                "nid" => $node->nid,
                              )
                            )
                          ));
        $node_parents = !is_array($node_parents) ? array($node_parents) : $node_parents;

        // Looping over each parent
        foreach ($node_parents as $space_nid) {
          $crumb = array();
          // If the node is not a space, it does not have a dn so we go out
          if (!gofast_og_is_space(node_load($space_nid))) {
            return;
          }

                $path = gofast_cmis_space_get_webdav_path($node->nid);
                if(strpos($path, 'alfresco/webdav') === FALSE){
                  $pathm = '/alfresco/webdav' . $path;
                }else{$pathm = $path;}
                $crumb[] = urldecode(l($node->title, "/node/" . $node->nid. "?&path=" . str_replace('&', '%26', str_replace('/alfresco/webdav', "", $pathm)), array(
                            'fragment' => 'ogdocuments',
                            'attributes' => array(
                                "class" => "ajax-navigate",
                                "nid" => $node->nid,
                                "style" => 'font-weight:bold;'
                              )
                            )
                          ));
            while (!empty($space_nid)) {
              $gid = $space_nid;
              $title = gofast_get_node_title($gid);
                $path = "/alfresco/webdav" . gofast_cmis_space_get_webdav_path($gid);
                if(strpos($path, 'alfresco/webdav') === FALSE){
                  $pathm = '/alfresco/webdav' . $path;
                }else{$pathm = $path;}

                $crumb[] = urldecode(l($title, "/node/" . $gid. "?&path=".str_replace('&', '%26', str_replace('/alfresco/webdav', "", $pathm)), array(
                            'fragment' => 'ogdocuments',
                            'attributes' => array(
                                "class" => "ajax-navigate",
                                "nid" => $gid,
                              )
                            )
                          ));
                $space_nid = gofast_og_get_parent(node_load($space_nid));
            }
            $crumb[] = l(t('Home'), "");
          }
          $crumbs[] = array_reverse($crumb);
      }
  return $crumbs;
}

/**
 * Returns a node ID given a book mlid (book page's menu_links.mlid).
 */
function gofast_get_nid_from_book_mlid($mlid) {
  $result = db_query("SELECT b.nid FROM book b WHERE b.mlid= :mlid", array(':mlid' => $mlid))->fetchField();
  return $result;
}

/** Implements hook_query_TAG_alter().
 *
 * Alter comments query to order by DESC as well as the default ASC.
 */
function gofast_query_comment_filter_alter(QueryAlterableInterface $query) {
  $orderby = &$query->getOrderBy();

  // Sorting for threaded comments.
  if (isset($orderby['torder'])) {
    // Sort by root parent first, then normal threaded.
    $query->addExpression("SUBSTRING_INDEX(c.thread, '.', 1)", 'rparent');
    $orderby = array('rparent' => 'DESC') + $orderby;
  }
  // Sorting for flat comments.
  else if (isset($orderby['c.cid'])) {
    $direction = 'DESC';

    $orderby['c.cid'] = $direction;
    $orderby = array('c.created' => $direction) + $orderby;
  }
}

/**
 * Short-circuit the version argument.
 * Allow loading of custom lib that version does not match the info.
 */
function short_circuit_version() {
  return TRUE;
}

/**
 * Implements hook_node_presave()
 *  Act on a node being inserted or updated.
 */
function gofast_node_presave($node) {
  // Prevents "Undefined property: stdClass::$revision ..." errors.
  if (!isset($node->revision)) {
    // Always use the default revision setting.
    $node_options = variable_get('node_options_' . $node->type, array('status', 'promote'));
    $node->revision = in_array('revision', $node_options);
  }

  global $technically_changed;
  //if the flag indicating it's a technically save, put again the old revision_uid and changed values
  if(isset($node->technically_save ) || isset($technically_changed)){
      if(isset($technically_changed)){
        $node->changed = $technically_changed;
      }else{
        $node->changed = $node->technically_changed;
      }
  }

}

/**
 * This function overrides language list for node content types except forum.
 */
function node_content_language_list() {
  //return gofast_get_translation_languages();
}

/**
 * This function overrides language list for forum content type.
 */
function forum_language_list() {
  //return gofast_get_translation_languages();
}

/**
 * Helper function, returns languages avaiable for translation.
 */
function gofast_get_translation_languages($include_und = TRUE) {
  $lang = array(
    'fr' => t('French', array(), array('context' => 'gofast')),
    'en' => t('English', array(), array('context' => 'gofast')),
    'de' => t('German', array(), array('context' => 'gofast')),
    'es' => t('Spanish', array(), array('context' => 'gofast')),
    'it' => t('Italiano', array(), array('context' => 'gofast'))
  );
  return $include_und ? $lang + array(LANGUAGE_NONE => t('None', array(), array('context' => 'gofast'))) : $lang;
}

/**
 * Returns the menu link id given a title (database field link_title). Call
 * to this function should be avoided when possible since there is no uniqueness
 * constraint on 'link_title' field.
 *
 * @param string $title
 *  A menu item link title (in system language).
 *
 * @param int $index [optional]
 *  The numeric index of the field to return. Defaults to the first field.
 *
 * @return int
 *  The mlid of the given title.
 */
function gofast_get_mlid_by_title($title, $index = 0) {
  return (int) db_select('menu_links', 'ml')
                  ->fields('ml', array('mlid'))
                  ->condition('link_title', $title)
                  ->execute()
                  ->fetchField($index);
}

/**
 * Returns the menu link id giving a uuid.
 *
 * @param string $title
 *  A menu item link title (in system language).
 *
 * @param int $index [optional]
 *  The numeric index of the field to return. Defaults to the first field.
 *
 * @return int
 *  The mlid of the given title or false otherwise.
 */
function gofast_get_mlid_by_uuid($uuid, $index = 0) {
  return (int) db_select('menu_links', 'ml')
                  ->fields('ml', array('mlid'))
                  ->condition('uuid', $uuid)
                  ->execute()
                  ->fetchField($index);
}

/**
 * Returns the menu link id of a given path. Caution: access control is done on
 * the underlying entity (e.g. a path like 'node/%' will trigger node_access()
 * on the corresponding node), so you will have to override user session if you
 * want to get the mlid regardless of access control.
 *
 * @param string $path
 *  The path to get its mlid
 *
 * @return int
 *  The corresponding mlid, or FALSE if not found or if a 'view' operation on
 *  the underlying object is denied access control.
 */
function gofast_get_mlid_by_path($path) {
  $menu_item = menu_link_get_preferred($path);
  return isset($menu_item['mlid']) ? (int) $menu_item['mlid'] : FALSE;
}

/**
 * Gofast autocomplete query builder.
 *
 * Given an input text $str, an $entity_type and an array of $options, builds a
 * database query and return an array of matches. The benefits of using this
 * function is that you can combine entity field query with base table property
 * query using OR operator, invoke access hooks, and format/theme autcocomplete
 * items from matching entities.
 *
 * @param string $str
 *  Input string to search for.
 *
 * @param string $entity_type
 *  The entity type to match.
 *
 * @param array $options [optional]
 *  An associative array of options. Defaults to an empty array with a fallback
 *  depending on entity type. It may contain the following elements:
 *  - 'bundle': an array of bundle to filter. Leave empty to bypass bundle
 *     filtering. Don't use bundle 'user' with entity type 'user' or Drupal
 *     will land in an error.
 *  - 'fields': An array of fields to search on.
 *  - 'properties': An array of entity base table properties to search on.
 *  - 'key': A string defining the name of the key that holds matching items
 *     identifiers.
 *  - 'value': A string defining the name of the value that will be returned,
 * it can be a field or a property.
 *  - 'format_key_callback': Callable function handling formatting and how
 * to display the key of a matching entity in an autocomplete item.
 *  - 'format_value_callback': Callable function handling formatting and
 * how to display the value of a matching entity in an autocomplete item.
 *  - 'link': if TRUE the default format_value_callback will link matching item
 *  to the corresponding entity when possible, other formatter can make their
 *  implementation of this option.
 *
 * @return array
 *  An associative array of matches, ready for printing. Keys and values depends
 *  on matching entities' type and the options callback : keys and values are
 *  respectively formatted by 'format_key_callback' and 'format_value_callback'.
 */
function gofast_ac_query($str, $entity_type, $options = array(), $broadcast = false) {
  global $user;
  $options += array(
    'bundle' => array(),
    'fields' => array(),
    'properties' => array(),
    'key' => NULL,
    'value' => NULL,
    'format_key_callback' => 'gofast_ac_format_key',
    'format_value_callback' => 'gofast_ac_format_value',
    'link' => FALSE,
    'limit' => 20
  );

  if($entity_type == 'taxonomy_term'){
    $_GET['query'] = $str;
    $taxonomy_output = gofast_xeditable_tag_autocomplete(false);
  }
  $info = entity_get_info($entity_type);

  $base_table = $info['base table'];

  foreach ($options as $key => &$option) {
    if (empty($option)) {
      $option = gofast_ac_query_option_default($entity_type, $key, $options);
    }
  }

  if (!is_assoc($options['fields'])) {
    // Generate field aliases.
    $options['fields'] = array_flip(array_map(function($i) {
              return chr(($i | 96) + 1); //+97
            }, array_flip($options['fields'])));
  }

  $EFQuery = new EntityFieldQuery();
  $EFQuery->entityCondition('entity_type', $entity_type)
          ->addMetaData('base_table', $base_table)
          ->addMetaData('properties', $options['properties'])
          ->addMetaData('fields', $options['fields'])
          ->addMetaData('key', $options['key'])
          ->addMetaData('str', $str);
  // Moving out tag oring - caused problems when querying for contacts api autocomplete.
  // The tag is still here when we don't query contacts

  // Alter the query and apply appropriate access tag based on entity type.
  if($broadcast == false){
    gofast_ac_query_access($EFQuery, $entity_type, $options['fields']);
  }

  if ($entity_type === 'user') {
    // Prevent showing up drupal admin.
    $EFQuery->entityCondition('entity_id', 1, '<>');
    // prevent showing up blocked users.
    $EFQuery->propertyCondition('status', 1)
            ->addTag('oring');
  }
  elseif (!empty($options['bundle'])) {
    $EFQuery->entityCondition('bundle', $options['bundle'], is_array($options['bundle']) ? 'IN' : '=');
        if(in_array('contact', $options['bundle'])) {
            $EFQuery->addTag('first_and_last_name');
        }else $EFQuery->addTag('oring');
  }else $EFQuery->addTag('oring');

  if($options['limit']){
      $EFQuery->range(0, $options['limit']);
  }

  $ids = $EFQuery->execute();
  $matches = array();
  if(!empty($taxonomy_output)){
      $entities = array();
      foreach ($taxonomy_output as $val) {
          $entities[] = taxonomy_term_load($val['id']);
      }
  }else{
    if (empty($ids) || empty($ids[$entity_type])) {
        return $matches;
    }

    $entities = entity_load($entity_type, array_keys($ids[$entity_type]));
  }


  ///filter by role for user and userlist if required
  if( $entity_type === 'user' && isset($options['roles_filter'])){
    foreach ($entities as $key => $entity){
      $entity_roles = gofast_og_get_user_final_roles_for_space('node', $options['roles_filter']['space_nid'], $entity->uid);
      if( empty(array_intersect($entity_roles, $options['roles_filter']['roles'])) ){
        unset($entities[$key]);
      }
    }
  }elseif ( $entity_type === 'userlist' && isset($options['roles_filter']) ){
    foreach ($entities as $key => $entity){
      $entity_roles = gofast_userlist_og_get_userlist_roles('node', $options['roles_filter']['space_nid'], $entity->ulid);
      if( empty(array_intersect($entity_roles, $options['roles_filter']['roles']))  ){
        unset($entities[$key]);
      }
    }
  }

  $map_value = in_array($options['value'], $options['fields']) ?
          function ($entity, $value) {
    return $entity->{$value}[LANGUAGE_NONE][0]['value'];
  } :
          function ($entity, $value) {
    return $entity->{$value};
  };

  $format_key = $options['format_key_callback'];
  $format_value = $options['format_value_callback'];
  foreach ($entities as $id => $entity) {

      if($entity->type == NULL && $entity_type != 'userlist' && $entity->vid != GOFAST_VID_TAGS){
          $access = user_view_access($entity);
          if($access == FALSE){
              continue;
          }
      }

      //Check space permissions
      if(in_array($entity->type, array('group', 'organisation', 'extranet', 'public'), TRUE) && !$broadcast){
          $membership = og_get_membership('node', $entity->nid, 'user', $user->uid);
          $isMember = ($membership != FALSE && $membership->state != OG_STATE_PENDING);

          //check membership from userlist
          if( ! $isMember){
            $isMember = gofast_userlist_og_is_user_member_of_space($entity->nid, $user);
          }

          if(!$isMember){
              continue;
          }
      }

      //if broadcast, we keep only the entities in which we are not member of
      if($broadcast == true){
          if(node_access("update", $entity)){
              continue;
          }
      }

      //Check userlist permissions if partitionning is enabled
      if($entity_type == "userlist" && !gofast_userlist_is_visible($entity->ulid)){
          continue;
      }
    $_value = $map_value($entity, $options['value']);
    $_key = $entity->{$options['key']};
    $key = $format_key($entity_type, $entity, $_key, $_value, $options);
    $value = $format_value($entity_type, $entity, $_key, $_value, $options);
    $matches[$key] = $value;
  }

  return $matches;
}

/**
 * Options fallback per entity type for Gofast autocomplete query builder.
 */
function gofast_ac_query_option_default($entity_type, $key, $options) {
  $defaults = array(
    'node' => array(
      'bundle' => array(),
      'fields' => array(),
      'properties' => array('title', 'nid'),
      'key' => 'nid',
      'value' => 'title',
      'link' => $options['link']
    ),
    'user' => array(
      'bundle' => array(),
      'fields' => array(
        'ldap_user_displayname',
        'ldap_user_givenname',
        'ldap_user_sn'
      ),
      'properties' => array('name','mail'),
      'key' => 'uid',
      'value' => 'ldap_user_displayname',
      'link' => $options['link']
    ),
    'taxonomy_term' => array(
      'bundle' => array(),
      'fields' => array(),
      'properties' => array('name'),
      'key' => 'tid',
      'value' => 'name',
      'link' => $options['link']
    ),
    'userlist' => array(
      'bundle' => array(),
      'fields' => array(),
      'properties' => array('name'),
      'key' => 'ulid',
      'value' => 'name',
      'link' => $options['link']
    )
  );

  return $defaults[$entity_type][$key];
}

/**
 * Invokes hook_access() onto the EntityFieldQuery $query given an entity type
 * and a set of $fields.
 */
function gofast_ac_query_access(EntityFieldQuery $query, $entity_type, $fields) {
  switch ($entity_type) {
    case 'node':
      $query->addTag('node_access');
      break;
    case 'user':
      $query->addTag('user_access_profiles');
      break;
    case 'taxonomy_term':
      $query->addTag('term_access');
      break;
  }

  // Check access on node fields if any (entity_field_access tag work only with
  // node fields.
  if (!empty($fields) && $entity_type === 'node') {
    $query->addTag('entity_field_access');
  }
}

/**
 * Implements hook_query_TAG_alter(). Perform alterations to a structured query
 * for a given tag.
 *
 * @param QueryAlterableInterface $query
 */
function gofast_query_oring_alter(QueryAlterableInterface $query) {
  $str = $query->getMetaData('str');
  $key = $query->getMetaData('key');
  $fields = $query->getMetaData('fields');
  $properties = $query->getMetaData('properties');
  $base_table = $query->getMetaData('base_table');

  $or = db_or();

  foreach ($properties as $property) {
    $or->condition("{$base_table}.{$property}", '%' . db_like($str) . '%', 'LIKE');
  }

  foreach ($fields as $i => $field) {
    $query->leftJoin('field_data_' . $field, $i, "{$base_table}.{$key} = {$i}.entity_id");
    $or->condition("{$i}.{$field}_value", '%' . db_like($str) . '%', 'LIKE');
  }

  $query->condition($or);
}

/**
 * Default callback that formats the key part of the autocomplete item for an
 * entity matching a Gofast autocomplete query.
 *
 * @param string $entity_type
 *  The matching entity type.
 *
 * @param object $entity
 *  The matching entity.
 *
 * @param mixed $key
 *  The actual value held by the key (defined by $options['key']) identifying
 *  $entity (e.g. : $options['key'] is 'uid' => $key is a uid like 467).
 *
 * @param mixed $value
 *  The actual value held by $options['value'] that matches the original input
 *  string thus qualifying this entity as a matching entity.
 *
 * @param array $options
 *  The array of options used to match the entity.
 *
 * @return string
 *  A formatted string that makes the key of an autocomplete item.
 */
function gofast_ac_format_key($entity_type, $entity, $key, $value, $options) {
  switch ($entity_type) {
    case 'userlist':
      return "{$value}";
    case 'node':
    case 'user':
    default:
      return "{$value} <{$key}>";
  }
}

/**
 * Default callback that formats the value part of the autocomplete item for an
 * entity matching a Gofast autocomplete query.
 *
 * @param string $entity_type
 *  The matching entity type.
 *
 * @param object $entity
 *  The matching entity.
 *
 * @param mixed $key
 *  The actual value held by the key (defined by $options['key']) identifying
 *  $entity (e.g. : $options['key'] is 'uid' => $key is a uid like 467).
 *
 * @param mixed $value
 *  The actual value held by $options['value'] that matches the original input
 *  string thus qualifying this entity as a matching entity.
 *
 * @param array $options
 *  The array of options used to match the entity.
 *
 * @return string
 *  A formatted string that makes the value part of an autocomplete item.
 */
function gofast_ac_format_value($entity_type, $entity, $key, $value, $options) {
  switch ($entity_type) {
    case 'node':
      return theme('node_title', array('node' => $entity, 'link' => $options['link']));

    case 'user':
      return theme('username', array('account' => $entity, 'popup' => FALSE, 'link' => $options['link']));

    case 'userlist':
      return theme('gofast_userlist_autocomplete_view', array('userlist' => $entity, 'popup' => FALSE, 'link' => $options['link']));

    case 'taxonomy_term':
      switch ($entity->vid) {
        case GOFAST_VID_FORMAT:
          $dummy = (object) array(
                    'nid' => $entity->tid,
                    'type' => 'taxonomy/term',
                    'title' => $value,
                    'field_format' => array(LANGUAGE_NONE => array(array('tid' => $entity->tid))));
          return theme('node_title', array('node' => $dummy, 'link' => $options['link']));
          case GOFAST_VID_TAGS:
              return $entity->name;
        default:
          return $value;
      }

    default:
      return ' no display handler ';
  }
}

/**
 * Returns HTML for a node title along with its 'format' taxonomy linked icons.
 *
 * @param $variables
 *   An associative array containing:
 *   - node: A node object.
 *   - icon_size [optional]: image size of the format icon, defaults to 24.
 *   - link [optional]: Whether to display title as a link, defaults to TRUE.
 *
 * @ingroup themeable
 */
function theme_node_title($variables)
{
  global $base_url;
  global $mobile_url;

  $node = $variables['node'];

  // changer ici pour le link si c'est mobile

  if ($variables['noIcon'] !== TRUE) {
    $img = theme('gofast_node_icon_format', array('node' => $node));
  }
  $title = $img . "<span>{$node->title}</span>";

  // Allow to display other entity types title like node title (along with its
  // format icon), by faking etid property name/key (nid).
  $is_node = in_array($node->type, array_keys(field_info_bundles('node')));
  $class = 'gofast-title';
  $option = ['attributes' => ['class' => array($class)], 'html' => TRUE];

  if ($base_url == $mobile_url && $node->type == "task") {
    $task =  node_load($node->nid);
    $parent_space = $task->field_board[LANGUAGE_NONE][0]['target_id'];
    $path = "tasks_page_navigation?parent_sapce=". $parent_space."&card_id=" . $node->nid;
    $option['fragment'] = 'navKanban';
    return urldecode(l($title, $path, $option));
  } else  if ($variables['fullLink']) {
    $path = "$base_url . " / " . ($is_node ? 'node' : $node->type) . '/' . $node->nid";
  } else {
    $path = ($is_node ? 'node' : $node->type) . '/' . $node->nid;
  }

  return $variables['link'] ?
    l($title, $path, $option) :
    "<div class='{$class}'>{$title}</div>";
}

/**
 * Autocomplete callback for node lookups.
 */
function gofast_node_autocomplete($str) {
  $str = trim($str);
  if (empty($str) || strlen($str) < 3) {
    // This prevents returning irrelevant results, though it should be handled
    // clientside in order to avoid useless requests.
    drupal_json_output(array());
    exit;
  }

  $matches = gofast_ac_query($str, 'node');
  drupal_json_output($matches);
}

/**
 * Autocomplete callback for document title lookups.
 *
 * @param string $str
 *  The string to search for.
 *
 * @param array $extra_bundles [optional]
 *  Default is to filter only `alfresco_item` bundle, use this array to include
 *  extra bundles.
 */
function gofast_documents_autocomplete($str, $extra_bundles = []) {
  $str = trim($str);
  if (empty($str) || strlen($str) < 3) {
    // This prevents returning irrelevant results, though it should be handled
    // clientside in order to avoid useless requests.
    drupal_json_output(array());
    exit;
  }

  $options_ac_docs = array(
    'bundle' => array_merge(['alfresco_item'], $extra_bundles),
    'fields' => array(),
    'properties' => array(),
    'key' => 'nid',
    'value' => 'title',
    'format_key_callback' => 'gofast_modal_ac_format_documents_key',
    'format_value_callback' => 'gofast_modal_ac_format_documents_value'
  );

  $matches = gofast_ac_query($str, 'node', $options_ac_docs);

  // Highlighting string matches.
  foreach ($matches as $key => &$value) {
    $value = preg_replace(array('/[\n\r]+/', '/(<[^<>]*>)([^<>]*?)(' . preg_quote($str, '/') . ')/i'), array('', '$1$2<b>$3</b>'), $value);
  }

  drupal_json_output($matches);
}

/**
 * Autocomplete callback for contents and spaces lookups.
 *
 * @param string $str
 *  The string to search for.
 */
function gofast_contents_spaces_autocomplete($str) {
  $str = trim($str);
  if (empty($str) || strlen($str) < 3) {
    // This prevents returning irrelevant results, though it should be handled
    // clientside in order to avoid useless requests.
    drupal_json_output(array());
    exit;
  }

  $options_ac_all = array(
    'bundle' => array(),
    'fields' => array(),
    'properties' => array(),
    'key' => 'nid',
    'value' => 'title',
    'format_key_callback' => 'gofast_modal_ac_format_documents_key',
    'format_value_callback' => 'gofast_modal_ac_format_documents_value'
  );

  $matches = gofast_ac_query($str, 'node', $options_ac_all);

  // Highlighting string matches.
  foreach ($matches as $key => &$value) {
    $value = preg_replace(array('/[\n\r]+/', '/(<[^<>]*>)([^<>]*?)(' . preg_quote($str, '/') . ')/i'), array('', '$1$2<b>$3</b>'), $value);
  }

  drupal_json_output($matches);
}


/**
 * Alters user_view_access callback. Do not call this function directly.
 *
 * @see user_view_access()
 */
function gofast_user_view_access($account) {
  GLOBAL $user;
  if ($account->uid == 1) {
    // Users won't see admin profile except admin itself for which this function
    // is never called.
    return FALSE;
  }

  if($GLOBALS['user']->uid == 1){
      return TRUE;
  }

  //check if account has left the platform, if yes, check if current user has permission to see the left profils
  if(gofast_user_is_left($account)){
      if(!gofast_user_current_can_see_left_user()){
          return FALSE;
      }
  }

  // Check user partitioning config and apply if needed.
  $visibility = variable_get('gofast_user_partitioning', GOFAST_USER_PARTITIONING_DEFAULT);
  $admin_visibility = variable_get('gofast_admin_visibility', GOFAST_ADMIN_VISIBILITY_DEFAULT);
  $admin_visibility_condition = ($admin_visibility == GOFAST_ADMIN_VISIBILITY_ON && gofast_user_is_adm($user));
  if (($visibility == GOFAST_USER_PARTITIONING_ON && $admin_visibility_condition == FALSE) || ($visibility == GOFAST_USER_PARTITIONING_ON_ONLY_EXTRANET && gofast_user_is_extranet() && $admin_visibility_condition == FALSE )) {
    // Users must have at least one space in common.
    $common = gofast_og_get_common_spaces(array($GLOBALS['user']->uid, $account->uid));
    if (empty($common)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_entity_view()
 */
function gofast_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type === "comment" || $view_mode !== 'full') {
    return;
  }

  if (isset($entity->type) && $entity->type === 'alfresco_item') {
    $cmis_lock_owner = gofast_cmis_webservice_execute_request('getlocked', gofast_cmis_node_get_item_id($entity));
    $entity->cmis_lock_owner = isset($cmis_lock_owner) ? $cmis_lock_owner : 'nolock';
  }

  list ($entity_id,, ) = entity_extract_ids($type, $entity);

  $context = array(
    'timestamp' => time(),
    'space' => $type === 'node' && gofast_og_is_space($entity),
    'path' => $_GET['q'],
    'entity_type' => $type,
    'entity_id' => $entity_id,
    'entity' => $entity,
  );

  gofast_set_context($context);
}

/**
 *
 * @param type $node
 * @return boolean
 * This function is not synchronized with the browser since GOFAST-5256
 */
function gofast_archive_space($node)
{

    if (!og_user_access("node", $node->nid, 'archive space', NULL, FALSE, TRUE)) {
        return FALSE;
    }

    if (!node_access('update', $node) && !node_access("delete", $node)) {
        return FALSE;
    }

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->propertyCondition('status', 1)
        ->fieldCondition('og_group_ref', 'target_id', $node->nid);

    $results = $query->execute();

    if (count($results["node"]) > 0) {
        foreach ($results["node"] as $nid => $child) {
            $child_node = node_load($nid);
            gofast_cmis_node_archive($child_node);
        }
    }

    $state = variable_get("archiving_space_" . $node->nid, array());
    $state['step'] = "2_1";
    variable_set("archiving_space_" . $node->nid, $state);

    $node->field_archive[LANGUAGE_NONE][0]["value"] = 1;
    field_attach_update('node', $node);

    //GOFAST-6104 --- Archiving a space deletes the associated room
    $node_is_group = gofast_og_is_space($node);
    if ($node_is_group) {
        gofast_riot_node_delete($node);
        $node->field_riot_identifier = array();
        node_save($node);
    }

    gofast_cmis_webservice_item_archive(gofast_cmis_node_get_item_id($node), FALSE, TRUE);

    gofast_archive_space_ldap_admin_and_standard_entry($node);

    variable_set("archiving_space_" . $node->nid, "");

    gofast_audit_archive_space($node->nid);
    return TRUE;
}

/**
 * This function rename _{NODE_iD}_ADMIN in _{NODE_iD}_ADMIN_ARCHIVED and _{NODE_ID}_STANDARD in _{NODE_ID}_STANDARD_ARCHIVED
 * @author Alexis VANHOVE
 * @param node The node we need to change roles for users
 * @since 3.5
 * @return boolean return True if the function is working , else return False
 */
function gofast_archive_space_ldap_admin_and_standard_entry($node){
    $LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
    $LdapServer->connectAndBindIfNotAlready();

    $dn_contributor =  gofast_ldap_entry_get_roles_dn($node)["group contributor"];
    $dn_admin =  gofast_ldap_entry_get_roles_dn($node)["administrator member"];
    $arr_contributor = explode(",", $dn_contributor, 2);
    $arr_admin = explode(",", $dn_admin, 2);
    $cn_contributor = $arr_contributor[0];
    $cn_admin = $arr_admin[0];

    $cn_contributor = str_replace('cn=','',$cn_contributor);
    $cn_admin = str_replace('cn=','',$cn_admin);

    $rdn_contributor = "cn={$cn_contributor}_ARCHIVED";
    $rdn_admin = "cn={$cn_admin}_ARCHIVED";

    $rename_contributor = @ldap_rename($LdapServer->connection, $dn_contributor, $rdn_contributor, NULL, TRUE);
    if ($rename_contributor == false){
        watchdog("ARCHIVED SPACE", "rename contributor entry error");
        return FALSE;
    }
    $rename_admin = @ldap_rename($LdapServer->connection, $dn_admin, $rdn_admin, NULL, TRUE);
        if ($rename_admin == false){
        watchdog("ARCHIVED SPACE", "rename admin entry error");
        return FALSE;
    }
    return TRUE;
}

/**
 *
 * @param type $node
 * @return boolean
 * Asynchronized since GOFAST-5256
 */
function gofast_unarchive_space($node){
  if (!og_user_access("node", $node->nid, 'archive space', NULL, FALSE, TRUE)) {
    return FALSE;
  }

  if (!node_access('update', $node) && !node_access("delete", $node)) {
    return FALSE;
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->propertyCondition('status', 1)
      ->fieldCondition('og_group_ref', 'target_id', $node->nid);

  $results = $query->execute();

  if (count($results["node"]) > 0) {
    foreach ($results["node"] as $nid => $child) {
      $child_node = node_load($nid);
      gofast_cmis_node_unarchive($child_node);
    }
  }

  $state = variable_get("unarchiving_space_" . $node->nid, array());
  $state['step'] = "2_1";
  variable_set("unarchiving_space_" . $node->nid, $state);

  $node->field_archive[LANGUAGE_NONE][0]["value"] = 0;
  field_attach_update('node', $node);
  gofast_cmis_webservice_space_assign_permissions($node);
  // gofast_cmis_webservice_item_set_permission(gofast_cmis_node_get_item_id($node), $node->name, TRUE);

  gofast_unarchive_space_ldap_admin_and_standard_entry($node);

  variable_set("unarchiving_space_" . $node->nid, "");
  gofast_audit_archive_space($node->nid,false);
  return TRUE;
}

/**
 * This function rename _{NODE_iD}_ADMIN_ARCHIVED in _{NODE_iD}_ADMIN and _{NODE_ID}_STANDARD_ARCHIVED in _{NODE_ID}_STANDARD
 * @author Alexis VANHOVE
 * @param node The node we need to change roles for users
 * @since 3.5
 * @return boolean return True if the function is working , else return False
 */
function gofast_unarchive_space_ldap_admin_and_standard_entry($node){
    $LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
    $LdapServer->connectAndBindIfNotAlready();

    $dn_contributor =  gofast_ldap_entry_get_roles_dn($node)["group contributor"];
    $dn_admin =  gofast_ldap_entry_get_roles_dn($node)["administrator member"];
    $arr_contributor = explode(",", $dn_contributor, 2);
    $arr_admin = explode(",", $dn_admin, 2);
    $cn_contributor = $arr_contributor[0];
    $cn_admin = $arr_admin[0];

    $cn_contributor = str_replace('_ARCHIVED','',$cn_contributor);
    $cn_admin = str_replace('_ARCHIVED','',$cn_admin);


    $rename_contributor = @ldap_rename($LdapServer->connection, $dn_contributor, $cn_contributor, NULL, TRUE);
    if ($rename_contributor == false){
        watchdog("UNARCHIVED SPACE", "rename contributor entry error");
        return FALSE;
    }
    $rename_admin = @ldap_rename($LdapServer->connection, $dn_admin, $cn_admin, NULL, TRUE);
        if ($rename_admin == false){
        watchdog("UNARCHIVED SPACE", "rename admin entry error");
        return FALSE;
    }
    return TRUE;
}


/**
 * Implements hook_exit()
 */
/*function gofast_exit() {
  // Ensures a context is set. Filtering ajax requests prevents to override the
  // origin context (page), for example when a polling request occurs or when
  // opening a modal (though we can think of a modal context but it would have
  // to be maintained separately).
  if (!gofast_request_is_ajax()) {
    gofast_context_fallback();
  }
}*/

function gofast_goto_home(){
    global $user;
    $psid = gofast_og_get_user_private_space($user, FALSE);
    if($_GET['calendar']){
      if(gofast_mobile_is_mobile_domain()){
        return drupal_goto('/calendar_simplified');
      }else{
        return drupal_goto('/node/'.$psid,  array( 'fragment' => 'ogcalendar','alias' => TRUE ));
      }
    }else{
      if(gofast_mobile_is_mobile_domain()){
        drupal_goto('/home_page_navigation' , array('fragment' => 'navBrowser', 'query' => array('path' => '/Sites/_' . $user->name)));
      }else{
        drupal_goto('/node/'.$psid,  array( 'fragment' => 'ogdocuments','alias' => TRUE ));
      }
    }
}

/*
 * Callback used in JS to store variable into drupal variable (for exemple in case the data is too big to use cookie
 */
function gofast_api_set_variable(){
    if(isset($_POST["name"]) && isset($_POST["value"])){
         $name = $_POST["name"];
         $value = $_POST["value"];

         variable_set($name, $value);
         drupal_json_output(array("OK"));
         exit;
    }

    drupal_json_output(array("KO"));
    exit;

}
/*
 * callback to set variable containing contextual messages params for each users
 *
 */
function gofast_api_set_contextual_messages_variable($myuser){
    global $user;
    if($user->uid != $myuser->uid){
         drupal_json_output(array("KO1"));
         exit;
    }

    if(!isset($_GET["key"]) || !isset($_GET["value"])){
         drupal_json_output(array("KO2"));
         exit;
    }

    $name_message = $_GET["key"];
    $value = $_GET["value"];

    $messages_params = variable_get(GOFAST_CONTEXTUAL_MESSAGES_VARIABLE_NAME, array());

    $messages_params[$myuser->uid][$name_message] = $value;

    variable_set(GOFAST_CONTEXTUAL_MESSAGES_VARIABLE_NAME, $messages_params);

    drupal_json_output(array("OK"));
    exit;

}

/*
 * Return drupal status in one or multiple bootstraped panel
 * TODO: use a theme
 */
function gofast_get_status(){
  $status = "";

  /*
   * Replication status
   */
  $replications = db_query("SELECT COUNT(*) FROM alfresco_replication")->fetchAssoc()['COUNT(*)'];
  if($replications > 100){
    $status .='<div id="platform-status-replication" class="panel panel-info">';
    $status .= '<div class="panel-heading">' . t('Platform status', array(), array('context' => 'gofast:status')) .'</div>';
    $status .= '<div class="panel-body">' . t('A high activity has been detected on the platform, you may experience some slowness but you can continue to browse.', array(), array('context' => 'gofast:status'));
    if(round($replications / 25) < 31){
      $status .= '<br />' . t('Estimated recovery time : ', array(), array('context' => 'gofast:gofast:status')) . round($replications / 25) . ' min';
    }
    $status .= '</div></div>';
  }

  /*
   * Alfresco status
   */
  if (200 !== gofast_get_http_code('http://localhost:8080' . '/alfresco/')) {
    $status .='<div id="platform-status-replication" class="panel panel-danger">';
    $status .= '<div class="panel-heading">' . t('Platform status', array(), array('context' => 'gofast:status')) .'</div>';
    $status .= '<div class="panel-body">' . t("Alfresco service is down, please contact site administrator.", array(), array('context' => 'gofast:status')) . '<br />';
    $status .= t("You will not be able to use all the features of the Gofast.", array(), array('context' => 'gofast:status'));
    $status .= '</div></div>';
  }

  /*
   * Solr status
   */
  if (302 !== gofast_get_http_code('http://localhost:8983' . '/solr')) {
    $status .='<div id="platform-status-replication" class="panel panel-danger">';
    $status .= '<div class="panel-heading">' . t('Platform status', array(), array('context' => 'gofast:status')) .'</div>';
    $status .= '<div class="panel-body">' . t("Solr service is down, please contact site administrator.", array(), array('context' => 'gofast:status')) . '<br />';
    $status .= t("You will not be able to use the search feature of the Gofast.", array(), array('context' => 'gofast:status'));
    $status .= '</div></div>';
  }

  /*
   * Bonita status
   */
  // if gofast_community module exist then bonita don't exist so don't display errors logs
  if (!module_exist('gofast_community')){
  if (302 !== gofast_get_http_code('http://localhost:8081' . '/bonita')) {
    $status .='<div id="platform-status-replication" class="panel panel-danger">';
    $status .= '<div class="panel-heading">' . t('Platform status', array(), array('context' => 'gofast:status')) .'</div>';
    $status .= '<div class="panel-body">' . t("Bonita service is down, please contact site administrator.", array(), array('context' => 'gofast:status')) . '<br />';
    $status .= t("You will not be able to use the workflows of the Gofast.", array(), array('context' => 'gofast:status'));
    $status .= '</div></div>';
  }
  }

  print $status;
  exit;
}

/**
 *
 * Once per day, retreive all node with deadline = tomorrow, then send a email
 * to related users.
 */
function gofast_node_deadline_notify(){

   global $base_url;
   $tomorrow = new DateTime('tomorrow');
   $tomorrow_str = $tomorrow->format('Y-m-d');

   $query = new EntityFieldQuery();
   $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array('conference', 'webform', 'task'), 'NOT IN')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_date', 'value', $tomorrow_str.'%', 'like');
   $result = $query->execute();

   if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $nodes = node_load_multiple($nids);

      foreach ($nodes as $node) {
        $og_groups = $node->og_group_content_ref['und'];

        $node_link = $base_url.'/node/'.$node->nid;

        $recpt = array();
        $recpt_list = array();

        //get group subscriber
        if(isset($og_groups)){
          foreach ($og_groups as $og_group){
            //retreive subscribres
            $subscribers = gofast_subscription_ui_api_subscribed_list('og', $og_group['target_id']);
            if(isset($subscribers)){
              foreach($subscribers as $subscriber){
                $user = user_load($subscriber[0]);
                if(! in_array($user->mail, $recpt_list )){
                  $recpt_list[] = $user->mail;
                   $recpt[] = array('recpt' => $user->mail,
                                    'method' => 'to',
                                    'firstname' => $user->ldap_user_givenname[LANGUAGE_NONE][0]['value'],
                                    'user_language' => $user->language);
                }
              }
            }
          }
        }

       //get node subscriber
       $subscribers = gofast_subscription_ui_api_subscribed_list('node', $node->nid);
       if(isset($subscribers)){
          foreach($subscribers as $subscriber){
            $user = user_load($subscriber[0]);
            if(! in_array($user->mail, $recpt_list )){
              $recpt_list[] = $user->mail;
              $recpt[] = array('recpt' => $user->mail,
                                'method' => 'to',
                                'firstname' => $user->ldap_user_givenname[LANGUAGE_NONE][0]['value'],
                                'user_language' => $user->language);
            }
          }
       }
       //Send notification mail
       foreach($recpt as $to){

        $mail_recpt = array();
        $mail_recpt[] = $to;

        $userName = gofast_user_display_name(user_load_by_mail($mail_recpt[0]['recpt']));

        $RecipUser = user_load_by_mail($mail_recpt[0]['recpt']);
        $l = array('langcode' =>  $RecipUser->language, 'context' => 'gofast');

        $node_icon = str_replace('<span>', '<span style="display:none;">', theme('node_title', array('node' => $node , 'link' => FALSE)));
        $document_pic = gofast_mail_queue_fa_png($node_icon);

        $subject = t('Deadline of a document reached', array(), $l);
        $title = t('Deadline document notification' ,array(), $l);
        $footer = t('Message sent from ', array(), $l)." ".variable_get('site_name');

        $body = theme('gofast-notifications-node-deadline', array(
          'user_name' => $userName,
          'l' => $l,
          'node_title' => $node->title,
          'node_link' => $node_link,
          'node_icon' => $document_pic,
        ));

        $mail = array(
            'body' => $body,
            'title' => $title,
            'subject' => $subject,
            'footer' => $footer
        );
        $ret = gofast_mail_queue_api_queue_ext($mail, $mail_recpt, time());
         if ($ret == TRUE) {
          flood_register_event('print_mail');
          $ok = TRUE;
         }
       }
     }
   }
}


function gofast_alter_username_before_load($username){
    foreach (module_implements('alter_username_before_load_func') as $module) {
      $username = module_invoke($module, 'alter_username_before_load_func',$username);
    }
    return $username;
}


  //Use language variable to display pdf viewer in the language of the platform
  global $language;
  $mySettings = array('language' => $language->language);
  drupal_add_js(array('gofast' => $mySettings), 'setting');

function gofast_get_node_actions_async($nid){
  //Check if the call is coming from the File browser
  if($nid == "filebrowser"){
    $node_contextual_actions = gofast_get_contextual_actions_node('filebrowser');
  }else{
    $node_contextual_actions = gofast_get_contextual_actions_node(node_load($nid));
  }
  $contextual_actions = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-actions', 'buttons' => $node_contextual_actions));
  print $contextual_actions;
  exit;
}

function gofast_get_node_breadcrumb_async($nid){

  $detect = new Mobile_Detect;
  $node = node_load($nid);

    if(isset($_GET["only_actions"])){
     print gofast_get_node_actions_async($nid);
    }else{
      print gofast_get_breadcrumb_ajax(node_load($nid));
    }

    if($node->type === 'alfresco_item' && gofast_mobile_is_mobile_domain()){
      print '<div class="breadcrumb-alt" id="breadcrumb-container-buton-mobile">';

      // refresh button
      $node_refresh_action = gofast_get_refresh_action_node($node);
      $refresh_action = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-refresh', 'buttons' => $node_refresh_action));
      print $refresh_action;

        if (module_exists('gofast_workflows') &&!$detect->isMobile() && !$detect->isTablet()) {
          $node_workflow_action = gofast_get_workflow_action_node($node, true);
          $wf_action = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-wf', 'buttons' => $node_workflow_action));
          print $wf_action;
        }

      $node_lock_action = gofast_get_lock_action_node($node);
      $lock_action = theme('contextual_links', array('btn_group_id' => 'breadcrumb-alt-lock', 'buttons' => $node_lock_action));
      print $lock_action;

    if (!$detect->isMobile() && !$detect->isTablet()) {
      print "<div id='contextual-actions-loading' class='loader-actions not-processed'></div>";
    }

      print '</div>';
    }

  exit;
}

function gofast_process_location_check_async($nid, $no_answer = false, $force_execute = false, $no_timecheck = false){
  global $user;
  $node = node_load($nid);
  $reference = gofast_cmis_node_get_item_id($node);
  $item = gofast_cmis_item_get($reference);

  if ($node->type === 'alfresco_item' && $node->changed < time()-30 || $no_timecheck) {

    // This set the field value if none were found
    if (empty($node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value'])) {
      $reference = gofast_cmis_node_get_reference_by_path($node);
      $node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value'] = $reference;
      field_attach_update('node', $node);
    }

    // check if emplacement fields are correct or not (in case of rename the folder)
    $parent = gofast_cmis_item_get_parent($node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value']);
    $parents_formatted = array();
    if(count($parent->objectList) > 0){
       foreach($parent->objectList as $myparent){
           $parents_formatted[] = array("value" => $myparent->properties["cmis:path"]);
       }
    }
    if ($node->status != 0){ //Node is published
      $is_equal = $parents_formatted === $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE];
        if ($is_equal === false && ($user->uid != 1 || $force_execute == true)){
          // We use field_attach_update because we don't hook on it (otherwise
          // alfresco_script.php is eventually triggered with conflicting or
          // inconsistent data causing GOFAST-6350.
          $_POST['technically_save'] = TRUE;
          $node->technically_save = TRUE;
          $node->technically_changed = $node->changed;
          $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE] = $parents_formatted;
          field_attach_update('node', $node); // no hook_field_update()
          entity_get_controller('node')->resetCache([$nid]);
        }

        //check if main_emplacement is correct or not ( check if it exists into emplacements )
        $main_emplacement_exists = false;
        foreach($node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE] as $emplacement){
            if($emplacement["value"] == $node->{GOFAST_CMIS_MAIN_LOCATION_FIELD}[LANGUAGE_NONE][0]["value"]){
                $main_emplacement_exists = true;
            }
        }
        if($main_emplacement_exists == false){
            $node->{GOFAST_CMIS_MAIN_LOCATION_FIELD}[LANGUAGE_NONE][0]["value"] = $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE][0]["value"];
            field_attach_update('node', $node); // no hook_field_update()
            entity_get_controller('node')->resetCache([$nid]);
        }

        //Check if Drupal node title isn't sync with alfresco title
        $item = gofast_cmis_item_get($node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value']);
        if(($user->uid != 1 || $force_execute == true) && !empty($item) && $item->properties['cmis:name'] !== $node->title && $item->properties['cmis:name'] != ""){
          $node->title = $item->properties['cmis:name'];
          $node = gofast_prepare_node_save_technically($node);
          $ruid = $node->revision_uid;
          node_save($node);
          db_update('node_revision')
            ->fields(array('uid' => $ruid))
            ->condition('nid', $node->nid)
            ->execute();
          cache_clear_all("field:node:$node->nid", 'cache_field');
        }

        //check if field_filename is empty or not correct
        if(($user->uid != 1 || $force_execute == true) && !empty($item) && $item->properties['cmis:name'] !== $node->field_filename[LANGUAGE_NONE][0]["value"] && $item->properties['cmis:name'] != ""){
          $node = node_load($nid);
          $node->field_filename[LANGUAGE_NONE][0]["value"] = $item->properties['cmis:name'];
          $node = gofast_prepare_node_save_technically($node);
          $ruid = $node->revision_uid;
          $_POST['prevent_notify'] = TRUE;
          node_save($node);
          db_update('node_revision')
            ->fields(array('uid' => $ruid))
            ->condition('nid', $node->nid)
            ->execute();
          cache_clear_all("field:node:$node->nid", 'cache_field');
        }

    }
  }

  //unable to get the cmis object
  if ($item == false) {
    //we check if it is into the Alfresco trash. If yes, we unpublish the Drupal node
    //Check either the item is deleted
    $item_is_deleted = FALSE;
    $url = "http://localhost:8080/alfresco/service/get/version/?reference=" . str_replace('workspace', 'archive', $reference);
    $username = "admin";
    $password = gofast_get_admin_pwd();

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_USERPWD, $username . ":" . $password);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_TIMEOUT, 3);
    $buffer = curl_exec($ch);

    $buf = strip_tags($buffer);
    $result = trim($buf);
    $item_delete = json_decode($result);

    if (isset($item_delete[0]->nodeRef)) { //Found a deleted node, will re check in 1 sec (GOFAST-4668)
      sleep(1);
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_HEADER, 0);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_USERPWD, $username . ":" . $password);
      curl_setopt($ch, CURLOPT_URL, $url);
      $buffer = curl_exec($ch);

      $buf = strip_tags($buffer);
      $result = trim($buf);
      $item_delete = json_decode($result);
      if (isset($item_delete[0]->nodeRef)) { //Found a deleted node again
        $item_is_deleted = TRUE;
      }
    } else {
      //In this case, we can't find the node neither in contentstore nor in contentstore.deleted
      //Check if we can get 'Group' Alfresco item so we're sure that Alfresco is up and answering our requests properly
      $group_node = node_load(4);
      $group_reference = gofast_cmis_node_get_item_id($group_node);
      $group_item = gofast_cmis_item_get($group_reference);

      if (is_object($group_item) || $group_item->properties['cmis:name'] == 'Groups') {
        //Alfresco is answering properly, check again if we still can't find the item in the contenstore
        $item = gofast_cmis_item_get($reference);
        if ($item == false) {
          //The item is definitly deleted, tag the node as deleted
          $item_is_deleted = TRUE;
        }
      }
    }

    if ($item_is_deleted == TRUE) {
      if ($node->status == 1) {
        $node->status = NODE_NOT_PUBLISHED;
        $node = gofast_prepare_node_save_technically($node);
        $ruid = $node->revision_uid;
        node_save($node);
        db_update('node_revision')
        ->fields(array('uid' => $ruid))
          ->condition('nid', $node->nid)
          ->execute();
        cache_clear_all("field:node:$node->nid", 'cache_field');
        $data['response'] = "reload";
        print json_encode($data);
        exit;
      }
    }
  }

  //Check if the file exists in the filesystem
  $content_stream = $item->properties['cmis:contentStreamId'];
  $content_stream = str_replace("store://", "", $content_stream);
  $file_size = filesize("/var/alfresco/alf_data/contentstore/" . $content_stream);

  if (!$file_size) {
    $data['message'] = t('This file is corrupted. Please try to upload it again', array(), array('context' => 'gofast'));
    print json_encode($data);
    exit;
  }

  if(!$no_answer){
    $data['response'] = "OK";
    print json_encode($data);
    exit;
  }
}

/**
 * This method logs infos/warnings/errors.
 */
function gofast_write_log($info = null, $criticity = "INFO", $file_name = "gofast.log", $request = NULL) {
  $execution_date = date("Y-m-d H:i:s");
  $file = fopen("/var/www/d7/sites/default/files/logs/" . $file_name, "a+");
  $request_data = null !== $request ? " - Request = " . $request : " - Request = " . $_SERVER['REQUEST_URI'];
  $informations = null !== $info ? " - Infos = " . $info : "";
  $crit = null !== $criticity ? " - Severity = " . $criticity : "";
  fwrite($file, $execution_date . $crit . $request_data . $informations . "\n");
  fclose($file);
}


/**
 * This method logs JS errors sent by the clients.
 */
function gofast_write_log_error_js() {
  global $user;
  $url = $_POST['url'];
  $message = $_POST['message'];
  $line = $_POST['line'];
  $useragent = $_POST['useragent'];
  $username = $user->name;
  $request = $_POST['request'];
  $info = " - URL = " . $url . " - User = " . $username . " - Message = " . $message . " - Line = " . $line . " - Useragent = " . $useragent;
  gofast_write_log($info, "ERROR", "error_js.log", $request);
  echo "Written";
  exit;
}

/*
 * API REST interface
 * Get and return informations about a given node
 * This is an authentified interface
 * @INCOMPLETE
 */
function gofast_api_node_informations(){
  $output = array();

  //Check if we are authentified
  global $user;
  if($user->uid == 0){
    return _gofast_api_not_authorized("No authentication method provided");
  }

  //Retrieve params
  $nid = $_GET['nid'];

  //Check if params was given
  if(!is_numeric($nid)){
    return _gofast_api_mandatory_parameter("nid");
  }

  //Try to load node
  $node = node_load($nid);
  if(!isset($node->nid)){
    return _gofast_api_not_found("Node not found");
  }

  if(!node_access('view', $node)){
    return _gofast_api_forbidden("Access denied");
  }

  //All check passed, let's retrieve the informations
  $data = array();

  //Retrieve data
  $node_ref = gofast_cmis_node_get_item_id($node);
  $node_versions = gofast_cmis_webservice_item_get_versions($node_ref);

  //Fill data
  $data = array(
    'ged' => array(
      'reference' => $node_ref,
      'versions'  => $node_versions,
    ),
  );

  $output['data'] = $data;
  return $output;
}

/*
 * Implements hook_comment_access
 */
function gofast_comment_view_access($op, $comment, $account){
    if($comment->cid == 2215){
        //print_r($comment);exit;
    }

    if($comment->field_comment_is_private[LANGUAGE_NONE][0]['value']){
        if($account->uid != $comment->uid){
            //Comment is private !
            return false;
        }
    }
    return true;
}

function gofast_get_audit_node($nid){

    $name = 'gofast_audit_node';
    $display_id = 'gofast_audit_node';
    $audit_view = views_embed_view($name, $display_id, $nid);
    $button = '<a id="audit_node_button" href=/gofast_audit/' . $nid . '><button class="btn btn-default btn-sm">' . t('Go to audit page' , array(), array('context' => 'gofast_audit'))    . '</button></a>';
    $render_data = $audit_view . $button;
    print $render_data;
    exit;
}

/*
 * Implements gofast_api_RESSOURCE_ACTION
 * @ressource node
 * @action node
 * @methods GET
 */
function gofast_api_node_node($params){
    switch($params['method']){
        case 'GET':
            gofast_api_get_node_node($params);
            break;
        case 'POST':
            gofast_api_post_node_node($params);
            break;
        default:
            gofast_api_not_implemented("This method");
            break;
    }
}

function gofast_api_get_node_node($params){
    //Check content type
    if(strpos($params['Content-Type'], "application/json") === FALSE){
        return gofast_api_not_implemented("This Content-Type");
    }

    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Check if we have a nid param
    if(isset($params['nid'])){
        $nid = $params['nid'];
    }else{
        gofast_api_mandatory_parameter("nid");
    }

    $node = node_load($nid);

    //Check if we retrieved a node
    if($node == null){
        gofast_api_internal_server_error("Unable to load node with nid : " . $nid);
    }

    //Check node access
    if(!node_access('view', $node)){
       gofast_api_forbidden("You don't have the permission to view this node");
    }

    $output = array(
        'nid' => $node->nid,
        'type' => $node->type,
        'title' => $node->title,
        'status' => $node->status,
        'uid' => $node->uid,
        'sticky' => $node->sticky,
        'language' => $node->language,
        'created' => $node->created,
        'updated' => $node->changed,
        'update_uid' => $node->revision_uid,
        'comment_count' => $node->comment_count,
        'last_comment_uid' => $node->last_comment_uid,
        'last_comment_timestamp' => $node->last_comment_uid,
        'last_comment_cid' => $node->cid,
        'alfresco_reference' => isset($node->reference) ? $node->reference : $node->field_folder_reference[LANGUAGE_NONE][0]['value']
    );

    gofast_api_success($output);
}

function gofast_api_node_links($params){
    //  print '<div class="breadcrumb-alt" id="breadcrumb-container-buton-mobile">';
    //Check content type
    if(strpos($params['Content-Type'], "application/json") === FALSE){
        return gofast_api_not_implemented("This Content-Type");
    }

    //Check authentication
    global $user;
   //   print '</div>';
    if($user->uid == 0){
       //gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Check if we have a nid param
    if(isset($params['nids'])){
        $nids = $params['nids'];
    }else{
        gofast_api_mandatory_parameter("nids");
    }

    //manage case in which we receive alfresco references ( used in old process )
    if(strpos($nids, "-") !== FALSE){
        $nids_array = explode(",", $nids);
       $nodes = array();
       foreach($nids_array as $ref){
            $nid = gofast_ajax_file_browser_get_nid_from_reference("workspace://SpacesStore/".$ref);
            $nodes[] = node_load($nid);
       }
    }else{
        $nids_array = explode(",", $nids);
        $nodes = node_load_multiple($nids_array);
    }

    foreach($nodes as $k => $node){
        if($node == null){
            unset($nodes[$k]);
        }
    }
    //Check if we retrieved a node
    if(count($nodes) == 0){
        gofast_api_internal_server_error("Unable to load node with nids : " . $nids);
    }

    //Check node access
    //TODO
    /*if(!node_access_multiple('view', $node)){
       gofast_api_forbidden("You don't have the permission to view this node");
    }*/
    $rand_id = rand(0,5000);

    if(count($nodes) > 1){
       if(!$params['dashboard']){
            $html_content = '<span data-nid="'.$rand_id.'"  onmouseover="$(this).parent().find(\'#wf_multiple_docs_\'+$(this).data(\'nid\')).css(\'display\', \'block\');" onmouseout="$(this).parent().find(\'#wf_multiple_docs_\'+$(this).data(\'nid\')).css(\'display\', \'none\');" id="wf_multiple_docs_'.$rand_id.'" style="display:none;position:absolute;z-index:999;margin-top:20px;"><div class="panel panel-primary"><div class="panel-heading">'.t("Associated documents", array(), array('context' => 'gofast:gofast_workflows'))."</div><div class='panel-body'>";
       }
       foreach($nodes as $node){

              // $link_node_html = "<span style='float: left; margin-top:-2px;color:#000000'></span><span style='max-width:180px;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;-o-text-overflow:ellipsis;display:inline-block;'>".l($mynode->title, 'node/' . $mynode->nid, array('attributes' => array("nid" => $mynode->nid, "class" => "ajax-navigate", "title" => $mynode->title),  'html' => TRUE))."</span>";
              if($params['dashboard']){
                $link_node_html = "<span style='float: left; margin-top:-2px;color:#000000'></span><span style='max-width:680px;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;-o-text-overflow:ellipsis;display:inline-block;'><span>". theme('node_title', array('node' => $node, "icon_size" => 24))."</span></span>";
                $link_node_html = str_replace('width="24"', 'width="16px"', $link_node_html);
                $link_node_html = str_replace('height="24"', 'height="16px"', $link_node_html);
                $html_content .= $link_node_html;
              }else{
                $link_node_html = "<span style='float: left; margin-top:-2px;color:#000000'></span><span style='max-width:680px;white-space: nowrap;overflow:hidden;text-overflow:ellipsis;-o-text-overflow:ellipsis;display:inline-block;'><span onClick='window.parent.parent.Gofast.processAjax(\"/node/".$node->nid."\");window.parent.parent.modalContentClose();'>". theme('node_title', array('node' => $node, "icon_size" => 24, 'link' => FALSE))."</span></span>";
                $link_node_html = str_replace('width="24"', 'width="16px"', $link_node_html);
                $link_node_html = str_replace('height="24"', 'height="16px"', $link_node_html);
                $html_content .= "<div class='deadline_box_in_rapide_todoliste' style='max-width:685px;max-height:22px;' title=\"".$node->title."\">".$link_node_html."</div>";
              }

       }
       if(!$params['dashboard']){
            $first_node = array_shift(array_values($nodes));
            $html_content .= '</div></div></span><div class="deadline_box_in_rapide_todoliste" style="cursor:pointer;max-width:685px;max-height:22px;" onmouseover="$(this).parent().find(\'#wf_multiple_docs_\'+$(this).data(\'nid\')).css(\'display\', \'block\');" onmouseout="$(this).parent().find(\'#wf_multiple_docs_\'+$(this).data(\'nid\')).css(\'display\', \'none\');" data-nid="'.$rand_id.'"></span><span style="float:left;">'.theme('node_title', array('node' => $first_node, "icon_size" => 24, 'link' => FALSE)).'</span><span class="fa fa-caret-down" title="Documents" style="float:left;margin-top:4px;margin-left:5px;position:absolute;"><span style="clear:both;"></span></div>';
       }
    }else{
       if($params['dashboard']){
           $node = array_shift(array_values($nodes));
           $link_node_html = "<span style='cursor:pointer;color:#337ab7;'>". theme('node_title', array('node' => $node, "icon_size" => 24))."</span>";
           $link_node_html = str_replace('width="24"', 'width="16px"', $link_node_html);
           $link_node_html = str_replace('height="24"', 'height="16px"', $link_node_html);
           $html_content = $link_node_html;
       }else{
           $node = array_shift(array_values($nodes));
           $link_node_html = "<span style='cursor:pointer;color:#337ab7;' onClick='window.parent.parent.Gofast.processAjax(\"/node/".$node->nid."\");window.parent.parent.modalContentClose();'>". theme('node_title', array('node' => $node, "icon_size" => 24, 'link' => FALSE))."</span>";
           $link_node_html = str_replace('width="24"', 'width="16px"', $link_node_html);
           $link_node_html = str_replace('height="24"', 'height="16px"', $link_node_html);
           $html_content = $link_node_html;
       }
    }

    $output = array(
        'content' => $html_content
    );

    gofast_api_success($output);
}

function gofast_api_post_node_node($params){
    //Check content type
    if(strpos($params['Content-Type'], "multipart/form-data") === FALSE){
        //return gofast_api_not_implemented("This Content-Type");
    }

    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Get params and check mandatory params
    $type = file_get_contents($_FILES['type']['tmp_name']);
    if(empty($type)){
        if(isset(json_decode(file_get_contents('php://input'), true)['type'])){
            $type = json_decode(file_get_contents('php://input'), true)['type'];
        }else if(isset($params['type'])){
            $type = $params['type'];
        }else{
            gofast_api_mandatory_parameter("type");
        }
    }

    $title = file_get_contents($_FILES['title']['tmp_name']);
    if(empty($title) && $type != "contact"){
        if(isset(json_decode(file_get_contents('php://input'), true)['title'])){
            $title = json_decode(file_get_contents('php://input'), true)['title'];
        }else if(isset($params['title'])){
            $title = $params['title'];
        }else{
            gofast_api_mandatory_parameter("title");
        }
    }

    if($type == "alfresco_item"){
        //We should have locations param
        $locations = file_get_contents($_FILES['locations']['tmp_name']);
        if(empty($locations)){
           if(isset(json_decode(file_get_contents('php://input'), true)['locations'])){
                $locations = json_decode(file_get_contents('php://input'), true)['locations'];
            }else if(isset($params['locations'])){
                $locations = json_decode($params['locations']);
            }else{
                gofast_api_mandatory_parameter("locations");
            }
        }

        //We should have file param OR template_gid param
        $file = file_get_contents($_FILES['file']['tmp_name']);

        //If we don't have a file in the 'file' field, try to get it from another one
        if(empty($file) && count($_FILES > 0)){
            $file = file_get_contents(reset($_FILES)['tmp_name']);
        }

        $template_nid = file_get_contents($_FILES['template_nid']['tmp_name']);
        if(empty($template_nid)){
           if(!isset(json_decode(file_get_contents('php://input'), true)['template_nid'])){
            }else{
                $template_nid = json_decode(file_get_contents('php://input'), true)['template_nid'];
            }
        }

        if(empty($file) && empty($template_nid)){
            gofast_api_mandatory_parameter("file or template_nid");
        }

        if(empty($file)){
            //No file provided, we need to get the wanted template
            $node_template = node_load($template_nid);

            //check if the param indicating to keep the template_tags is true or not
            $keep_tags = file_get_contents($_FILES['keep_tags']['tmp_name']);
            if(empty($keep_tags)){
               $keep_tags = json_decode(file_get_contents('php://input'), true)['keep_tags'];
            }

            //Check if we retrieved a node
            if($node_template == null){
                gofast_api_internal_server_error("Unable to load node with nid : " . $template_nid);
            }

            //Check node access
            if(!node_access('view', $node_template)){
               gofast_api_forbidden("You don't have the permission to view this node");
            }

            if($node_template->type !== "alfresco_item"){
                gofast_api_internal_server_error("Unable to retrieve associated content for given nid : " . $template_nid);
            }

            $file = gofast_cmis_item_get_content($node_template->field_reference[LANGUAGE_NONE][0]['value']);
            if(empty($file)){ //Check if we retrieved the content
                gofast_api_internal_server_error("Alfresco content not found for this node (Internal error)");
            }
        }

        //Parse locations if needed
        if(is_string($locations)){
            $locations = json_decode($locations, TRUE);
        }

        if(!is_array($locations) || count($locations) < 1){
            gofast_api_internal_server_error("Unable to parse given locations");
        }

        //Set our main location
        $main_location = reset($locations);

        //Now, we need to get spaces from these locations (and check the access)
        $spaces = array();
        foreach($locations as $location){
            //Try to get each gid corresponding to each location
            $gid = gofast_cmis_get_spaceid_by_webdav_folder($location, null);
            if($gid == NULL){
                //If we can't retrieve a gid, it probably means there is no such folder
                gofast_api_internal_server_error("Unable to find " . $location);
            }
            if(!og_user_access("node", $gid, "create alfresco_item content")){
                gofast_api_forbidden("Forbidden write permission to " . $location);
            }
            $spaces[$gid] = TRUE;
        }
        $spaces = array_keys($spaces);

        //Try to find file mimetype
        $extension = array_pop(explode('.', $title));
        $mimetype = gofast_cmis_get_mimetype_extension_match_array()[$extension];

        //Check if this document already exists
        $existing_document = gofast_cmis_item_get_by_path($main_location . "/" . $title);
        if(!empty($existing_document->properties['gofast:nid'])){
            $params['nid'] = $existing_document->properties['gofast:nid'];
            gofast_api_node_content($params);
        }

        //Upload the file to it's main location
        $main_folder_item = gofast_cmis_item_get_by_path($main_location);
        $inserted_item = gofast_cmis_item_content_insert($main_folder_item->id, $title, $file, $mimetype);
        $node_ref = $inserted_item->properties['alfcmis:nodeRef'];

        if (!isset($inserted_item->id)) {
            gofast_api_internal_server_error("Document upload has failed. Maybe a document with the same title exists in the same folder.");
        }

        //Inform replication system that we handle the node creation
        variable_set("cmis_creating_" . $node_ref, "true");

        //Document uploaded, create node programmatically
        $person = $user->name;
        $name = $title;
        $language = "und"; // !!!!!!
        $emplacement = $main_location;

        $node = gofast_cmis_create_node_programmatically($node_ref, $person, $name, false, $language, false, $gid, $emplacement, "");

        if($keep_tags == 'true'){
            //exclude Template tags
            if(count($node_template->field_tags) > 0){
                foreach($node_template->field_tags[LANGUAGE_NONE] as $key=>$array_term){
                    $term = taxonomy_term_load($array_term["tid"]);
                    if($term->name == "Template" || $term->name == "template"){
                        unset($node_template->field_tags[LANGUAGE_NONE][$key]);
                    }
                }
            }
            $node->field_tags =  $node_template->field_tags;
            $document_node = gofast_prepare_node_save_technically($node);
            $ruid = $document_node->revision_uid;
            node_save($document_node);
            db_update('node_revision')
              ->fields(array('uid' => $ruid))
              ->condition('nid', $document_node->nid)
              ->execute();
            }

        if(empty($node->nid)){
            gofast_api_internal_server_error("Node creation has failed");
        }

        //Multifile the document if needed
        if(count($locations > 1)){
            $_POST['technically_save'] = TRUE;
            $_POST['pk'] = $node->nid;
            $_POST['name'] = GOFAST_CMIS_LOCATIONS_FIELD;
            $_POST['value'] = $locations;
            $_POST['non_xeditable'] = TRUE;
            gofast_update_node_field();
        }

        //Success, return the node id
        gofast_api_success(array('nid' => $node->nid, 'link' => '/node/' . $node->nid, "date" => date("c")));

    }else if(in_array($type, array('article', 'forum'))){
        //We should have gids and body param
        $gids = file_get_contents($_FILES['gids']['tmp_name']);
        if(empty($gids)){
            gofast_api_mandatory_parameter("gids");
        }

        $body = file_get_contents($_FILES['body']['tmp_name']);
        if(empty($body)){
            gofast_api_mandatory_parameter("body");
        }

        //Parse gids if needed
        if(is_string($gids)){
            $gids = json_decode($gids, TRUE);
        }

        //Check each space (existence and rights
        foreach($gids as $gid){
            $space = node_load($gid);
            if($space == null ||! in_array($space->type, array("group", "organisation", "public", "extranet", "private_space"))){
                gofast_api_internal_server_error("Unable to find a space corresponding to given id: " . $gid);
            }
            if(!og_user_access("node", $gid, "create alfresco_item content")){
                gofast_api_forbidden("Forbidden write permission to " . $space->title . "/" . $gid);
            }
        }

        //Create the content
        module_load_include('inc', 'node', 'node.pages');
        global $user;

        $node = new stdClass();
        $node->title = $title;
        $node->type = $type;
        $node->language = $user->language;
        $node->options = array();
        $node->promote = NODE_NOT_PROMOTED;
        $node->module = 'node';
        $node->comment = COMMENT_NODE_OPEN;
        $node->status = NODE_PUBLISHED;
        $node->uid = $user->uid;
        if(in_array($type, array('forum'))){
            $node->taxonomy_forums[LANGUAGE_NONE][0]['tid'] = reset(taxonomy_get_term_by_name("General discussion", 'forums'))->vid;
        }
        $node->body[LANGUAGE_NONE][0]['value'] = $body;
        $node->body[LANGUAGE_NONE][0]['format'] = "full_html";
        node_save($node);
        foreach($gids as $gid){
            gofast_og_subscribe_node($gid, $node->nid);
        }

        //Ised to fire the rule during node creation
        //see JIRA 2775
        $node = node_load($node->nid, NULL, TRUE);
        rules_invoke_event('node_insert',$node);

        node_access_acquire_grants($node);

        gofast_api_success(array('nid' => $node->nid));

    }else if($type =='contact') {
        $firstname = rawurldecode(utf8_decode($params['firstname']));
        if(empty($firstname)) {
            gofast_api_mandatory_parameter("firstname");
        }
        $lastname = rawurldecode(utf8_decode($params['lastname']));
        if(empty($lastname)) {
            gofast_api_mandatory_parameter("lastname");
        }

        $email = rawurldecode(utf8_decode($params['email']));
        if(empty($email)) {
            gofast_api_mandatory_parameter("email");
        }

        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
             ->entityCondition('bundle', 'contact')
            ->fieldCondition('field_contact_email', 'value', $email );

        $results = $query->execute();
        if(count($results) > 0){
           gofast_api_internal_server_error("Contact with same email already exists");
        }

        $type = $params['type'];
        global $user;
        module_load_include('inc', 'node', 'node.pages');

        $node = new stdClass();
        $node->title = $lastname . ' ' . $firstname;
        $node->type = $type;
        $node->language = $user->language;
        $node->uid = $user->uid;
        $node->options = array();
        $node->module = 'contacts';
        $node->status = NODE_PUBLISHED;
        $node->field_contact_firstname[LANGUAGE_NONE][0]['value'] = $firstname;
        $node->field_contact_name[LANGUAGE_NONE][0]['value'] = $lastname;
        $node->field_contact_email[LANGUAGE_NONE][0]['value']= $email;
        $node->field_contact_phone[LANGUAGE_NONE][0]['value']=(!empty($params['phone'])) ? $params['phone'] : "";
        $node->field_contact_entity[LANGUAGE_NONE][0]['value']=(!empty($params['entity']) && $params['entity'] != "null") ? $params['entity'] : "";

        node_save($node);
        $node = node_load($node->nid, NULL, TRUE);
        rules_invoke_event('node_insert', $node);

        gofast_api_success(array('nid' => $node->nid, 'title' => $node->title));

    }else {
        gofast_api_not_implemented("This type");
    }
}

/*
 * Implements gofast_api_RESSOURCE_ACTION
 * @ressource node
 * @action metadata
 * @methods GET
 */
function gofast_api_node_metadata($params){
    switch($params['method']){
        case 'GET':
            gofast_api_get_node_metadata($params);
            break;
        case 'POST':
            gofast_api_post_node_metadata($params);
            break;
        case 'PATCH':
            gofast_api_patch_node_metadata($params);
            break;
        default:
            gofast_api_not_implemented("This method");
            break;
    }
}

function gofast_api_get_node_metadata($params){
    //Check content type
    if(strpos($params['Content-Type'], "application/json") === FALSE){
        return gofast_api_not_implemented("This Content-Type");
    }

    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Check if we have a nid param
    if(isset($params['nid'])){
        $nid = $params['nid'];
    }else{
        gofast_api_mandatory_parameter("nid");
    }
    cache_clear_all("field:node:$nid", 'cache_field');
    $node = node_load($nid, NULL, TRUE);

    //Check if we retrieved a node
    if($node == null){
        gofast_api_internal_server_error("Unable to load node with nid : " . $nid);
    }

    //Check node access
    if(!node_access('view', $node)){
       gofast_api_forbidden("You don't have the permission to view this node");
    }

    $output = array();
    foreach($node as $node_attr_key => $node_attr){
        if(strpos($node_attr_key, 'field_') === 0){
            if(!empty($node_attr[LANGUAGE_NONE])){
                foreach($node_attr[LANGUAGE_NONE] as &$value){
                    unset($value['format']);
                    unset($value['safe_value']);
                }
                if(array_key_exists('tid', $node_attr[LANGUAGE_NONE][0])){
                          foreach($node_attr[LANGUAGE_NONE] as $natrk => $natrv){
                            $term =  taxonomy_term_load($node_attr[LANGUAGE_NONE][$natrk]["tid"]);
                            $node_attr[LANGUAGE_NONE][$natrk]["term_name"] = $term->name;
                          }

                          $output[$node_attr_key] = $node_attr[LANGUAGE_NONE];
                }else{
                           $output[$node_attr_key] = $node_attr[LANGUAGE_NONE];
               }
            }
        }
    }
    gofast_api_success($output);
}

function gofast_api_post_node_metadata($params){
    //Check content type
    if(strpos($params['Content-Type'], "application/json") === FALSE){
        return gofast_api_not_implemented("This Content-Type");
    }

    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }
    //Check if we have a nid param
    if(isset($params['nid'])){
        $nid = $params['nid'];
    }else{
        gofast_api_mandatory_parameter("nid");
    }

    $node = node_load($nid);

    //Check if we retrieved a node
    if($node == null){
        gofast_api_internal_server_error("Unable to load node with nid : " . $nid);
    }

    //Check node access
    if(!node_access('update', $node)){
       gofast_api_forbidden("You don't have the permission to update this node");
    }

    //The list of allowed fields
    $allowed_fields = array(
        'field_filename',
        'field_category',
        'field_state',
        'field_emplacement',
        'field_target_link',
        'field_external_page_url',
        'field_date',
        'field_criticity',
        'field_document_author',
        'field_alias',
        'field_tags',
        'field_document_reference'
    );

    //Get edited fields
    $edited_fields = array();

    foreach($params as $key => $param){
        if(in_array($key, $allowed_fields, TRUE)){
            //This is a requested change, check integrity of the provided values
            if(is_numeric($param) || is_string($param)){
                //Integrity verified, register for change
                $edited_fields[$key] = $param;
                continue;
            }

            if(!is_array($param) || count($param) < 1){
                gofast_api_internal_server_error("Bad format for field " . $key);
            }

            foreach($param as $k => $value){
                if(!is_numeric($value) && !is_string($value)){
                    gofast_api_internal_server_error("Bad format for value ".$k." of field " . $key);
                }
            }

            //Integrity verified, register for change
            $edited_fields[$key] = $param;
        }
    }

    //Check if we do have a field to edit
    if(count($edited_fields) < 1){
        gofast_api_mandatory_parameter('field_XXX');
    }


    //Prepare and process the edition
    $output = array();
    foreach($edited_fields as $field => $value){
        //Switch into fields to alter data before sending them
        switch($field){
            case 'field_filename':
                $extension = pathinfo($node->field_filename[LANGUAGE_NONE][0]['value'], PATHINFO_EXTENSION);
                $new_title = $params['field_filename'] . "." . $extension;
                $node->title = $new_title;
                $node->field_filename[LANGUAGE_NONE][0]['value'] = $new_title;
                $node->field_filename[LANGUAGE_NONE][0]['safe_value'] = $new_title;
                node_save($node);

                $output = array(
                  "field_filename" => array(
                    "nameEnter" => $params['field_filename'],
                    "extension" => $extension,
                    "newName" => $new_title,
                    "status" => "OK",
                  )
                );
                gofast_api_success($output);
            break;
            case 'field_date':
                  global $user;
                  $target_format = $user->language === 'en' ? 'm/d/Y' : 'd/m/Y';
                  $_fdate = DateTime::createFromFormat('d/m/Y', $value);
                  $timestamp_date = $_fdate->getTimestamp();
                  $value = date($target_format, $timestamp_date );
            break;
            case 'field_tags':
                foreach($value as &$tid){
                    if(is_numeric($tid)){
                        //Load term
                        $term = taxonomy_term_load($tid);
                        if(empty($term)){
                            gofast_api_not_found("Term " . $tid . " not found.");
                        }

                        //Validate field against vocabulary
                        $upfield = strtoupper(str_replace('field_', '', $field));
                        if($term->vid != constant("GOFAST_VID_$upfield")){
                            gofast_api_internal_server_error("tid " . $tid ." not matching the given field");
                        }
                        $tid = $term->name;
                    }
                }
            break;
            case 'field_category':
            case 'field_state':
            case 'field_criticity':
                if(is_numeric($value)){
                    //Load term
                    $term = taxonomy_term_load($value);
                    if(empty($term)){
                        gofast_api_not_found("Term " . $value . " not found.");
                    }

                    //Validate field against vocabulary
                    $upfield = strtoupper(str_replace('field_', '', $field));
                    if($term->vid != constant("GOFAST_VID_$upfield")){
                        gofast_api_internal_server_error("tid " . $value ." not matching the given field");
                    }
                    $value = $term->name;
                }
            break;
            case 'field_target_link':
                $value = json_decode($value);
            break;
            case 'field_external_page_url':
                 $value = json_decode($value);
            break;
        }

        $upfield = strtoupper(str_replace('field_', '', $field));
        $_POST['vid'] = constant("GOFAST_VID_$upfield");
        $_POST['pk'] = $node->nid;
        $_POST['name'] = $field;
        $_POST['value'] = $value;
        $_POST['non_xeditable'] = TRUE;
        $output[$field] = json_decode(gofast_update_node_field(), TRUE);
    }

    gofast_api_success($output);
}

function gofast_api_patch_node_metadata($params){
    //Check content type
    if(strpos($params['Content-Type'], "application/json") === FALSE){
        return gofast_api_not_implemented("This Content-Type");
    }

    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }
    //Check if we have a nid param
    if(isset($params['nid'])){
        $nid = $params['nid'];
    }else{
        gofast_api_mandatory_parameter("nid");
    }

    $node = node_load($nid);

    //Check if we retrieved a node
    if($node == null){
        gofast_api_internal_server_error("Unable to load node with nid : " . $nid);
    }

    //Check node access
    if(!node_access('update', $node)){
       gofast_api_forbidden("You don't have the permission to update this node");
    }

    //The list of allowed fields
    $allowed_fields = array(
        'field_target_link',
        'field_external_page_url',
        'field_tags'
    );

    //Get edited fields
    $edited_fields = array();

    foreach($params as $key => $param){
        if(in_array($key, $allowed_fields, TRUE)){
            //This is a requested change, check integrity of the provided values
            if(is_numeric($param) || is_string($param)){
                //Integrity verified, register for change
                $edited_fields[$key] = $param;
                continue;
            }

            if(!is_array($param) || count($param) < 1){
                gofast_api_internal_server_error("Bad format for field " . $key);
            }

            foreach($param as $k => $value){
                if(!is_numeric($value) && !is_string($value)){
                    gofast_api_internal_server_error("Bad format for value ".$k." of field " . $key);
                }
            }

            //Integrity verified, register for change
            $edited_fields[$key] = $param;
        }
    }

    //Check if we do have a field to edit
    if(count($edited_fields) < 1){
        gofast_api_mandatory_parameter('field_XXX');
    }


    //Prepare and process the edition
    $output = array();
    foreach($edited_fields as $field => $value){
        //Switch into fields to alter data before sending them
        switch($field){
            case 'field_tags':
                foreach($value as &$tid){
                    if(is_numeric($tid)){
                        //Load term
                        $term = taxonomy_term_load($tid);
                        if(empty($term)){
                            gofast_api_not_found("Term " . $tid . " not found.");
                        }

                        //Validate field against vocabulary
                        $upfield = strtoupper(str_replace('field_', '', $field));
                        if($term->vid != constant("GOFAST_VID_$upfield")){
                            gofast_api_internal_server_error("tid " . $tid ." not matching the given field");
                        }
                        $tid = $term->name;
                    }
                }
            break;
            case 'field_category':
            case 'field_state':
            case 'field_criticity':
                if(is_numeric($value)){
                    //Load term
                    $term = taxonomy_term_load($value);
                    if(empty($term)){
                        gofast_api_not_found("Term " . $value . " not found.");
                    }

                    //Validate field against vocabulary
                    $upfield = strtoupper(str_replace('field_', '', $field));
                    if($term->vid != constant("GOFAST_VID_$upfield")){
                        gofast_api_internal_server_error("tid " . $value ." not matching the given field");
                    }
                    $value = $term->name;
                }
            break;
        }

        //We have to retrieve and merge the old value with the new ones
        $current_values = array();
        foreach($node->$field["und"] as $old_value){
            if(is_array($old_value)){
                $current_values[] = array_values($old_value)[0];
            }else{
                $current_values[] = $old_value;
            }
        }

        foreach($current_values as &$tid){
            if(is_numeric($tid)){
                //Load term
                $term = taxonomy_term_load($tid);
                if(empty($term)){
                    gofast_api_not_found("Term " . $tid . " not found.");
                }

                //Validate field against vocabulary
                $upfield = strtoupper(str_replace('field_', '', $field));
                if($term->vid != constant("GOFAST_VID_$upfield")){
                    gofast_api_internal_server_error("tid " . $tid ." not matching the given field");
                }
                $tid = $term->name;
            }
        }

        $final_values = array_unique(array_merge($current_values, $value));

        $upfield = strtoupper(str_replace('field_', '', $field));
        $_POST['vid'] = constant("GOFAST_VID_$upfield");
        $_POST['pk'] = $node->nid;
        $_POST['name'] = $field;
        $_POST['value'] = $final_values;
        $_POST['non_xeditable'] = TRUE;
        $output[$field] = json_decode(gofast_update_node_field(), TRUE);
    }

    gofast_api_success($output);
}

/*
 * Implements gofast_api_RESSOURCE_ACTION
 * @ressource node
 * @action autocomplete
 * @methods GET
 */
function gofast_api_node_autocomplete($params){
    switch($params['method']){
        case 'GET':
            gofast_api_get_node_autocomplete($params);
            break;
        default:
            gofast_api_not_implemented("This method");
            break;
    }
}

function gofast_api_get_node_autocomplete($params){
    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Check if we have a str param
    if(isset($params['str'])){
        $str = $params['str'];
    }else{
        gofast_api_mandatory_parameter("str");
    }

    //Check if we have a bundles param
    if(isset($params['bundles'])){
        $bundles = explode(',', $params['bundles']);
    }

    if(strlen($str) < 1){
        gofast_api_success(array());
    }

    $options_ac_user = array(
      'format_key_callback' => 'gofast_node_api_autocomplete_format_key',
      'format_value_callback' => 'gofast_node_api_autocomplete_format_value',
      'bundle' => !empty($bundles) ? $bundles : array("alfresco_item"),
      'fields' => array(),
      'properties' => array(),
    );

    $output = gofast_ac_query($str, 'node', $options_ac_user);

    gofast_api_success($output);
}

function gofast_node_api_autocomplete_format_key($entity_type, $entity) {
    return $entity->nid;
}

function gofast_node_api_autocomplete_format_value($entity_type, $entity) {
    $node_icon = str_replace('<span>', '<span style="display:none;">', theme('node_title', array('node' => $entity, 'link' => FALSE)));
    $node_icon = gofast_mail_queue_fa_png($node_icon);
    $node_icon = "<img" . preg_replace('/(.*)<img(.*)\/>(.*)/sm', '\2', $node_icon) . "/>";

    return array('nid' => $entity->nid, 'title' => $entity->title, 'reference' => $entity->reference, 'icon' => $node_icon);
}

function gofast_tour_visited_pages() {
  global $user;
  $full_user = user_load($user->uid);
  if(isset($_POST["pages"]) && ! empty($_POST["pages"])) {
    if(!isset($full_user->data["gofast_tour"])) $full_user->data["gofast_tour"] = array();
    $full_user->data["gofast_tour"]["visitedPages"] = $_POST["pages"];
    user_save($full_user);
  }
  print json_encode($full_user->data["gofast_tour"]["visitedPages"]);
  exit;
}

function gofast_tour_visited_pages_reset() {
  global $user;
  $full_user = user_load($user->uid);
  if(!isset($full_user->data["gofast_tour"])) $full_user->data["gofast_tour"] = array();
  $full_user->data["gofast_tour"]["visitedPages"] = array();
  user_save($full_user);
  exit;
}

function gofast_flush_caches(){
    variable_set('ckeditor_timestamp', time());
}

function gofast_js_alter(&$js){
    $js["sites/all/modules/ckeditor/includes/ckeditor.utils.js"]['version'] = variable_get('ckeditor_timestamp', time());
    $js["sites/all/libraries/ckeditor/ckeditor.js"]['version'] = variable_get('ckeditor_timestamp', time());
    $js["sites/all/modules/ckeditor/ckeditor.styles.js"]['version'] = variable_get('ckeditor_timestamp', time());
    $js["sites/all/modules/ckeditor/ckeditor.config.js"]['version'] = variable_get('ckeditor_timestamp', time());
//    print '<pre>'; print_r($js); exit;
}

function gofast_get_is_confidential_from_nid()
{
  $nid = $_POST["nid"];
  $is_internal = false;

  if (!empty($nid)) {
    $node = node_load($nid);
    $is_internal = isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Confidential Data" ? TRUE : FALSE;
  }
  print json_encode(array("status" => "OK", "value" => $is_internal));
  exit;
}

function gofast_get_is_internal_from_nid()
{
  $nid = $_POST["nid"];
  $is_internal = false;

  if (!empty($nid)) {
    $node = node_load($nid);
    $is_internal = isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Internal Distribution" ? TRUE : FALSE;
  }
  print json_encode(array("status" => "OK", "value" => $is_internal));
  exit;
}


