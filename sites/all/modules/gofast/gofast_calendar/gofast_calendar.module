<?php

function gofast_calendar_enable() {
  $gofast_og_weight = db_select('system')
          ->fields('system', array('weight'))
          ->condition('name', 'gofast_og', '=')
          ->execute()
          ->fetchField();

  db_update('system')
          ->fields(array('weight' => $gofast_og_weight + 1))
          ->condition('name', 'gofast_calendar')
          ->execute();

}

function gofast_calendar_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'article_node_form' || $form_id === 'conference_node_form') {
    $queryStrings = drupal_get_query_parameters();
    if (!empty($queryStrings) && isset($queryStrings['deadline'])) {
      $form['field_date'][LANGUAGE_NONE][0]['#default_value']['value'] = $queryStrings['deadline']." 09:00";
      $form['field_end_date'][LANGUAGE_NONE][0]['#default_value']['value'] = $queryStrings['deadline']." 10:00";
    }
    if (!empty($queryStrings) && isset($queryStrings['gid'])) {
        //print_r("<pre>");print_r($form["field_existing_participants"][LANGUAGE_NONE][0]["target_id"]['#default_value']);exit;
      //$form["field_existing_participants"][LANGUAGE_NONE][0]["target_id"]['#default_value'] = $queryStrings['gid'];
      // $form[GOFAST_OG_CONTENT_MEMBERSHIP_FIELD][LANGUAGE_NONE][0]['default']['#default_value'] = $queryStrings['gid'];
      // print_r("<pre>");print_r($form[GOFAST_OG_CONTENT_MEMBERSHIP_FIELD][LANGUAGE_NONE][0]['default']);exit;
    }
  }
}

/**
 * Implements hook_theme
 */
function gofast_calendar_theme(){
  $themes = array();

  $themes['gofast_calendar_popover_description'] = array(
    'template' => 'tpl/gofast-calendar-popover-description'
  );

  return $themes;
}


/*
 * Implements hook_views_pre_view
 * Alter the calendar query to make it able to add the subspaces events in the calendar
 */
function gofast_calendar_views_query_alter(&$view, &$query){
  switch($view->name){
    case 'calendar':
      global $user;
      //We retrieve the filters of the query
      $filters = $view->args;
      if(gofast_og_is_user_private_space(node_load($filters[1])) || $view->current_display == "page_4"){
        //This is a private space, we retrieve the user spaces
        $subspaces = array_keys(gofast_og_get_user_visible_spaces($user));
      }
      else{
        //This is a space, we retrieve the space childrens and fetch into them, verifying rights
        $subspaces = gofast_og_get_children($filters[1], TRUE, FALSE, TRUE);
        foreach($subspaces as $k => $gid){
          if(og_get_membership('node', $gid, 'user', $user->uid) == FALSE){ //Check membership
            unset($subspaces[$k]);
          }
        }
      }

      $subspaces[] = $filters[1];
      $subspaces = array_values($subspaces);
      $query->where[2]['conditions'][1]['field'] = "og_membership.gid";
      $query->where[2]['conditions'][1]['operator'] = "IN";
      $query->where[2]['conditions'][1]['value'] = $subspaces;

      //report period filter on subconditions
      $query->where[2]['conditions'][] = $query->where['date']['conditions'][0];

      unset($query->where[0]);
    case 'upcoming':
        if($view->current_display == "upcoming_meetings"){
            global $user;
            $current_user = user_load($user->uid);
            $pid = $current_user->og_private[LANGUAGE_NONE][0]['target_id'];

            $query->where[1]['conditions'][3]['field'] = "og_membership.gid";
            $query->where[1]['conditions'][3]['operator'] = "IN";
            $query->where[1]['conditions'][3]['value'] = array($pid);
        }
    break;
  }
}

/*
 * Implements hook_views_pre_render
 * Alter the calendar data to format the date
 */
function gofast_calendar_views_post_execute(&$view){
  if($view->name === "calendar"){
    foreach($view->result as $k => $result){
      global $user;
      $node_type = $view->result[$k]->_field_data["nid"]["entity"]->type;
      if($node_type == "conference"){
            $old_date = $view->result[$k]->field_field_date[0]['raw']['value'];
            $new_date = format_date(strtotime(gofast_change_time_zone($old_date, 'UTC', $user->timezone)), "short");
            $old_end_date = $view->result[$k]->_field_data["nid"]["entity"]->field_end_date[LANGUAGE_NONE][0]['value'];
            $new_end_date = format_date(strtotime(gofast_change_time_zone($old_end_date, 'UTC', $user->timezone)), "short");
            $view->result[$k]->field_field_date[0]['rendered']['#markup'] = "<span class='date-display-single' property='dc:date' datatype='xsd:dateTime'>".$new_date."  < > ".$new_end_date."</span>";
      }else{
           $date_format = $user->language === 'fr' ? 'd/m/Y H:i' :  'm/d/Y h:i';
           $new_date = date($date_format, strtotime($view->result[$k]->field_field_date[0]['raw']['value']));
           $view->result[$k]->field_field_date[0]['rendered']['#markup'] = "<span class='date-display-single' property='dc:date' datatype='xsd:dateTime'>".$new_date."</span>";
      }
    }
  }
}
// Add a css to fix the width of cell calendar
drupal_add_css(drupal_get_path('module', 'gofast_calendar') . "/css/gofast_calendar.css");
drupal_add_css(drupal_get_path('module', 'gofast_calendar') . "/css/calendar_multiday.css");

function gofast_calendar_init(){
  drupal_add_js(drupal_get_path('module', 'gofast_calendar') . "/js/gofast_calendar.js");
}

function gofast_calendar_menu(){
  $item = array();

  $item['calendar/get_calendar'] = array(
    'page callback' => 'gofast_calendar_get_calendar',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  
  $item['calendar/synchronize'] = array(
    'page callback' => 'gofast_bluemind_trigger_sync',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  $item['calendar/get_last_sync'] = array(
    'page callback' => 'gofast_bluemind_get_last_sync',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );


  return $item;
}


function gofast_calendar_get_calendar(){
  $nid = $_GET['nid'];
  $fetchInfo = $_GET['fetchInfo'];

  header('Content-Type: application/json');

  // SQL request to get all events
  $events = gofast_calendar_get_events_query($nid, $fetchInfo);

  print json_encode($events);
  exit;
}

/**
 * Separate handler to get conferences and tasks query e. g. for calendar.
 */
function gofast_calendar_get_conferences_and_tasks_query($nid, $start_date, $end_date, $is_private, $available_gids = [], $filters = []) {
  global $user;
  $events = [];

  // Alfresco_item / Kanban task request
  $og_membership_subquery = new EntityFieldQuery();
  if ($is_private) {
    $og_membership_subquery = db_select('og_membership', 'og_m')
    ->fields('og_m', array('etid'))
    ->condition('gid', $available_gids, 'IN');
  } else {
    $og_membership_subquery = db_select('og_membership', 'og_m')
    ->fields('og_m', array('etid'))
    ->condition('gid', $nid, '=');
  }

  $og_membership_subquery->join('node', 'n', 'og_m.etid = n.nid');

  $og_membership_subquery->condition('fd.field_date_value', $start_date, ">");
  $og_membership_subquery->condition('fd.field_date_value', $end_date, "<");
  $og_membership_subquery->condition('n.status', 1);
  if (!empty($filters)) {
    foreach ($filters as $filter) {
      $og_membership_subquery->condition($filter["field"], $filter["value"]);
    }
  }
  $og_membership_subquery->join('field_data_field_date', 'fd', 'og_m.etid = fd.entity_id');
  $result = $og_membership_subquery->execute()->fetchCol();


  if (!empty($result)) {
    $nodes = node_load_multiple($result);

    foreach ($nodes as $node) {
      $myuser = gofast_get_user_by_id($node->uid);
      $userFormatted = [];
      $userFormatted['uid'] = $myuser->uid;
      $userFormatted['picture'] = gofast_get_url_picture_by_id($myuser->picture);
      $userFormatted['firstname'] = $myuser->firstname;
      $userFormatted['lastname'] = $myuser->lastname;

      $field_date = $node->field_date[LANGUAGE_NONE][0]['value'];
      $field_date = format_date(strtotime(gofast_change_time_zone($field_date, 'UTC', $user->timezone)) , 'custom', 'Y-m-d H:i:s', date_default_timezone_get());
      $node->body[LANGUAGE_NONE][0]["value"] = substr(strip_tags($node->body[LANGUAGE_NONE][0]["value"]), 0, 250);

      if($node->type == 'conference'){
        $field_end_date = $node->field_end_date[LANGUAGE_NONE][0]['value'];
        $field_end_date = format_date(strtotime(gofast_change_time_zone($field_end_date, 'UTC', $user->timezone)) , 'custom', 'Y-m-d H:i:s', date_default_timezone_get());       

        // Get the event source
        $ext_source_query = db_select('field_data_field_external_conference_source', 'f');
        $ext_source_query->fields('f', array('field_external_conference_source_value'));
        $ext_source_query->condition('f.entity_id', $node->nid);
        $ext_source_result = $ext_source_query->execute()->fetchCol();
        if(!empty($ext_source_result)){
          $ext_source_result = json_decode($ext_source_result[0]);
        }
        $external_conference_source = $ext_source_result;

        // Get the event all day status
        $all_day_query = db_select('field_data_field_conference_is_all_day', 'f');
        $all_day_query->fields('f', array('field_conference_is_all_day_value'));
        $all_day_query->condition('f.entity_id', $node->nid);
        $all_day_result = $all_day_query->execute()->fetchCol();

        if(!empty($all_day_result)){
          $is_all_day = $all_day_result[0] == 1 ? true : false;
        }  

        $hasCustomIcon = false;
        $color = "#fff";
        if(!empty($external_conference_source)){
          $hasCustomIcon = true;
          $icon = $external_conference_source->icon;
          $color = $external_conference_source->color;
        }else{
          $icon = "fas fa-calendar-alt";
        }
        $events[] = array(
          'title' => $node->title,
          'nid' => $node->nid,
          'start' => $field_date,
          'end' => $field_end_date,
          'user' => $userFormatted,
          'description' =>  $node->body,
          'type' => $node->type,
          'icon' =>isset($icon) ? $icon : TRUE,
          'className' => "",
          'allDay' => $is_all_day,
          'hasCustomIcon' => $hasCustomIcon,
          'color' => $color,
        );  
      } else {
        $icon = gofast_node_get_icon($node);
        $event = array(
          'title' => $node->title,
          'nid' => $node->nid,
          'start' => $field_date,
          'user' => $userFormatted,
          'description' => $node->body,
          'type' => $node->type,
          'icon' => $icon,
          'className' => "",
          'allDay' => TRUE
        );
        if (!empty($node->field_state)) {
          $task_details = [];
          $task_status_term = taxonomy_term_load($node->field_state[LANGUAGE_NONE][0]['tid']);
          $task_details["state"] = $task_status_term->name;
          if ($task_details["state"] == "Done") {
            $task_details["localized_state_indicator"] = "success";
          }
          if ($task_details["state"] == "To Do") {
            $task_details["localized_state_indicator"] = "danger";
          }
          $task_details["localized_state"] = i18n_taxonomy_localize_terms($task_status_term)->name;
          $event["task_details"] = $task_details;
        }
        $events[] = $event;
      }
    }
  }
  return $events;
}

/**
 * Get all events for calendar (conferences, tasks, deadlines, workflows).
 */
function gofast_calendar_get_events_query($nid, $fetch_info, $filters = []){
  global $user;
  $current_user = user_load($user->uid);
  
  if (isset($current_user->{GOFAST_OG_USER_PRIVATE_SPACE}[LANGUAGE_NONE][0]['target_id']) && $current_user->{GOFAST_OG_USER_PRIVATE_SPACE}[LANGUAGE_NONE][0]['target_id'] == $nid) {
    $is_private = TRUE;
  } else {
    $is_private = FALSE;
  }
  $fetch_info_start_date = $fetch_info['startStr'];
  $fetch_info_end_date = $fetch_info['endStr'];

  $start_date = date('Y-m-d H:i:s', strtotime($fetch_info_start_date));
  $end_date = date('Y-m-d H:i:s', strtotime($fetch_info_end_date));

  $available_gids = [];
  if ($is_private) {
    $available_gids = gofast_og_get_spaces_by_user($user->uid);
  }

  $events = [];
  $events = [...$events, ...gofast_calendar_get_conferences_and_tasks_query($nid, $start_date, $end_date, $is_private, $available_gids, $filters)];

  //Kanban ToDO tasks
  $todo_subquery = new EntityFieldQuery();
  if ($is_private) {
    $todo_subquery = db_select('gofast_kanban_checklist_item', 'ci')
    ->fields('ci', array('label', 'deadline', 'uid'))
    ->fields('c', array('task_nid'))
    ->fields('n', array('title'))
    ->condition('ogm.gid', $available_gids, 'IN')
    ->condition('ci.uid', $user->uid, '=');
  } else {
    $todo_subquery = db_select('gofast_kanban_checklist_item', 'ci')
    ->fields('ci', array('label', 'deadline', 'uid'))
    ->fields('c', array('task_nid'))
    ->fields('n', array('title'))
    ->condition('ogm.gid', $nid, '=');
  }

  $todo_subquery->join('gofast_kanban_checklist', 'c', 'ci.cid = c.cid');
  $todo_subquery->join('node', 'n', 'c.task_nid = n.nid');
  $todo_subquery->join('og_membership', 'ogm', 'n.nid = ogm.etid');

  $todo_subquery->condition('ci.deadline', strtotime($start_date), ">");
  $todo_subquery->condition('ci.deadline', strtotime($end_date), "<");
  $todo_subquery->condition('n.status', 1);
  
  $result = $todo_subquery->execute()->fetchAll();
  
  if (!empty($result)) {
    foreach ($result as $todo) {
      $myuser = $todo->uid ? gofast_get_user_by_id($todo->uid) : null;
      $field_date = $todo->deadline;
      $field_date = format_date(strtotime(gofast_change_time_zone(format_date($field_date, 'custom', 'Y-m-d H:i:s', date_default_timezone_get()), 'UTC', $user->timezone)) , 'custom', 'Y-m-d H:i:s', date_default_timezone_get());
      
      if($myuser){
        $userFormatted = [];
        $userFormatted['uid'] = $myuser->uid;
        $userFormatted['picture'] = gofast_get_url_picture_by_id($myuser->picture);
        $userFormatted['firstname'] = $myuser->firstname;
        $userFormatted['lastname'] = $myuser->lastname;
        $userFormatted['assigned_to'] = TRUE;
      }else{
        $userFormatted = [];
        $userFormatted['uid'] = 0;
        $userFormatted['picture'] = gofast_get_url_picture_by_id(0);
        $userFormatted['firstname'] = "";
        $userFormatted['lastname'] = "";
        $userFormatted['assigned_to'] = TRUE;
      }
      
      $icon = "far fa-flag";
      $events[] = array(
        'title' => $todo->label,
        'nid' => $todo->task_nid,
        'start' => $field_date,
        'user' => $userFormatted,
        'description' => [ //Fake how Drupal fields are constructed
          'und' => [ 
            [
              'value' => $todo->title, 
            ]
          ]
        ],
        'type' => "kanban_todo",
        'icon' => $icon,
        'className' => "",
        'allDay' => TRUE,
      );
    }
  }
  
  $task_ids = array_keys(gofast_workflows_get_list_actives_tasks(user_uid: $current_user->uid));
  if(!empty($task_ids)){
    $user_tasks_infos = gofast_workflows_get_user_tasks_infos($task_ids);
    $tasks = json_decode($user_tasks_infos, true);
    $processes = [];
    foreach($tasks["response"]["content"] as $case){
      $processes[$case["rootCaseId"]] = $case;
    }
    $events = array_merge($events, gofast_calender_get_calendar_events_from_tasks($processes, $nid));
  }
  return $events;
}

/**
 * Format tasks data to retrieve only wanted values
 */
function gofast_calendar_get_tasks_data($tasks){
  $data = [];
  foreach($tasks as $task){
    $contents = $task["processCurrent"]["contents"];
    $data[$task["rootCaseId"]]["endDate"] = $task["processCurrent"]["end_date"];
    $data[$task["rootCaseId"]]["title"] = $task["processCurrent"]["title"];
    foreach($contents as $content) {
      if($content["type"] == "node"){
        $data[$task["rootCaseId"]]["nids"][] = $content["content_value"];
      }
      if($content["type"] == "user"){
        $task_data = json_decode($content["content_value"], true);
        if($task_data[5] == null){
          continue;
        }
        $data[$task["rootCaseId"]]["tasks"][$content["persistenceId"]]["username"] = $task_data[0];
        $data[$task["rootCaseId"]]["tasks"][$content["persistenceId"]]["task_type"] = $task_data[1];
        $data[$task["rootCaseId"]]["tasks"][$content["persistenceId"]]["endDate"] = $task_data[5];
      }
    }
  }

  return $data;
}

/**
 * Funtion used to get events from user's tasks in a specific space
 */
function gofast_calender_get_calendar_events_from_tasks($tasks, $gid){
  global $user;
  $events = [];
  $current_user = user_load($user->uid);
  $datas = gofast_calendar_get_tasks_data($tasks);
  // loop through each task
  foreach($datas as $data){
    $label = $data["title"];
    
    $label = t($label, array(), array('context' => "gofast:gofast_workflows"));
    $userFormatted = [];
    $userFormatted['uid'] = $current_user->uid;
    $userFormatted['picture'] = gofast_get_url_picture_by_id($current_user->picture->fid);
    $userFormatted['firstname'] = gofast_user_display_name($current_user);
    $userFormatted['lastname'] = "";
    $userFormatted['assigned_to'] = TRUE;
    foreach($data["nids"] as $nid){
      $node = node_load($nid);
      // Make an event only if the document is in the space
      if(gofast_is_node_inside_space($node, $gid) || gofast_og_get_user_private_space(null, false) == $gid){
        $events[] = array(
          "title" => $node->title,
          "nid" => $nid,
          "start" => $data["endDate"],
          "user" => $userFormatted,
          'description' => [ //Fake how Drupal fields are constructed
            'und' => [ 
              [
                'value' => $label,
              ]
            ]
          ],
          "tooltip_description" => t("You have tasks to perform on this document for the process \"@process_name\"", array("@task_type" => $label, "@process_name" => $data["title"]), array("context" => "gofast:gofast_workflows")),
          "type" => $node->type,
          "icon" => gofast_node_get_icon($node),
          "className" => "",
          "allDay" => true,
        );
        foreach($data["tasks"] as $task){
          $translated_task_type = gofast_workflows_get_task_type_label($task["task_type"]);
          $events[] = array(
            "title" => $node->title,
            "nid" => $nid,
            "start" => $task["endDate"],
            "user" => $userFormatted,
            'description' => [ //Fake how Drupal fields are constructed
              'und' => [ 
                [
                  'value' => $translated_task_type,
                ]
              ]
            ],
            "tooltip_description" => t("You have a \"@task_type\" task to perform on this document for the process \"@process_name\"", array("@task_type" => $translated_task_type, "@process_name" => $data["title"]), array("context" => "gofast:gofast_workflows")),
            "type" => $node->type,
            "icon" => gofast_node_get_icon($node),
            "className" => "",
            "allDay" => true,
          );
        }
      }
    }
  }
  return $events;
}
