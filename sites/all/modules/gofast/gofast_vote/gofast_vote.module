<?php

function gofast_vote_enable() {
  $vote_up_down_weight = db_select('system')
          ->fields('system', array('weight'))
          ->condition('name', 'vote_up_down', '=')
          ->execute()
          ->fetchField();

  db_update('system')
          ->fields(array('weight' => $vote_up_down_weight + 1))
          ->condition('name', 'gofast_vote')
          ->execute();

}

function gofast_vote_menu() {
  $items = array();


  $items['vote/%/%/%/%/%/%'] = array(
    'title'            => 'Vote',
    'page callback'    => 'gofast_vote_vote',
    'page arguments'   => array(1, 2, 3, 4, 5, 6),
    'access callback'  => 'vud_access_callback',
    'access arguments' => array('access comments', 1, 2, 3, 4),
    'type'             => MENU_CALLBACK
  );

  $items['votereset/%/%/%/%/%/%'] = array(
    'title'            => 'Reset vote',
    'page callback'    => 'gofast_vote_reset',
    'page arguments'   => array(1, 2, 3, 4, 5, 6),
    'access callback'  => 'vud_access_callback',
    'access arguments' => array('access comments', 1, 2, 3, 4),
    'type'             => MENU_CALLBACK
  );

  return $items;
}

function gofast_vote_theme() {
  return array(
    'vud_widget' => array(
      'function'  => 'gofast_vote_widget_proxy',
      'variables' => array('entity_id' => NULL, 'type' => NULL, 'tag' => NULL, 'widget_theme' => NULL, 'readonly' => NULL, 'widget_message_code' => NULL),
    )
  );
}

function gofast_vote_widget_proxy($variables) {
  global $user;

  $plugin = vud_widget_get($variables['widget_theme']);
  if (empty($plugin) || empty($plugin['widget template'])) {
    return;
  }

  $variables += array(
    'widget_message_code' => VUD_WIDGET_MESSAGE_ERROR,
    'readonly' => FALSE,
    'plugin' => $plugin,
    'tag' => variable_get('vud_tag', 'vote'),
    'id' => 'widget-' . $variables['type'] . '-' . $variables['entity_id'],
    'link_class_up' => 'vud-link-up',
    'link_class_down' => 'vud-link-down',
    'link_class_reset' => 'vud-link-reset',

    'link_up' => '',
    'link_down' => '',

    'class_up' => 'btn-success up-active',
    'class_down' => 'btn-danger down-active',
    'class_reset' => 'reset-inactive',

    'show_links' => FALSE,
    'show_reset' => FALSE,
    'show_up_as_link' => FALSE,
    'show_down_as_link' => FALSE,

    'reset_long_text' => t('Reset your vote', array(), array('context' => 'gofast:gofast_vote')),
    'reset_short_text' => t('(reset)', array(), array('context' => 'gofast:gofast_vote')),
  );

  $type = $variables['type'];
  $entity_id = $variables['entity_id'];
  $tag = $variables['tag'];
  $widget_theme = $variables['widget_theme'];
  $readonly = $variables['readonly'];

  drupal_add_library('system', 'drupal.ajax');
  ctools_add_js('ajax-responder');
  ctools_include('ajax');
  // TODO: Move this to vud-comment.
  if ($type == 'comment') {
    drupal_add_css(drupal_get_path('module', 'vud_comment') . '/vud_comment.css');
  }

  // Search and add media files.
  vud_add_files('css', $plugin);
  vud_add_files('js', $plugin);

  $user_vote =  0;

  // Define access per operation, for example when the vote up operation is
  // active this means the down operation should be allowed, as the up vote was
  // already.
  $up_access = $down_access = $reset_access = FALSE;
  if (user_access('use vote up/down')) {
    $criteria = array(
      'entity_type' => $type,
      'entity_id' => $entity_id,
      'tag' => $variables['tag'],
    ) + votingapi_current_user_identifier();
    $previous_vote = votingapi_select_single_vote_value($criteria);

    $user_vote = isset($previous_vote) ? $previous_vote : 0;

    if (!$readonly) {
      if ($user_vote < 0) {
        $up_access = true;
        $reset_access = true;
      } elseif ($user_vote > 0) {
        $down_access = true;
        $reset_access = true;
      } else {
        $up_access = true;
        $down_access = true;
      }



      if (!$up_access && !$down_access) {
        // Although implementing modules have requested a not readonly widget,
        // we prevent access.
        $readonly = $variables['readonly'] = TRUE;
      }
    }
  }

  // Prepare links only if it's not readonly, or if readonly but we need to show
  // a messgae on deny.
  $message_on_deny = variable_get('vud_message_on_deny', FALSE);
  if (!$readonly || ($readonly && $message_on_deny)) {
    // Widget needs to show links.
    if ($up_access) {
      $variables['class_up'] = 'up-inactive';
      $variables['show_up_as_link'] = TRUE;
    }
    if ($down_access) {
      $variables['class_down'] = 'down-inactive';
      $variables['show_down_as_link'] = TRUE;
    }
    $variables['show_links'] = TRUE;
  }

  if (!$readonly) {
    // Widget has link(s).
    if ($up_access && !$reset_access) {
      $token_up = drupal_get_token("vote/$type/$entity_id/1/$tag/$widget_theme");
      $variables['link_up'] = url("vote/$type/$entity_id/1/$tag/$widget_theme/$token_up/nojs");
      $variables['link_class_up'] .= ' use-ajax';
    } elseif ($up_access && $reset_access) {
      $token_reset = drupal_get_token("votereset/$type/$entity_id/$tag/$widget_theme");
      $variables['link_up'] = url("votereset/$type/$entity_id/$tag/$widget_theme/$token_reset/1");
      $variables['link_class_up'] .= ' use-ajax';
    }
    if ($down_access && !$reset_access) {
      $token_down = drupal_get_token("vote/$type/$entity_id/-1/$tag/$widget_theme");
      $variables['link_down'] = url("vote/$type/$entity_id/-1/$tag/$widget_theme/$token_down/nojs");
      $variables['link_class_down'] .= ' use-ajax';
    } elseif ($down_access && $reset_access) {
      $token_reset = drupal_get_token("votereset/$type/$entity_id/$tag/$widget_theme");
      $variables['link_down'] = url("votereset/$type/$entity_id/$tag/$widget_theme/$token_reset/-1");
      $variables['link_class_down'] .= ' use-ajax';
    }

  }
  elseif ($readonly && $message_on_deny) {
    // Readonly widget, but with a deny messgae.
    ctools_include('modal');
    ctools_modal_add_js();
    if ($up_access) {
      $variables['link_class_up'] .= ' denied ctools-use-modal';
    }
    else {
      $variables['link_class_down'] .= ' denied ctools-use-modal';
    }
    if ($up_access || $down_access) {
      $variables['link_class_reset'] .= ' denied ctools-use-modal';
    }

    // TODO: Get default $widget_message_code or one from $variables.
    $widget_message_code = VUD_WIDGET_MESSAGE_DENIED;
    $variables['link_up'] = url(sprintf('vud/nojs/denied/%d', $widget_message_code));
    $variables['link_down'] = url(sprintf('vud/nojs/denied/%d', $widget_message_code));
    //$variables['link_reset'] = url(sprintf('vud/nojs/denied/%d', $widget_message_code));
  }
  else {
    // Readonly widget.
    $variables['link_up'] = '#';
    $variables['link_down'] = '#';
    //$variables['link_reset'] = '#';
  }

  $result_criteria = array(
    'entity_type' => $type,
    'entity_id' => $entity_id,
    'value_type' => 'points',
    'tag' => $tag,
    'function' => 'sum'
  );
  $raw_points = votingapi_select_single_result_value($result_criteria);
  $variables['raw_points'] = $raw_points;
  $vote_result = (int)$raw_points;

  $criteria = array(
    'entity_type' => $type,
    'entity_id' => $entity_id,
    'value_type' => 'points',
    'tag' => $tag,
    'function' => 'count'
  );
  $vote_count = (int)votingapi_select_single_result_value($criteria);
  $variables['vote_count'] = $vote_count;

  $variables['unsigned_points'] = $vote_result;

  if ($vote_result > 0) {
    $variables['class'] = 'positive';
    $variables['points'] = '+'. $vote_result;
  }
  else {
    $variables['points'] = $vote_result;
    if ($vote_result < 0) {
      $variables['class'] = 'negative';
    }
    else {
      $variables['class'] = 'neutral';
    }
  }

  $template_file = "sites/all/modules/gofast/gofast_vote/tpl/gofast_vud.tpl.php";
  return $plugin['render function']($template_file, $variables);
}

/**
 * Function for the main voting handler with Ajax support.
 */
function gofast_vote_vote($type, $entity_id, $value, $tag, $widget, $token, $ajax = 'ajax') {
  // If the user is anonymous we don't need to check for a token.
  if (!is_numeric($value) || !drupal_valid_token($token, "vote/$type/$entity_id/$value/$tag/$widget", TRUE)) {
    return MENU_ACCESS_DENIED;
  }

  $vote = array();
  $casted_vote_criteria = array(
    'entity_type' => $type,
    'entity_id' => $entity_id,
    'tag' => $tag,
  ) + votingapi_current_user_identifier();
  $casted_vote = votingapi_select_single_vote_value($casted_vote_criteria);

  // Sanity-check the incoming values.
  if ($value > 0) {
    $value = 1;
  }
  elseif ($value < 0) {
    $value = -1;
  }
  else {
    // Invalid value.
    watchdog('vud', 'Invalid vote on @type @content_id, with value @value, tag @tag and token @token',
      array('@type' => $type, '@content_id' => $entity_id, '@value' => $value, '@tag' => $tag, '@token' => $token));
    return;
  }

  $vote['value'] = $value;
  $vote['value_type'] = 'points';
  $tag = $tag ? $tag : variable_get('vud_tag', 'vote');
  $vote['tag'] = $tag;
  $vote['entity_id'] = $entity_id;
  $vote['entity_type'] = $type;
  $votes = array(0 => $vote);
  drupal_alter('vud_votes', $votes);

  // Do not allow to vote with the same value.
  if ($casted_vote == $votes[0]['value']) {
    return;
  }
  votingapi_set_votes($votes);

  $entity = entity_load($type, array($entity_id));

  userpoints_userpointsapi(array(
    'uid'     => $entity[$entity_id]->uid,
    'points'  => $value
  ));

  if ($ajax == 'ajax') {
    $plugin = vud_widget_get($widget);
    $commands = array();
    $commands = gofast_ajaxification_get_toast_messages();
    if ($function = ctools_plugin_get_function($plugin, 'ajax render')) {
      $commands = $function($type, $entity_id, $value, $tag, $token, $widget);
    }
    else {
      $variables = array(
        'entity_id' =>$entity_id,
        'type' => $type,
        'tag' => $tag,
        'widget_theme' => $widget,
      );
      if (!empty($plugin['widget template'])) {
        $commands[] = ajax_command_replace("#widget-$type-$entity_id", theme('vud_widget', $variables));
      }

      if (!empty($plugin['votes template'])) {
        $commands[] = ajax_command_replace("#votes-$type-$entity_id", theme('vud_votes', $variables));
      }
    }




    print ajax_render($commands);
    exit;
  }
  else {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}

/**
 * Function for the reset handler with Ajax support.
 */
function gofast_vote_reset($type, $entity_id, $tag, $widget, $token, $point, $ajax = 'ajax') {
  if (drupal_valid_token($token, "votereset/$type/$entity_id/$tag/$widget", TRUE)) {
    $criteria = array(
      'entity_type' => $type,
      'entity_id' => $entity_id,
      'tag' => $tag,
    ) + votingapi_current_user_identifier();
    votingapi_delete_votes(votingapi_select_votes($criteria));
    votingapi_recalculate_results($type, $entity_id);

    $entity = entity_load($type, array($entity_id));
    userpoints_userpointsapi(array(
      'uid'     => $entity[$entity_id]->uid,
      'points'  => $point
    ));
  }
  else {
    watchdog('vud',
      'Could not reset votes on @type @entity_id, tag @tag and token @token',
      array('@type' => $type, '@entity_id' => $entity_id, '@tag' => $tag, '@token' => $token));
    drupal_set_message(t('Oops! There was an error resetting your vote!'), 'warning');
  }

  if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') {
    if ($ajax == 'ajax') {
      $plugin = vud_widget_get($widget);
      $commands = array();
      $commands = gofast_ajaxification_get_toast_messages();
      if ($function = ctools_plugin_get_function($plugin, 'ajax render')) {
        $commands = $function($type, $entity_id, $value, $tag, $token, $widget);
      }
      else {
        $variables = array(
          'entity_id' => $entity_id,
          'type' => $type,
          'tag' => $tag,
          'widget_theme' => $widget,
        );
        if (!empty($plugin['widget template'])) {
          $commands[] = ajax_command_replace("#widget-$type-$entity_id", theme('vud_widget', $variables));
        }

        if (!empty($plugin['votes template'])) {
          $commands[] = ajax_command_replace("#votes-$type-$entity_id", theme('vud_votes', $variables));
        }
      }

      print ajax_render($commands);
      exit;
    }
  }
  else {
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}