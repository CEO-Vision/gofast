<?php

module_load_include('inc', 'gofast_contacts', 'gofast_contacts_api');

/**
 * Implements hook_init() 
 */
function gofast_contacts_init() {  
    drupal_add_css(drupal_get_path('module', 'gofast_contacts') . '/css/gofast_contacts.css');
}

function gofast_contacts_theme() {
    $output = array(
      'page_contact_node_form' => array(
        'template' => 'tpl/gofast-contacts-contact-node-form-page',
        'variables' => array('form' => NULL)
      ),
      'contact_node_form' => array(
        'render element' => 'form',
        'path' => drupal_get_path('theme', 'bootstrap_keen') . '/templates',
        'template' => 'contact_node_form'
      ),
    );

    return $output;
}



/**
 * Implements hook_form_alter
 * @param type $form
 * @param type $form_state
 * 
 */
function gofast_contacts_form_alter(&$form, &$form_state) {
  //Hide fields that we don't need now
  if(strpos($form['#id'],'contact-node-form') === FALSE) {
    return;
  }
  $form['#attributes']['class'][] = 'GofastForm GofastForm__ContactItem';
  $form['title']['#title'] = t('Title', [], ['context' => 'gofast_contacts']);
  $form['body'][LANGUAGE_NONE][0]['value']['#title'] = t('Body', [], ['context' => 'gofast_contacts']);
  $form['field_contact_name'][LANGUAGE_NONE][0]['value']['#title'] = t('Last name', [], ['context' => 'gofast_contacts']);
  $form['field_contact_firstname'][LANGUAGE_NONE][0]['value']['#title'] = t('First name', [], ['context' => 'gofast_contacts']);
  $form['field_contact_email'][LANGUAGE_NONE][0]['value']['#title'] = t('Email', [], ['context' => 'gofast_contacts']);
  $form['field_contact_phone'][LANGUAGE_NONE][0]['value']['#title'] = t('Mobile', [], ['context' => 'gofast_contacts']);
  $form['field_contact_phone'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
  $form['field_contact_entity'][LANGUAGE_NONE][0]['value']['#title'] = t('Entity', [], ['context' => 'gofast_contacts']);
  $form['field_contact_address'][LANGUAGE_NONE][0]['value']['#title'] = t('Address', [], ['context' => 'gofast_contacts']);
  $form['title']['#access'] = FALSE;
  $form['title']['#required'] = FALSE;
  $form['body']['#access'] = FALSE;
  $form['field_contact_address']['#access'] = FALSE;
  $form['actions']['preview']['#access'] = FALSE;
  $form['actions']['delete']['#access'] = FALSE;
  $form['#validate'][] = 'gofast_contacts_contact_node_form_validate';
  $form['#submit'][] = 'gofast_contacts_form_submit';
}

function gofast_contacts_contact_node_form_validate(&$form, &$form_state) {
  $node = isset($form_state['build_info']['args'][0]->nid) ? $form_state['build_info']['args'][0] : node_load($_GET["nid"]);
  if(!empty($node)){
    if (!gofast_contacts_can_update_contact_node($node, "update")) {
      form_set_error('node_access', t('You are not authorized to edit this contact', array(), array('context' => 'gofast')));
    }
  }
  if (!valid_email_address($form_state['values']['field_contact_email'][LANGUAGE_NONE][0]['value'])) {
    form_set_error('field_contact_email', t('Please enter a valid email address.'));
  }
  $phone_regex = '/^[0-9\+]{1,}[0-9\-]{3,15}$/';
  if (!preg_match($phone_regex, $form_state['values']['field_contact_phone'][LANGUAGE_NONE][0]['value'])) {
    form_set_error('field_contact_phone', t('Please enter a valid phone number.'));
  }
}

function gofast_contacts_form_submit(&$form, &$form_state) {

  if($form['#id'] == 'contact-node-form') {
    $form_state['values']['title'] = $form_state['values']['field_contact_name'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['field_contact_firstname'][LANGUAGE_NONE][0]['value'];
  }

}

/**
 * Display for node type contact
 * Currently unused because we don't redirect to the page
 * @param type $contents
 * 
 */
function gofast_contacts_replace_display($contents) {
    $right_block = "";
    $left_block = "";
    $contact_address = "";
    foreach($contents as $key => $content) {
        
        //Now we have the useful fields of a contact
        if(strpos($key, 'field_contact') !== false) {
            $att = str_replace('field_contact_', '', $key);
            switch($key) {
                case 'field_contact_firstname' :     
                    $right_block .= '<div class="field-contact-'.$att.'"><h5>'.t('First name', array(), array('context' => 'gofast_contacts')).'</h4>'.$content['#items'][0]['value'].'</div>';
                    break;
                case 'field_contact_name' : 
                    $left_block .= '<div class="field-contact-'.$att.'"><h5>'.t('Last name', array(), array('context' => 'gofast_contacts')).'</h4>'.$content['#items'][0]['value'].'</div>';
                    break;
                case 'field_contact_email' :          
                    $left_block .= '<div class="field-contact-'.$att.'"><h5>'.t('Email', array(), array('context' => 'gofast_contacts')).'</h4>'.$content['#items'][0]['value'].'</div>';
                    break;
                case 'field_contact_phone' : 
                    $right_block .= '<div class="field-contact-'.$att.'"><h5>'.t('Mobile', array(), array('context' => 'gofast_contacts')).'</h4>'.$content['#items'][0]['value'].'</div>';
                    break;
                case 'field_contact_entity' : 
                    $contact_entity = '<div class="field-contact-'.$att.'"><h5>'.t('Entity', array(), array('context' => 'gofast_contacts')).'</h4>'.$content['#items'][0]['value'].'</div>';
                    break;
                case 'field_contact_address' : 
                    $contact_address .= '<div class="field-contact-'.$att.'"><h5>'.t('Address', array(), array('context' => 'gofast_contacts')).'</h4>'.$content['#items'][0]['value'].'</div>';
                    break;
                default :
                    break;
                
            }
            
        }
    }
    $output = '<div class="contact-left-block">'.$left_block.$contact_address.'<br>'.$contact_entity.'</div>'
            .'<div class="contact-right-block">'.$right_block.'</div>';
          
    print $output;
 
}

/**
 * Implements hook_menu_alter.
 */
function gofast_contacts_menu_alter(&$items) {
  $items['node/add/contact']['page callback'] = 'gofast_contacts_node_add_contact_page'; //GOFAST-7350
}

/**
 * @return string
 * @throws \Exception
 * GOFAST-7350.
 */
function gofast_contacts_node_add_contact_page() {
  $node = new stdClass();
  $node->type = "contact";
  $contact_node_form = drupal_get_form('contact_node_form', $node);
  $content = theme('page_contact_node_form', ['form' => $contact_node_form]);
  return gofast_create_page_content($content, 'contact');
}

function gofast_contacts_ajax_submit(&$form, &$form_state) {
  $commands = array();
  if ($errors = form_get_errors()) {
    $form_state['rebuild'] = TRUE;
    $error_msg = theme('status_messages');
    $output = drupal_rebuild_form($form['#form_id'], $form_state, $form);
    $output = $error_msg . render($output);
    $output = gofast_normalize_string_from_ajaxifying($output);

    $commands[] = array(
      'command' => 'error_creating_node',
      'form' => $output,
      'errors' => $errors,
      'wrapper' => '#ajax_content'
    );
  } else {
    gofast_user_form_submit($form, $form_state);
    $commands[] = gofast_command_processAjax("/directory/contacts-listing");
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

function gofast_contacts_node_access($node, $op, $account) {
  if ($node->type != "contact") {
    return NODE_ACCESS_IGNORE;
  }
  // we'll make the actual check with gofast_contacts_can_update_contact_node to display user feedback
  return NODE_ACCESS_ALLOW;
}

function gofast_contacts_can_update_contact_node($node, $op) {
  if ($node->type != "contact") {
    return NULL;
  }
  if ($op != "update" && $op != "delete") {
    return NULL;
  }

  global $user;
  $is_contact_creator = FALSE;

  if($user->uid == $node->uid) {
    $is_contact_creator = TRUE;
  }
  if (!gofast_user_is_business_admin($user) && !$is_contact_creator) {
    return FALSE;
  }

  return TRUE;
}

function gofast_contacts_ajax_delete_contact($form = null, $form_state = null) {
  ctools_include('ajax');
  ctools_include('modal');
  $node = isset($form_state['build_info']['args'][0]->nid) ? $form_state['build_info']['args'][0] : node_load($_GET["nid"]);

  if (gofast_contacts_can_update_contact_node($node, "delete") === TRUE) {
    node_delete($node->nid);
    $commands[] = gofast_command_toast_message(t('Your contact was deleted', array(), array('context' => 'gofast')), 'info');
    $commands[] = gofast_command_processAjax('/directory/contacts-listing');
  } else {
    $commands[] = gofast_command_toast_message(t('You are not authorized to delete this contact', array(), array('context' => 'gofast')), 'error');
  }
  $commands[] = ctools_modal_command_dismiss();
  print ajax_render($commands);
  exit;
}