<?php

/**
 * Implements hook_init().
 */
function gofast_dashboard_init() {
  drupal_add_js(drupal_get_path('module','gofast_dashboard') . "/js/gofast_dashboard.js");
}

/**
 * Implements hook_menu()
 */
function gofast_dashboard_menu(){   
  $items['dashboard'] = array(
    'title' => t('Dashboard', array(), array('context' => 'gofast_cdel')),
    'page callback' => 'gofast_dashboard_display',
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );
  
  $items['gofast/dashboard/get/block'] = array(
    'title' => t('Dashboard get block', array(), array('context' => 'gofast_cdel')),
    'page callback' => 'gofast_dashboard_get_block',
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );
  
   $items['dashboard_ajax'] = array(
    'title' => t('Dashboard', array(), array('context' => 'gofast_cdel')),
    'page callback' => 'gofast_dashboard_display',
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );
  
 $items['dashboard/ajax/%'] = array(
    'title' => t('Dashboard', array(), array('context' => 'gofast_cdel')),
    'page callback' => 'gofast_dashboard_dashboard_element',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array(2),
  );

   $items['modal/%ctools_js/dashboard_add_to_dashboard'] = array(
    'title' => t('Add as shortcut on dashboard', array(), array('context' => 'gofast_dashboard')),
    'page callback' => 'gofast_dashboard_dashboard_add_shortcut',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'options'=> array(
      'attributes' => array(
        'class' => 'ctools-use-modal'
      )
    )
  );

   $items['modal/%ctools_js/dashboard_add_content_to_dashboard'] = array(
    'title' => t('Add as shortcut on dashboard', array(), array('context' => 'gofast_dashboard')),
    'page callback' => 'gofast_dashboard_dashboard_add_content',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'options'=> array(
      'attributes' => array(
        'class' => 'ctools-use-modal'
      )
    )
  );

   $items['modal/%ctools_js/dashboard_add_folder_to_dashboard'] = array(
    'title' => t('Add as folder shortcut on dashboard', array(), array('context' => 'gofast_dashboard')),
    'page callback' => 'gofast_dashboard_dashboard_add_folder',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'options'=> array(
      'attributes' => array(
        'class' => 'ctools-use-modal'
      )
    )
  );

 $items['dashboard_remove_from_dashboard/%node'] = array(
    'title' => t('Remove shortcut from dashboard', array(), array('context' => 'gofast_cdel')),
    'page callback' => 'gofast_dashboard_dashboard_remove_shortcut',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'options'=> array(
      'attributes' => array( )
    )
  );


    $items['gofast_dashboard_space_autocomplete'] = array(
    'page callback' => 'gofast_dashboard_space_autocomplete',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['gofast/dashboard/get_upcomings'] = array(
    'page callback' => 'gofast_dashboard_get_upcomings',
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'type' => MENU_NORMAL_ITEM
  );



  return $items;
}


/*
 * Display for GF4
 */

function gofast_dashboard_container_display(){
    $content = '<script> jQuery(document).ready(function(){
            jQuery("#mobileHomeTab_dashboard").click(function(){
                            if(!jQuery("#container_dashboard_mobile").hasClass("dashboard_loaded")){
                                Gofast.addLoading();
                                jQuery.get(location.origin + "/dashboard_ajax?is_ajax=true")
                                .done(function (result) {
                                        jQuery("#container_dashboard_mobile").html(result);
                                        jQuery("#container_dashboard_mobile").addClass("dashboard_loaded");
                                        Gofast.removeLoading();
                                });
                            }    
                  }).addClass("processed");
         if(jQuery("#mobileHomeTab_dashboard").hasClass("active")){
           jQuery("#mobileHomeTab_dashboard").click();
         }
  });</script><div id="container_dashboard_mobile"></div>';
    
    return $content;
    //return gofast_dashboard_display();
}

function gofast_dashboard_display(){
  drupal_add_css(drupal_get_path('module', 'gofast_dashboard') . "/css/gofast_dashboard.css");

  $dashboard_blocks = array();


  $block_private_space = array(
    'label' => 'Personal Space and Profile',
    'toolbar' => "",
    'id' => 'dashboard_block_private_space'
  );

  // Calendar
  $calendar_toolbar = "";
  $calendar_toolbar = theme('dashboard_calendar_toolbar');


  $block_calendar = array(
    'label' => 'My calendar',
    'toolbar' => $calendar_toolbar,
    'id' => 'dashboard_block_calendar'
  );

  $workflow_toolbar = "";
  $workflow_toolbar = theme('dashboard_workflow_toolbar');
  
  $block_workflows = array(
    'label' => 'My tasks',
    'toolbar' => $workflow_toolbar,
    'id' => 'dashboard_block_workflows'
  );
  
  $favorite_spaces_toolbar = "";
  $favorite_spaces_toolbar = theme("dashboard_favorite_spaces_toolbar");

  
  $block_favorites_spaces = array(
    'label' => 'My favorites spaces',
    'toolbar' => $favorite_spaces_toolbar,
    'id' => 'dashboard_block_favorites_spaces'
  );
  
  $favorite_folders_toolbar = "";
  $favorite_folders_toolbar = theme("dashboard_favorite_folders_toolbar");

  $block_favorite_folders = array(
    'label' => 'My favorite folders',
    'toolbar' => $favorite_folders_toolbar,
    'id' => 'dashboard_block_favorites_folders'
  );
  
  $favorite_content_toolbar = "";
  $favorite_content_toolbar = theme("dashboard_favorite_content_toolbar");

  $block_favorite_content = array(
    'label' => 'My favorite contents',
    'toolbar' => $favorite_content_toolbar,
    'id' => 'dashboard_block_favorites_content'
  );

  $block_dashboard_article = array(
    'label' => '<div id="gofastDashboardArticleTitle"></div>',
    'toolbar' => "",
    'id' => 'dashboard_block_dashboard_article'
  );

  $dashboard_blocks = [
    "0" => $block_private_space,
    "1" => $block_calendar,
    "2" => $block_workflows,
    "3" => $block_favorites_spaces,
    "4" => $block_favorite_folders,
    "5" => $block_favorite_content,
  //  "6" => $block_dashboard_article,
  ];

  $page =  theme('gofast_dashboard_dashboard_main', ['dashboard_blocks' => $dashboard_blocks]);

  //Fullscreen for Dashboard since there is no side content to display
  $container = theme('gofast_content_container_fluid', ['content' => $page]);
  $subheader = (gofast_mobile_is_mobile_domain() != TRUE) ? theme('gofast_dashboard_dashboard_breadcrumb', array()) : "";

  if ($_GET["is_ajax"] == "true") {
    print $container;
    exit;
  } else {
    return theme('gofast_content', ['container' => $container, 'subheader' => $subheader]);
  }
}

function gofast_dashboard_get_block(){
  $block_id = $_GET['id'];
  if(empty($block_id)){
    print "";
  }
  
  // Initialize theme 
  $theme = $block_id;
  
  // Build block content
  $content = theme($theme);
  
  $result = array(
    'id' => $block_id,
    'content' => $content
  );
  print json_encode($result);
  exit;
}


/*
 * This method gets all the flag for the actual user, and puts them in an array
 * Returned array is splitted in 2 parts : the first one contains bookmarked spaces, and the other one contains bookmarked content
 * 
 * For every content and space, the array contains the corresponding link, icon, and node_actions
 * If there is no flag, we display $string_empty
 */
function gofast_dashboard_get_all_flags($type_filter = null) {
    global $user;
    $all_flags = flag_get_user_flags('node', null, $user->uid);
    foreach($all_flags['bookmarks'] as $bm) {
        $node = node_load($bm->entity_id);
        $node_cat = gofast_og_is_space($node) ? "space" : "content";
        if(($type_filter !== null && $node_cat == $type_filter && $node->status == '1') || ($type_filter == null && $node->status == '1')){
          $res[$node_cat][] = gofast_dashboard_format_flag($node, $node_cat == "space"); 
        }
    }
    
    $string_empty = "You have not yet bookmarked any content. Click the 'Bookmark this' link when viewing a piece of content to add it to this list.";
    if(empty($res["content"])) {
        $res["content"][] = array(
          "link" => t($string_empty, array(), array('context' => 'gofast_dashboard')),
          "title" => t($string_empty, array(), array('context' => 'gofast_dashboard'))
        );
    }
    if(empty($res["space"])) {
          $res["space"][] = array(
          "link" => t($string_empty, array(), array('context' => 'gofast_dashboard')),
          "title" => t($string_empty, array(), array('context' => 'gofast_dashboard'))
        );
    }
    usort($res["content"], function($a, $b) {
      return strip_tags($a["link"]) <=> strip_tags($b["link"]);
    });
    usort($res["space"], function($a, $b) {
      return $a["link"] <=> $b["link"];
    });
    return $res;
}

/*
 * We are formatting, for each bookmarked space or content, its array entry
 */
function gofast_dashboard_format_flag($node, $full_path = FALSE){
      global $base_url;

      $final_path["icon"] = $full_path ? "" : theme('gofast_node_icon_format', array('node' => $node));
      $final_path["path"] = $base_url . '/node/' . $node->nid;
      $final_path["link"] = $full_path ? gofast_breadcrumb_display_breadcrumb($node->nid, ['return' => TRUE, 'show_title' => TRUE, 'only_title' => FALSE, 'title_link' => TRUE, 'editable' => FALSE, 'no_padding' =>  TRUE]) : l($node->title, "/node/".$node->nid);
     // $final_path["node_actions"] = gofast_get_node_actions($node);
      $final_path["node_actions"] = '<span id="activity-feed-container"></span><div class="gofast-node-actions btn-group dropdown ">'
        .'<a class="btn btn-light btn-xs btn-icon mr-2 dropdown-placeholder" type="button" id="dropdown-placeholder-'.$node->nid.'" data-toggle="dropdown">'
            .'<span class="fa fa-bars"></span>'
            .'<ul class="dropdown-menu gofast-dropdown-menu" role="menu" id="dropdownactive-placeholder-'.$node->nid.'">'
                .'<li><div class="loader-activity-menu-active"></div></li>'
            .'</ul>'
        .'</a>'
    .'</div>';
      
      return $final_path;
}



/**
 * Render API callback: Remove OG shortcut from dashboard page
 *
 * This function is used to remove the shortcut on dashboard
 * for the selected space and reload dashboard shortcut
 * after validation.
 */
function gofast_dashboard_dashboard_remove_shortcut($node){

  global $user;
  ctools_include('ajax');

   if($node !== null){
      //get node type
      $type =$node->type;
      if($type=='organisation'){
        $display_id = 'organisation_shortcuts';
        $selector = '.dashboard_shortcut_orga .panel-body > div:first';
      }else{
        $display_id = 'group_shortcuts';
        $selector = '.dashboard_shortcut_group .panel-body > div:first';
      }

    $flag = flag_get_flag('bookmarks');
    $flag->flag('unflag', $node->nid, $user, TRUE);

    drupal_set_message(t('The Space has been removed from your favorites.', array(), array('context' => 'gofast_dashboard')));
  }

  if (!isset($commands[0])) {
    $commands = array();

    if(isset($selector)){ //update view
      $view_updated = views_embed_view('gofast_dashboard_flag_dashboard_shortcut', $display_id);
      $commands[] = ajax_command_replace($selector, $view_updated);
    }

    $commands = array_merge($commands, gofast_ajaxification_get_toast_messages());
  }

  print ajax_render($commands);
  exit;
}

/**
 * Get space visible by a user
 * @param type $bundles => array of og bundle keys 'organisation', 'group', etc...)
 */
function gofast_dashboard_space_autocomplete($str){
  $str = trim($str);

  if (empty($str) || strlen($str) < 2) {
    // This prevents returning irrelevant results, though it should be handled
    // clientside in order to avoid useless requests.
    drupal_json_output(array());
    exit;
  }

  if(count($bundles) == 0){
    $bundles = array_keys(gofast_og_node_types(TRUE));
    unset($bundles['public']);
    unset($bundles['private_space']);
  }

  $options_ac_space = array(
    'bundle' => $bundles,
    'fields' => array(),
    'properties' => array(),
    'key' => 'nid',
    'value' => 'title',
    'format_key_callback' => 'gofast_modal_ac_format_space_key',
    'format_value_callback' => 'gofast_modal_ac_format_space_value'
  );

  $matches = gofast_ac_query($str, 'node', $options_ac_space);

  // Highlighting string matches.
  foreach ($matches as $key => &$value) {
    $value = preg_replace(array('/[\n\r]+/', '/(<[^<>]*>)([^<>]*?)(' . preg_quote($str, '/') . ')/i'), array('', '$1$2<b>$3</b>'), $value);
  }

  drupal_json_output($matches);
  exit;
}

function gofast_dashboard_get_upcomings(){
  
  $meetings = theme('gofast_dashboard_upcoming_meetings');

  $files = theme('gofast_dashboard_upcoming_files'); 
  
  $result = array(
    'meetings' => $meetings,
    'files' => $files
  );
  
  print json_encode($result);
  exit;
}

function gofast_dashboard_dashboard_add_shortcut($js){

    $form_id = 'gofast_dashboard_add_space_shortcut_form';
    $selector = '.card-body #dashboard_block_favorites_spaces';

  if (!$js) {
    $form = drupal_get_form($form_id);
    return $form;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'ajax' => TRUE,
    'build_info' => array(
      'args' => array()
    ),
    'title' => null
  );

  $commands = ctools_modal_form_wrapper($form_id, $form_state);
  if (!isset($commands[0])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
    $all_flags = gofast_dashboard_get_all_flags();
    $view_updated  = theme('gofast_dashboard_dashboard_favorites_spaces', ['content' => $all_flags['space'], 'type' => 'space']);
    $view_wrapped = '<div id="dashboard_block_favorites_spaces">' . $view_updated . '</div>';

    $commands[] = ajax_command_replace($selector, $view_wrapped);
    $commands = array_merge($commands, gofast_ajaxification_get_toast_messages());

    $commands[] = gofast_command_callback("Gofast.processDashboardDropdowns");
  }
  print ajax_render($commands);
}

function gofast_dashboard_dashboard_add_folder($js){

    $form_id = 'gofast_dashboard_add_folder_form';
    $display_id = 'page_2';
    $selector = '.card-body .dashboard-folders-placeholder';

  if (!$js) {
    $form = drupal_get_form($form_id);
    return $form;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'reset_html_ids' => TRUE,
    'ajax' => TRUE,
    'build_info' => array(
      'args' => array()
    ),
    'title' => null
  );

  $commands = ctools_modal_form_wrapper($form_id, $form_state);
  if (!isset($commands[0])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
    $commands = array_merge($commands, gofast_ajaxification_get_toast_messages());
    $commands[] = gofast_command_toast_message(t("The selected folders have been added to your bookmarks", array(), array('context' => 'gofast:gofast_dashboard')), "success");

    $block = theme("dashboard_folder_placeholder");
    $view_wrapped = '<div class="dashboard-folders-placeholder">' . $block . '</div>';
    $commands[] = ajax_command_invoke($selector, 'replaceWith', array($view_wrapped));
  }
  print ajax_render($commands);
}

function gofast_dashboard_dashboard_add_content($js){

    $form_id = 'gofast_dashboard_add_space_content_form';
    $display_id = 'page_1';
    $selector = '.card-body #dashboard_block_favorites_content';

  if (!$js) {
    $form = drupal_get_form($form_id);
    return $form;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'ajax' => TRUE,
    'build_info' => array(
      'args' => array()
    ),
    'title' => null
  );

  $commands = ctools_modal_form_wrapper($form_id, $form_state);
  if (!isset($commands[0])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();

    $all_flags = gofast_dashboard_get_all_flags();
    //Old view page1
    $view_updated = theme('gofast_dashboard_dashboard_favorites_spaces', ['content' => $all_flags['content'], 'type' => 'content']);
    $view_wrapped = '<div id="dashboard-favorite-contents">' . $view_updated . '</div>';

    $commands[] = ajax_command_replace($selector, $view_wrapped);
    $commands = array_merge($commands, gofast_ajaxification_get_toast_messages());

    $commands[] = gofast_command_callback("Gofast.processDashboardDropdowns");
  }
  print ajax_render($commands);
}

function gofast_dashboard_add_space_shortcut_form($form, &$form_state, $node = NULL){
  global $user;
  $ogs = gofast_og_get_spaces_by_user($user, TRUE);
  foreach($ogs as $gid => &$path){
      $path = gofast_cmis_space_get_webdav_path($gid);
  }

  $form['locations_checks'] = array(
	'#type' => 'item',
	'#title' => t('Spaces selected to be added in your bookmarks', array(), array('context' => "gofast:gofast_dashboard")),
	'#suffix' => "<div class='ui-locations-check' style='min-width:800px;margin-bottom:10px;'><i>" . t('You have not chosen any space ...') ."</i></div>",
  );

  $form['spaces'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $ogs,
    '#required' => TRUE,
    '#attributes' => array('class' => array('edit-all-spaces')),
    '#prefix' => "<label>" . t("Select spaces to add in your bookmarks", array(), array('context' => 'gofast')) . "</label><br /><div class='loader-ztree'></div>"
  );
  gofast_ztree_form_alter($form, $form_state);
  $form['#after_build'][] = 'gofast_ztree_after_build';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pin on Dashboard', array(), array('context' => 'gofast')),
    '#attributes' => array('class' => array('btn', 'btn-success', 'btn-sm')),
    '#submit' => array('gofast_dashboard_add_shortcut_form_submit')
  );

  return $form;
}

function gofast_dashboard_add_folder_form($form, &$form_state, $node = NULL){
    global $user;
    $form['locations_checks'] = array(
	'#type' => 'item',
	'#title' => t('Folders selected to be added'),
	'#suffix' => "<div class='ui-locations-check' style='min-width:800px;margin-bottom:10px;'><i>" . t('You have not chosen any folder to add...') ."</i></div>",
    );

    //Get root spaces
    $groups = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Groups");
    $organisations = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Organisations");
    $extranet = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Extranet");
    $public = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Public");
    $ztree = array(
	$groups => "/Sites/_Groups",
	$organisations => "/Sites/_Organisations",
	$extranet => "/Sites/_Extranet",
	$public => "/Sites/_Public",
    );
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#multiple'] = TRUE;
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#title'] = t("Select folders to add in your bookmarks", array(), array('context' => 'gofast'));
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#required'] = FALSE;
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#type'] = 'select';
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#options'] = $ztree;
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#value'] = $ztree;
    $form[GOFAST_CMIS_LOCATIONS_FIELD]["#attributes"]["class"][] = "gofast_display_none";

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Save", array(), array('context' => 'gofast')),
  );

  return $form;
}

/**
 */
function gofast_dashboard_add_shortcut_form_submit($form, &$form_state){
  global $user;

  $nids = $form_state['input']['spaces'];

  $og_pinned = array();
  foreach($nids as $nid){
    $flag = flag_get_flag('bookmarks');
    $flag->flag('flag', $nid, $user, TRUE);
    $og_pinned[] = gofast_get_node_title($nid);
  }

  drupal_set_message(t('The following spaces have been added to your favorites: %spaces', array('%spaces' => implode(', ', $og_pinned)), array('context' => 'gofast_dashboard')));
  $form_state['redirect'] = 'dashboard';
}

function gofast_dashboard_add_folder_form_submit($form, &$form_state){
  $selected_folders = $form_state['input']['field_emplacement'];

  foreach($selected_folders as $path){
      gofast_ajax_file_browser_bookmark_folder("/alfresco/webdav" . $path . "/");
  }

  $form_state['redirect'] = 'dashboard';
}

function gofast_dashboard_add_space_content_form($form, &$form_state, $node = NULL){
  
  $attributes_field_target_link_autocomplete = [
    'class' => ['js-tagify'],
    'id' => 'edit-list-documents',
    //'data-enforce' => '', //  Comment : Do not allow putting data that dose not exist | Decomment : allow putting data that dose not exist
    //'data-user' => '', // show ac users
    'data-node' => '', // show ac node
    //'data-userlist' => '', // show ac userlist
    //'data-taxonomy_term' => '' // show ac taxonomy term
  ];
  
  $form['node']= array(
    '#title' => t('Contents to add as shortcut', array(), array('context' => 'gofast_cdel')),
    '#type' => 'textfield',
    '#default_value' => '',
    '#maxlength' => '', // no maxlength
    '#required' => FALSE,
    '#attributes' => $attributes_field_target_link_autocomplete,
    //'#autocomplete_path' => 'gofast/documents-autocomplete',
    '#name' => 'ac-list-tags-list-documents',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pin on Dashboard', array(), array('context' => 'gofast')),
    '#attributes' => array('class' => array('btn', 'btn-success', 'btn-sm')),
    '#submit' => array('gofast_dashboard_add_content_form_submit')
  );

  return $form;
}

/**
 */
function gofast_dashboard_add_content_form_submit($form, &$form_state){
  global $user;
  
  $documents = json_decode($form_state['input']['ac-list-tags-list-documents']);
  
  foreach ($documents as $key => $document) {
    $ogs[] = [
      'nid' => $document->value,
      'name' => $document->name
    ];
  }

  $og_pinned = array();
  foreach($ogs as $og){
    $flag = flag_get_flag('bookmarks');
    $flag->flag('flag', $og['nid'], $user, TRUE);
    $og_pinned[] = $og['name'];
  }

  drupal_set_message(t('The following contents have been added to your favorites: %spaces', array('%spaces' => implode(', ', $og_pinned)), array('context' => 'gofast_dashboard')));
  $form_state['redirect'] = 'dashboard';
}

/**
 * Implements hook_page() for dashboard
 */
function gofast_dashboard_dashboard_page(){
  drupal_add_css(drupal_get_path('module', 'gofast_dashboard') . "/css/gofast_dashboard.css");

  $output = theme('gofast_dashboard_dashboard_breadcrumb', array());
  $output .=  theme('gofast_dashboard_dashboard_main');
  return $output;
}

/*
 * Used to load the dashboard blocks async
 */
function gofast_dashboard_dashboard_element($element){
  $output = "";

  switch($element){
    case 'last_commented':
      $block_last_commented = gofast_cdel_block_view('gofast_cdel_last_commented');
      $output .= $block_last_commented['content'];
      break;
    case 'mail':
      $block_mail = gofast_cdel_block_view('gofast_cdel_mails');
      $output .= $block_mail['content'];
      break;
    case 'memo':
      $memos = gofast_dashboard_get_user_memo();
      $output .= theme('gofast_dashboard_dashboard_memo_content', array('user_memos' => $memos));
      break;
    case 'dashboard-favorite-spaces':
      $all_flags = gofast_dashboard_get_all_flags();
      $output .= theme("gofast_dashboard_dashboard_favorites_spaces", ['content' => $all_flags['space'], 'type' => 'space']);
      break;
    case 'dashboard-favorite-contents':
      $all_flags = gofast_dashboard_get_all_flags();
      $output .= theme('gofast_dashboard_dashboard_favorites_spaces', ['content' => $all_flags['content'], 'type' => 'content']);
      break;
  }

  print $output;
  exit;
}


##### START TEMPLATE PREPROCESS SECTION #####

function template_preprocess_dashboard_block_favorites_folders(&$variables){
      global $user;
      global $base_url;
      $private_space_nid = gofast_og_get_user_private_space($user)->nid;
      
      //Check if Alfresco is up before continuing
      if (! gofast_cmis_check_alfresco_status()) {
        //Alfresco is down, stop execution here
        return;
      }
      
      
     //Check folder bookmarked
     $folder_bookmarks = db_query("SELECT fbid,folder_reference FROM gofast_bookmark_folder WHERE uid=" . $user->uid)->fetchAll();
     foreach($folder_bookmarks as $folder_bookmark){

         $display_reference = $folder_bookmark->folder_reference;
         $item = gofast_cmis_item_get($display_reference);
         if(!$item){ //This folder does not exists, delete it
           db_query("DELETE FROM gofast_bookmark_folder WHERE fbid=" . $folder_bookmark->fbid);
           continue;
         }
         $display_path = $item->properties['cmis:path'];
         $path = $item->properties['cmis:path'];
         // if the alfresco item is mirrored
         if (!$path) {
          $path = $display_path = gofast_cmis_get_mirrored_path_by_alf_ref($display_reference, $item->properties['cmis:name']);
         }
         if(substr($display_path, -1, 1) == "/"){
             $display_path = substr($display_path, 0, -1);
         }
         $folder_name = array_pop(explode("/", $display_path));

         $final_path = array();
         $unencoded_path = $path;
         if(gofast_mobile_is_mobile_domain()){
           $final_path["link"] = "<a href='" . $base_url . "/home_page_navigation?&path=" . $path . "#navBrowser'>" . $folder_name . "</a>";
           $final_path["unthemed_link"] = $base_url . "/home_page_navigation?&path=" . $path . "#navBrowser";
         }else{
           $final_path["link"] = l($folder_name, "/node/$private_space_nid", array('attributes' => array('title' => str_replace("/alfresco/webdav", "", $path)), 'query' => array('path' => $path)));
           $final_path["unthemed_link"] = $base_url . "/node/$private_space_nid?&path=" . $path;
         }
         $final_path['unthemed_path'] = $unencoded_path;
         $final_path["icon"] = '<span class="fa fa file-o fa-folder"></span>';
         $final_path["path"] = $display_path;
         $array_folders[] = $final_path;
     }
     $variables['favorite_folders'] = $array_folders;
}

function template_preprocess_dashboard_folder_placeholder(&$variables){
      global $user;
      global $base_url;
      $private_space_nid = gofast_og_get_user_private_space($user)->nid;
      
      //Check if Alfresco is up before continuing
      if (! gofast_cmis_check_alfresco_status()) {
        //Alfresco is down, stop execution here
        return;
      }
      
      
     //Check folder bookmarked
     $folder_bookmarks = db_query("SELECT fbid,folder_reference FROM gofast_bookmark_folder WHERE uid=" . $user->uid)->fetchAll();
     foreach($folder_bookmarks as $folder_bookmark){

         $display_reference = $folder_bookmark->folder_reference;
         $item = gofast_cmis_item_get($display_reference);
         if(!$item){ //This folder does not exists, delete it
           db_query("DELETE FROM gofast_bookmark_folder WHERE fbid=" . $folder_bookmark->fbid);
           continue;
         }
         $display_path = $item->properties['cmis:path'];
         $path = $item->properties['cmis:path'];
         if(substr($display_path, -1, 1) == "/"){
             $display_path = substr($display_path, 0, -1);
         }
         $folder_name = array_pop(explode("/", $display_path));

         $final_path = array();
         $unencoded_path = $path;
         if(gofast_mobile_is_mobile_domain()){
           $final_path["link"] = "<a href='" . $base_url . "/home_page_navigation?&path=" . $path . "#navBrowser'>" . $folder_name . "</a>";
           $final_path["unthemed_link"] = $base_url . "/home_page_navigation?&path=" . $path . "#navBrowser";
         }else{
           $final_path["link"] = l($folder_name, "/node/$private_space_nid", array('attributes' => array('title' => str_replace("/alfresco/webdav", "", $path)), 'query' => array('path' => $path)));
           $final_path["unthemed_link"] = $base_url . "/node/$private_space_nid?&path=" . $path;
         }
         $final_path['unthemed_path'] = $unencoded_path;
         $final_path["icon"] = '<span class="fa fa file-o fa-folder"></span>';
         $final_path["path"] = $display_path;
         $array_folders[] = $final_path;
     }
     $variables['browser_path'] = gofast_mobile_is_mobile_domain() ? '/home_page_navigation?&path=/Sites#navBrowser' : "/node/$private_space_nid#ogdocuments";
     $variables['favorite_folders'] = $array_folders;
}


function template_preprocess_gofast_dashboard_dashboard_main_orga(&$variables) {
  $og= gofast_user_get_main_org(NULL, TRUE);
  $variables['og_nid'] = $og->nid;
  $variables['og_name'] = $og->title;

  //build search url
  $terms = taxonomy_get_term_by_name('Forum', 'format');
  $term = reset($terms);
  $variables['forum_search_url_params'] = 'f[0]=im_field_format:'.$term->tid.'&f[1]=sm_og_group_content_ref:node:'.$og->nid;

  $terms = taxonomy_get_term_by_name('Web Page', 'format');
  $term = reset($terms);
  $variables['og_calendar_link'] = gofast_mobile_is_mobile_domain() ? '/calendar_simplified' : '/node/'.$og->nid.'#ogcalendar';
  
  $variables['article_search_url_params'] = 'f[0]=im_field_format:'.$term->tid.'&f[1]=sm_og_group_content_ref:node:'.$og->nid;
}


function template_preprocess_gofast_dashboard_upcoming_meetings(&$variables){
  global $user; 
  
  $variables['meetings'] = gofast_dashboard_get_upcoming_meetings($user);
}

function template_preprocess_gofast_dashboard_upcoming_files(&$variables){
  global $user; 
  
  $variables['files'] = gofast_dashboard_get_upcoming_files($user);
}

function template_preprocess_dashboard_block_dashboard_article(&$variables) {
  $dashboard_article_nid = gofast_get_dashboard_article_nid();
  $variables['dashboard_article'] = node_load($dashboard_article_nid);
  $variables['is_business_admin'] = gofast_user_is_business_admin();
}

function gofast_get_dashboard_article_nid() {
  // the unique node type "dashboard_article" is used to avoid triggering all the wikis override we have on the "article" node type
  $query = db_query("SELECT nid FROM node WHERE type = 'dashboard_article'");
  $result = $query->fetchCol();
  if (empty($result)) {
    return gofast_create_dashboard_article();
  }
  return $result[0];
}

function gofast_create_dashboard_article() {
  $node = new stdClass();
  $node->title = t("Custom block", array(), array("context" => "gofast:gofast_dashboard"));
  $node->type = 'dashboard_article';
  $node->language = LANGUAGE_NONE;
  $node->options = array();
  $node->promote = NODE_NOT_PROMOTED;
  $node->module = 'node';
  $node->comment = COMMENT_NODE_HIDDEN;
  $node->status = NODE_PUBLISHED;
  node_save($node);
  return gofast_get_dashboard_article_nid();
}

##### END OF TEMPLATE PREPROCESS SECTION #####

function gofast_dashboard_get_user_memo(){
    //get all memos ( microblogging);
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'blog')
    ->range(0, 20)
    ->propertyOrderBy('changed', 'DESC')
    ->execute();
  $nodes = node_load_multiple(array_keys($result['node']));
  return $nodes;
}


/**
 * Implements hook_theme()
 */
function gofast_dashboard_theme() {
  return array(
    'gofast_dashboard_dashboard_main' => array(
      'template' => 'tpl/gofast-dashboard-main'
    ),
    'gofast_dashboard_card' => array(
      'template' => 'tpl/card/gofast-dashboard-card'
    ),
    
    'dashboard_calendar_toolbar' => array(
      'template' => 'tpl/toolbar/dashboard-calendar-toolbar'
    ),
    'dashboard_workflow_toolbar' => array(
      'template' => 'tpl/toolbar/dashboard-workflow-toolbar'
    ),
    'dashboard_favorite_spaces_toolbar' => array(
      'template' => 'tpl/toolbar/dashboard-favorite-spaces-toolbar'
    ),
    'dashboard_favorite_folders_toolbar' => array(
      'template' => 'tpl/toolbar/dashboard-favorite-folders-toolbar'
    ),
    'dashboard_favorite_content_toolbar' => array(
      'template' => 'tpl/toolbar/dashboard-favorite-content-toolbar'
    ),
    
    'dashboard_block_private_space' => array(
      'template' => 'tpl/blocks/dashboard-block-private-space'
    ),
    
    'dashboard_block_calendar' => array(
      'template' => 'tpl/blocks/dashboard-block-calendar'
    ),
    
    'dashboard_block_workflows' => array(
      'template' => 'tpl/blocks/dashboard-block-workflows'
    ),
    
    'dashboard_block_favorites_spaces' => array(
      'template' => 'tpl/blocks/dashboard-block-favorites-spaces'
    ),
    
    'dashboard_block_favorites_folders' => array(
      'template' => 'tpl/blocks/dashboard-block-favorites-folders'
    ),
    
    'dashboard_block_favorites_content' => array(
      'template' => 'tpl/blocks/dashboard-block-favorites-content'
    ),

    'dashboard_block_dashboard_article' => array(
      'template' => 'tpl/blocks/dashboard-block-dashboard-article'
    ),
    'gofast_dashboard_dashboard_main_orga' => array(
      'template' => 'tpl/gofast-dashboard-main-orga'
    ),
    'gofast_dashboard_dashboard_memo' => array(
      'template' => 'tpl/gofast-dashboard-memo'
    ),
    'gofast_dashboard_dashboard_memo_content' => array(
      'template' => 'tpl/gofast-dashboard-memo-content'
    ),
    'gofast_dashboard_dashboard_shortcut_group' => array(
      'template' => 'tpl/gofast-dashboard-shortcut-group'
    ),
    'gofast_dashboard_dashboard_favorites_spaces' => array(
      'template' => 'tpl/gofast-dashboard-favorites-spaces'
    ),  
   'gofast_dashboard_dashboard_favorites_folders' => array(
      'template' => 'tpl/gofast-dashboard-favorites-folders'
    ),
   'dashboard_folder_placeholder' => array(
      'template' => 'tpl/dashboard-folder-placeholder'
    ),
   'gofast_dashboard_dashboard_favorites_contents' => array(
      'template' => 'tpl/gofast-dashboard-favorites-contents'
    ),
    'gofast_dashboard_dashboard_workflows' => array(
      'template' => 'tpl/gofast-dashboard-workflows'
    ),
    'gofast_dashboard_dashboard_calendar' => array(
      'template' => 'tpl/gofast-dashboard-calendar'
    ),
    'gofast_dashboard_upcoming_meetings' => array(
      'template' => 'tpl/gofast-dashboard-upcoming-meetings'
    ),
    'gofast_dashboard_upcoming_files' => array(
      'template' => 'tpl/gofast-dashboard-upcoming-files'
    ),
  );
}

function gofast_dashboard_get_upcoming_meetings($account = NULL){
  global $user;
  
  if($account == NULL){
    $account = $user;
  }
  
  $meetings = gofast_dashboard_query_get_upcoming_meetings($account);
  
  return $meetings;
}

function gofast_dashboard_query_get_upcoming_meetings($account = NULL){
    
  if($account == NULL){
    watchdog('GoFAST DEBUG', '$account is not declared');
    return;
  }
  
  // Get node conference not delete
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', 'conference', '=');
  $query->condition('n.status', '1', '=');
  
  // Get only conference my user is participating or conference my user is organizing
  $query->innerJoin('field_data_field_existing_participants', 'fep', 'fep.entity_id = n.nid');
  $or = db_or();
  $or->condition('fep.field_existing_participants_target_id', $account->uid, '=');
  $or->condition('n.uid', $account->uid);
  $query->condition($or);
  
  // Get only conference whose the deadline has not been reached
  $query->innerJoin('field_data_field_date', 'fdate', 'fdate.entity_id = n.nid');
  $query->fields('fdate', array('field_date_value'));
  $query->where('fdate.field_date_value >= DATE_SUB(NOW(), INTERVAL 1 DAY)');
  $query->orderBy('fdate.field_date_value', 'ASC');
  
  $meetings = $query->distinct()->execute()->fetchAll();

  return $meetings;
}


function gofast_dashboard_get_upcoming_files($account){
  global $user;
  
  if($account == NULL){
    $account = $user;
  }
  
  $files = gofast_dashboard_query_get_upcoming_files($account);
  
  return $files;
}

function gofast_dashboard_query_get_upcoming_files($account = NULL){
  
  if($account == NULL){
    watchdog('GoFAST DEBUG', '$account is not declared');
    return;
  }

  $user = db_select('node', 'n');
  $user->condition('n.type', array('alfresco_item'), 'IN');
  $user->condition('n.status', '1', '=');

  
  // Get userlist members have access to document
  $user->leftJoin('og_membership', 'ogm', 'ogm.etid=n.nid');
  $user->leftJoin('og_membership', 'ogm2', 'ogm.gid=ogm2.gid');
  $user->leftJoin('field_data_field_date', 'fdate', 'fdate.entity_id = n.nid');
  $user->leftJoin('field_data_field_userlist_members', 'ulmembers', 'ulmembers.entity_id=ogm2.etid');
  $user->leftJoin('field_data_field_format', 'fformat' ,'fformat.entity_id = n.nid');
  
  $user->condition('ogm2.entity_type', 'userlist', '=');
  $user->condition('ogm2.state', '1', '=');
  $user->condition('ulmembers.field_userlist_members_value', $account->uid, '=');
  $user->where('fdate.field_date_value >= DATE_SUB(NOW(), INTERVAL 1 DAY)');
  
  $user->fields('n', array('nid', 'title'));
  $user->fields('fdate', array('field_date_value'));
  $user->fields('fformat', array('field_format_tid'));


  $userlist = db_select('node', 'n');
  $userlist->condition('n.type', array('alfresco_item'), 'IN');
  $userlist->condition('n.status', '1', '=');

  $userlist->leftJoin('og_membership', 'ogm', 'ogm.etid=n.nid');
  $userlist->leftJoin('og_membership', 'ogm2', 'ogm.gid=ogm2.gid');
  $userlist->leftJoin('field_data_field_date', 'fdate', 'fdate.entity_id = n.nid');
  $userlist->leftJoin('field_data_field_format', 'fformat' ,'fformat.entity_id = n.nid');


  $userlist->condition('ogm2.entity_type', 'user', '=');
  $userlist->condition('ogm2.state', '1', '=');
  $userlist->condition('ogm2.etid', $account->uid, '=');
  $userlist->where('fdate.field_date_value >= DATE_SUB(NOW(), INTERVAL 1 DAY)');
  $userlist->orderBy('field_date_value', 'ASC');

  $userlist->fields('n', array('nid', 'title'));
  $userlist->fields('fdate', array('field_date_value'));
  $userlist->fields('fformat', array('field_format_tid'));

  $files = $user->union($userlist);
  $files = $files->execute()->fetchAll();

  return $files;
}
/**
 * Implementation of hook_views_handlers().
 * Register all of the basic handlers views uses.
 */
function gofast_dashboard_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('module', 'ceo_vision_dashboard'),
    ),
    'handlers' => array(
      'gofast_dashboard_handler_field_node_actions' => array(
        'parent' => 'views_handler_field',
      ),
    ),
  );
}

function gofast_dashboard_views_data() {
    $data = array();

    // The 'group' index will be used as a prefix in the UI for any of this
  // table's fields, sort criteria, etc.
  $data['gofast_dashboard']['table']['group'] = t('CEO-Vision Dashboard');
  // Define this as a base table.
  $data['gofast_dashboard']['table']['join'] = array(
    '#global' => array(),
  );


  // Node actions field
  $data['gofast_dashboard']['node_actions'] = array(
    'title' => t('Node actions'),
    'help' => t('Node actions'),
    'field' => array(
      'handler' => 'gofast_dashboard_handler_field_node_actions',
    ),
  );

  return $data;
}

/**
 * Implements hook_views_api().
 */
function gofast_dashboard_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'gofast_dashboard'),
  );
}
