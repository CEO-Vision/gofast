<?php

global $base_path;

/**
 * Implements hook_init()
 */
function gofast_ajax_file_browser_init() {
  if (!user_is_logged_in()) {
    // Because user may have lost its session and did not necessarily log out
    // (session expiry), we must ensure that an old Alfresco session doesn't
    // persist along with the drupal session about to be created.
    gofast_delete_cookie('JSESSIONID');
  }
  $request_field_archived = db_query("SELECT * FROM {field_data_field_archive} where field_archive_value = 1");
  $fields_archived = $request_field_archived->fetchAll();
  $archived_spaces=array();
  foreach($fields_archived as $field_archived ){
      array_push($archived_spaces , '/alfresco/webdav/Sites' .  str_replace('/', '/_' , gofast_cmis_space_get_drupal_path($field_archived->entity_id))) ;
  }
  $params['gofast_ajax_file_browser']['archived_spaces'] = $archived_spaces;
  $params['alfresco']['alf_ticket'] = gofast_cmis_get_user_ticket();
  global $user;
  $params['gofast_ajax_file_browser']['private_space_nid'] = gofast_og_get_user_private_space($user, FALSE);;
  drupal_add_js($params,'setting');

  libraries_load('ztree');
}

function gofast_ajax_file_browser_library() {
  $libraries = array();
  $path = drupal_get_path('module', 'gofast_ajax_file_browser');
  $lib = 'sites/all/libraries';
  $libraries['gofast_ajax_file_browser'] = array(
    'title' => 'Gofast Ajax File Browser Client',
    'version' => '1.0',
    'js' => array(
      $lib . '/ajax_file_browser/ITHitWebDAVClient.js' => array(
        'group' => JS_LIBRARY, // JS_DEFAULT
        'every_page' => TRUE,
        'weight' => 10
      ),$lib . '/NProgress/nprogress.js' => array(
        'group' => JS_LIBRARY, // JS_DEFAULT
        'every_page' => TRUE,
        'weight' => 1
      ),$path . '/gofast_ajax_file_browser.js' => array(
        'group' => JS_THEME + 10,
        'every_page' => TRUE,
        'weight' => 10,
        'scope' => 'footer'
      ),$path . '/gofast_ajax_file_browser_mobile.js' => array(
        'group' => JS_THEME + 10,
        'every_page' => TRUE,
        'weight' => 15,
        'scope' => 'footer'
      )
    ),
    'css' => array(
      $path . '/css/gofast_ajax_file_browser.css' => array(
        'group' => CSS_THEME,
        'every_page' => TRUE,
        'weight' => 10
      ),
      $lib . '/NProgress/nprogress.css' => array(
        'group' => JS_THEME,
        'every_page' => TRUE,
        'weight' => 1
      ),
    )
  );
  return $libraries;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function gofast_ajax_file_browser_form_user_login_block_alter(&$form, &$form_state) {
  $form['#submit'][] = 'gofast_ajax_file_browser_login_submit';
}

/**
 * Submit callback for user login form.
 */
function gofast_ajax_file_browser_login_submit(&$form, &$form_state) {
  $account = user_load_by_name($form_state['values']['name']);
  _gofast_set_user_key($account->uid, $form_state['values']['pass']);
  user_save($account);
}

/**
 * Implements hook_user_login()
 *
 * The user just logged out.
 *
 * @param object $account
 *  The user object on which the operation was just performed.
 */
function gofast_ajax_file_browser_user_login($account) {
  // Delete ITHit/Alfresco session.
   setcookie('JSESSIONID', '0', 0, '/alfresco/', "", true, true);
   setcookie('JSESSIONID', '0', 0, '/alfresco', "", true, true);
}

/**
 * Implements hook_user_logout()
 *
 * The user just logged out.
 *
 * @param object $account
 *  The user object on which the operation was just performed.
 */
function gofast_ajax_file_browser_user_logout($account) {
  // Delete ITHit/Alfresco session.
   setcookie('JSESSIONID', '0', 0, '/alfresco/', "", true, true);
   setcookie('JSESSIONID', '0', 0, '/alfresco', "", true, true);
}

/**
 * This function returns an accessible webdav location (Main location is prioritized)
 * @param array of webdav path
 */
function gofast_ajax_file_browser_get_alfresco_item_accessible_location($node) {
  global $user;
  if(isset($node->{GOFAST_CMIS_MAIN_LOCATION_FIELD}[LANGUAGE_NONE])){
    $main_location = $node->{GOFAST_CMIS_MAIN_LOCATION_FIELD}[LANGUAGE_NONE];
  }
  else{
    $main_location = array();
  }
  $accessible_location = '';
    if (isset($node->field_emplacement[LANGUAGE_NONE])) { // This is a document
      foreach (array_merge($main_location, $node->field_emplacement[LANGUAGE_NONE]) as $webdav_path) {
        //We got the full path, including potential folders. We are now searching for the space path associated
        $webdav_path = explode('/', $webdav_path['value']);
        $webdav_path = array_reverse($webdav_path);
        foreach($webdav_path as $key => $crumb){
          if(substr($crumb, 0, 1) == '_'){
            //We found a space
            break;
          }
          else{
            //We found a folder
            unset($webdav_path[$key]);
          }
        }
        $webdav_path = array_reverse($webdav_path);
        $webdav_path = implode('/', $webdav_path);
        $item = gofast_cmis_item_get_by_path($webdav_path);
        if (isset($item->properties['gofast:nid']) && $item->properties['gofast:nid'] != false) {
          $node_member = node_load($item->properties['gofast:nid']);
          if(isset($node_member->nid)){

            if( gofast_userlist_og_is_user_member_of_space($node_member->nid, $user)
                || in_array($user->uid, gofast_og_get_members($node_member, 'active'), true)
                || $user->uid == 1
            ){
              //We check the membership of the user
              $accessible_location = $webdav_path;
              break;
            }
          }
        }
      }
    }
    else { // This is a space
      if (isset($node->{GOFAST_CMIS_FOLDER_REFERENCE_FIELD}) && node_access('view', node_load($node->nid))) {
        // Workaround
        if (isset($node->{GOFAST_CMIS_FOLDER_REFERENCE_FIELD}[LANGUAGE_NONE])) {
          $item = gofast_cmis_item_get($node->{GOFAST_CMIS_FOLDER_REFERENCE_FIELD}[LANGUAGE_NONE]['0']['value']);
          if(isset($item->properties['cmis:path'])){
          $accessible_location = $item->properties['cmis:path'];
        }
          else{ //Can happend if a user is in a space page but isn't member of the space
            $accessible_location = NULL;
          }
        }

      }
    }
  return $accessible_location;
}

/**
 * hook_preprocess_page
 *
 */
function gofast_ajax_file_browser_preprocess_page(&$vars) {
      global $user;
      drupal_add_library('gofast_ajax_file_browser', 'gofast_ajax_file_browser', TRUE);

      if (isset($vars['node'])) {
        $title = $vars['node']->title;
        $selected_folder = gofast_ajax_file_browser_get_alfresco_item_accessible_location($vars['node']);
      }

      $ticket = gofast_cmis_get_user_ticket();
      if($ticket == FALSE){
        $ticket = gofast_cmis_retrieve_and_store_ticket($user);
      }

      drupal_add_js(array(
        'ext_map' => gofast_taxonomy_get_map_extensions_icons(),
        'ticket' => $ticket,
        'title' => $title,
        'selectedFolder' => str_replace('/Sites', '', $selected_folder),
        'statusCode' => array(
          'MOBILE_BROWSER_UPLOAD_STATUS_DOCUMENT_ALREADY_EXISTED' => MOBILE_BROWSER_UPLOAD_STATUS_DOCUMENT_ALREADY_EXISTED,
          'MOBILE_BROWSER_UPLOAD_STATUS_NOT_ALLOWED' => MOBILE_BROWSER_UPLOAD_STATUS_NOT_ALLOWED,
          'MOBILE_BROWSER_UPLOAD_STATUS_SUCCESS' => MOBILE_BROWSER_UPLOAD_STATUS_SUCCESS,
          'MOBILE_BROWSER_UPLOAD_STATUS_DOCUMENT_ERROR' => MOBILE_BROWSER_UPLOAD_STATUS_DOCUMENT_ERROR
        ),
        'maxUploadSize' => file_upload_max_size(),
        'ticket' => gofast_cmis_ticket_validate()
          ), 'setting');
}

/**
 * Hook theme
 * @return type
 */
function gofast_ajax_file_browser_theme() {
  return array(
      'main_ajax_file_browser' => array(
          'template' => 'tpl/main_ajax_file_browser',
      ),
      'ajax_file_browser' => array(
          'template' => 'tpl/ajax_file_browser',
      ),
      'ajax_file_browser_mobile' => array(
          'template' => 'tpl/ajax_file_browser_mobile',
      ),
    'gofast_ajax_file_brower_list_children_path' => array(
      'template' => 'tpl/ajax_file_brower_list_children_path',
    )
  );
}

/**
 * Implements hook_menu()
 */
function gofast_ajax_file_browser_menu() {
  $items = array();

  $items['ajax/getnidfromhref'] = array(
      'page callback' => 'gofast_ajax_file_browser_get_nid_from_href',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'access callback' => 'user_access',
      'delivery callback' => 'gofast_ajax_delivery'
  );

  $items['gofast/browser'] = array(
    'page callback' => 'gofast_ajax_file_browser_browser',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['gofast/browser/path/get_rules'] = array(
    'page callback' => 'gofast_ajax_file_browser_get_rules',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['node/gofast/browser'] = array(
    'page callback' => 'gofast_ajax_file_browser_browser',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['ajax_file_browser/right/%'] = array(
    'page callback' => 'gofast_ajax_file_browser_right',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['ajax_file_browser/get_reference'] = array(
    'page callback' => 'gofast_ajax_file_browser_get_reference',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['ajax_file_browser/is_confidential'] = array(
    'page callback' => 'gofast_ajax_file_browser_get_is_confidential_from_reference',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['ajax_file_browser/is_internal'] = array(
    'page callback' => 'gofast_ajax_file_browser_get_is_internal_from_reference',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['ajax_file_browser/bookmark_folder'] = array(
    'page callback' => 'gofast_ajax_file_browser_bookmark_folder',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['ajax_file_browser/unbookmark_folder'] = array(
    'page callback' => 'gofast_ajax_file_browser_unbookmark_folder',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['ajax_file_browser/validate_delete_folder_template'] = array(
    'page callback' => 'gofast_ajax_file_browser_validate_delete_folder',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );
  $items['gofast/browser/check_favorite_folders'] = array(
    'page callback' => 'gofast_ajax_file_browser_check_favorite_folder',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );
  $items['ajax_file_browser/folder/get_documents'] = array(
    'page callback' => 'gofast_ajax_file_browser_get_documents_into_folder',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );
  $items['ajax_file_browser/get_icon'] = array(
    'page callback' => 'gofast_ajax_file_browser_get_icon',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
  );
  $items['ajax_file_browser/%/get_delete_modal_content'] = array(
    'page callback' => 'gofast_node_delete_modal_template',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'page arguments' => array(1, TRUE),
  );
  $items['ajax_file_browser/download_selected_files'] = array(
    'page callback' => 'gofast_download_selected_files',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access'
    );
  $items['ajax_file_browser/check_file_download_status'] = array(
    'page callback' => 'gofast_ajax_file_browser_get_download_result',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => TRUE,
    );
  $items['ajax_file_browser/get_unzip_modal_content'] = array(
    'page callback' => 'gofast_node_unzip_modal_template',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'page arguments' => array(1, TRUE),
  );
  
  $items['ajax_file_browser/get_compress_modal_content'] = array(
    'page callback' => 'gofast_node_compress_modal_template',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'page arguments' => array(1, TRUE),
  );
  
  $items['ajax_file_browser/unzip_file'] = array(
    'page callback' => 'gofast_ajax_file_browser_unzip_file',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'page arguments' => array(1, TRUE),
  );

  $items['ajax_file_browser/compress_files/check_status'] = array(
    'page callback' => 'gofast_ajax_file_browser_check_compression_status',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );
  
  $items['ajax_file_browser/compress_files'] = array(
    'page callback' => 'gofast_ajax_file_browser_compress',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'page arguments' => array(1, TRUE),
  );
  
  
  $items['ajax_file_browser/unzip_file/check_status'] = array(
    'page callback' => 'gofast_ajax_file_browser_unzip_file_check_status',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'page arguments' => array(1, TRUE),
  );
  $items['ajax_file_browser/clear_unzip_session'] = [
    'page callback' => 'gofast_ajax_file_browser_clear_unzip_session',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'page arguments' => array(1, TRUE),
  ];
  $items["ajax_file_browser/get_disabled_tabs/%"] = array(
    "page callback" => "gofast_ajax_file_browser_get_disabled_tabs",
    "type" => MENU_CALLBACK,
    "page arguments" => array(2),
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'delivery callback' => 'gofast_ajax_delivery'
  );


  return $items;
}

function gofast_ajax_file_browser_browser() {
  if(gofast_mobile_is_phone()){
      header("Location: /home_page_navigation?" . $_SERVER['QUERY_STRING'] .  "#navBrowser");
  }
  return theme('ajax_file_browser', array('browser' => TRUE));
}

function gofast_ajax_file_browser_get_rules(){
    $href = $_POST['href'];
    $nid = gofast_og_get_group_id_from_title_2($href,true);
    //Check if the current user can write on this group
    if (og_user_access('node', $nid, 'create alfresco_item content') == 1){
        //Check if the group is not archived
        if (!gofast_group_is_archive(node_load($nid))){
            print 0;
        }else{
            print 1;
        }
    }else{
        print 2;
    }
    exit;
}

function gofast_ajax_file_browser_get_nid_from_href($href = null, $as_admin = FALSE) {

  $href = empty($href) ? $_POST["href"] : $href;
  $href = empty($href) ? $_GET["href"] : $href;
  $href = rawurldecode($href);
  $href = str_replace("/alfresco/webdav", "", $href);

  $as_admin = isset($_GET["force"]) ? TRUE : $as_admin;

  $cmis_object = new stdClass();
  $cmis_object = &drupal_static("{cmis_object}" . $href, new stdClass());
  if (empty((array) $cmis_object)) {
    $cmis_object = gofast_cmis_item_get_by_path($href, $as_admin);
  }
  $nid = isset($cmis_object->properties['gofast:nid']) ? $cmis_object->properties['gofast:nid'] : FALSE;
  if($nid == FALSE){
    $reference = $cmis_object->properties['alfcmis:nodeRef'];
    $nid = gofast_ajax_file_browser_get_nid_from_reference($reference);
  }
  // check if there is a replication issue
  if(
    $nid == FALSE
    && isset($cmis_object->properties['alfcmis:nodeRef']) // the item actually exists
    && $cmis_object->properties['cmis:objectTypeId'] != "cmis:folder" // it's not a folder
    && !isset($cmis_object->properties['gofast:preventDelete']) // but the gofast aspect is missing, which hints to a replication issue
  ) {
    $name = $cmis_object->properties['cmis:name'];
    $person = $cmis_object->properties['cmis:createdBy'];
    $language = user_load_by_name(trim($person))->language ?: LANGUAGE_NONE;
    $parent_path = explode("/", $href);
    array_pop($parent_path);
    $parent_path = implode("/", $parent_path);
    if($cmis_object->properties["cmis:objectTypeId"] != "folder") {
      $href = $parent_path;
    }
    $gid = gofast_og_get_group_id_from_title_without_cmis($parent_path, TRUE);
    gofast_cmis_create_node_programmatically($reference, $person, $name, FALSE, $language, FALSE, $gid, $href, "");    
    $nid = db_select("node", "n")
      ->fields("n", array("nid"))
      ->condition("title", $name)
      ->orderBy("created", "DESC")
      ->range(0, 1)
      ->execute()->fetchCol()[0];
  }
  if ($nid) {
    //check if nid exists
    $node = node_load($nid);
    if(!isset($node->nid)){
        $nid = false;
    }
  }
  if(!$nid && $_GET["essential_close"] == "true"){
    $nid =  gofast_og_get_group_id_from_title_2(htmlspecialchars_decode($href), TRUE);
  }
  return $nid;
}

function gofast_ajax_file_browser_get_reference_from_href($href, $asAdmin = FALSE){
  $href = empty($href) ? $_POST["href"] : $href;
  $href = empty($href) ? $_GET["href"] : $href;
  $href = rawurldecode($href);
  $href = str_replace("/alfresco/webdav", "", $href);

  $cmis_object = gofast_cmis_item_get_by_path($href, $asAdmin);
  $reference = $cmis_object->properties['alfcmis:nodeRef'];
  return $reference;
}

function gofast_ajax_file_browser_get_is_confidential_from_reference(){
  $reference = $_POST["reference"];
  $is_confidential = false;
  $nid = gofast_ajax_file_browser_get_nid_from_reference($reference);
  $is_confidential = gofast_cmis_is_node_confidential($nid);
  print $is_confidential;
  exit;
}
function gofast_ajax_file_browser_get_is_internal_from_reference()
{
  $reference = $_POST["reference"];
  $is_internal = false;

  $nid = gofast_cmis_node_get_by_reference($reference);

  if (!empty($nid)) {
    $is_internal = gofast_cmis_is_node_internal($nid);
  }
  print $is_internal;
  exit;
}

function gofast_ajax_file_browser_get_nid_from_reference($reference) {
  //on gere le cas ou parfois, on recevrai non pas une reference mais un numero de noeud (ca arrive dans le module WF parfois)
  //on sait qu'une reference possède au moins un - , un nid non
  if (strpos($reference, "-") == FALSE) {
    //on enleve une eventuelle chaine "workspace://SpacesStore/" qui precederait le nid
    $reference = str_replace("workspace://SpacesStore/", "", $reference);
    $nid = $reference;
  }
  else {
    $nid = db_select('field_data_field_reference', 'fdfr')
            ->fields('fdfr', array('entity_id'))
            ->condition('field_reference_value', $reference, '=')
            ->execute()
            ->fetchField();
  }
  return $nid;
}

function gofast_ajax_file_browser_right($op){
  $path = $_POST['path'];

  //Try to get nid from path
  $path_decoded = rawurldecode($path);
  $nid = gofast_ajax_file_browser_get_nid_from_href($path_decoded);

  if(is_numeric($nid)){
    if(node_access($op, node_load($nid))){
      print "GRANTED";
    }else{
      print "REFUSED";
    }
  }else{ //Grant by default
    print "GRANTED";
    exit;
  }
}

function gofast_ajax_file_browser_get_reference(): void {
  $paths = $_POST['paths'];

  $references = [];
  foreach ($paths as $path) {
    $path_decoded = rawurldecode($path);
    $references[] = gofast_ajax_file_browser_get_reference_from_href($path_decoded);
  }
  
  drupal_json_output($references);
}


/**
 * This form is used to upload documents.
 * @param type $form
 * @param array $form_state
 * @return type
 */
function gofast_ajax_file_browser_form($form, &$form_state) {
  $form['gofast_file_browser_upload_input'] = array(
    '#type' => 'file',
    '#title' => t("Select file(s) to upload", array(), array('context' => 'gofast:ajax_file_browser')),
    '#attributes' => array(
      'multiple' => TRUE,
      //'id' => 'edit-gofast-file-browser-upload-input'
    ),
  );
  $form['resize'] = array(
    '#type' => 'markup',
    '#value' => "",
    '#weight' => 51,
    '#suffix' => "<script>jQuery('#gofast_basicModal .min-h-500px').removeClass('min-h-500px');</script>"

  );
  return $form;
}

/**
 * Hook form validate
 * @param type $form
 * @param array $form_state
 */
function gofast_ajax_file_browser_form_validate($form, &$form_state){
}

/**
 * Hook form submit
 * @param type $form
 * @param type $form_state
 */
function gofast_ajax_file_browser_form_submit($form, &$form_state) {
  $commands = array();
  $commands[] = gofast_command_callback('Gofast.ITHit.uploadFiles');
  print ajax_render($commands);
  exit;
}

function gofast_ajax_file_browser_views_post_execute(&$view) {
    if($view->name === "gofast_flag_bookmarks" && $view->current_display !== "page_1" && $view->current_display !== "page_2"){
//        global $user;
//
//        //Check folder bookmarked
//        $folder_bookmarks = db_query("SELECT fbid,path FROM gofast_bookmark_folder WHERE uid=" . $user->uid)->fetchAll();
//        foreach($folder_bookmarks as $folder_bookmark){
//            $path = $folder_bookmark->path;
//
//            $display_path = $folder_bookmark->path;
//            if(substr($display_path, -1, 1) == "/"){
//                $display_path = substr($display_path, 0, -1);
//            }
//            $folder_name = array_pop(explode("/", $display_path));
//
//            $result = new stdClass();
//            $result->users_node_id = $user->uid;
//            $result->nid = "gofast/browser?path=" . rawurlencode($path);
//            $result->node_title = $folder_name . "[GFOLDER]";
//
//            $path = str_replace("/alfresco/webdav", "", $path);
//            $result->field_field_emplacement = array(
//                0 => array(
//                    "rendered" => array(
//                        "#markup" => $path,
//                        "#access" => 1,
//                    ),
//                    "raw" => array(
//                        "#value" => $path,
//                    )
//                )
//            );
//            $view->result[] = $result;
//        }
    }
}

function gofast_ajax_file_browser_folder_is_bookmark($reference){
    global $user;
    $folder_bookmarks = db_query("SELECT folder_reference FROM gofast_bookmark_folder WHERE uid=" . $user->uid)->fetchAll();
    foreach($folder_bookmarks as $folder_bookmark){
        if($reference == $folder_bookmark->folder_reference){
            return TRUE;
        }
    }
    return FALSE;
}

/*
 * Bookmark a folder
 */
function gofast_ajax_file_browser_bookmark_folder($path = null){
    global $user;

    $reference = null;
    if($path === null){
        //Retrieve path param
        $href = $_POST['href'];
        $path = rawurldecode($href);
    }
    if(isset($_POST["folder_reference"])){
      $reference = gofast_xss_clean($_POST["folder_reference"]);
    }
    if($reference == null){
      $reference = gofast_ajax_file_browser_get_reference_from_href($path);
    }
    
    //Bookmark this element
    $exists = count(db_query("SELECT folder_reference FROM gofast_bookmark_folder WHERE folder_reference='" . $reference . "' AND uid='" . $user->uid . "'")->fetchAll()) > 0;
    if($exists){
      gofast_ajax_file_browser_unbookmark_folder($reference);
      return;
    }

    if(!$exists){
        $fbid = db_insert('gofast_bookmark_folder')
            ->fields(array(
              'folder_reference' => $reference,
              'uid' => $user->uid,
              'timestamp' => REQUEST_TIME,
            ))
            ->execute();
        if($fbid != null){
          db_insert("gofast_bookmark_collections__bookmark_folder")
          ->fields(array(
            'bcid' => null,
            'fbid' => $fbid,
          ))
          ->execute();
          print "flag";
          exit;
        }
    }
}

/*
 * Unbookmark a folder
 */
function gofast_ajax_file_browser_unbookmark_folder($folder_reference){
    global $user;
    //Unookmark this element
    db_query("DELETE FROM gofast_bookmark_folder WHERE uid=" . $user->uid . " AND folder_reference='" . $folder_reference . "'");
}

function gofast_ajax_file_browser_get_fbid_from_reference($reference){
  global $user;
  $result = db_select("gofast_bookmark_folder", "gbf")
            ->fields("gbf", array("fbid"))
            ->condition("gbf.folder_reference", $reference, "=")
            ->condition("gbf.uid", $user->uid, "=")
            ->execute()
            ->fetchCol();
  $fbid = $result[0];
  return $fbid;
}

/**
 * Implements HOOK_FORM()
 *
 * @see function gofast_ajax_file_browser_add_template_folder_form_validate()
 * @see function gofast_ajax_file_browser_add_template_folder_form_submit()
 *
 * @param type $form
 * @param type $form_state
 * @return $form the Add template folder form
 */
function gofast_ajax_file_browser_add_template_folder_form($form, &$form_state){


    $form['description'] = array(
        '#markup' => '<h5>'
        . t('Choose the folder template you want to implement in the selected space: ')
        . '</h5>'
        . '<span>'
        . t('(Unfold the tree to discover the pattern of the template)')
        . '</span>'
    );


    $from_template = isset($_GET["template"])? TRUE : FALSE;
    $param_path = parse_url($_SERVER['HTTP_REFERER']);
    parse_str($param_path['query'],$drupal_path);
    $template_nid = null;
    if($from_template){
      $template_nid = $_GET["template"];
    }
    if(!empty($drupal_path['path'])){
        $form['#path'] = $drupal_path['path'];
    }
    // This is for the user defined templates
    $form['ztree_templates'] = array();
    $form['ztree_templates']['#attributes'] = array(
      'class' => array('ztree_template_folder_class')
    );
    $templates_options = gofast_cmis_get_folder_templates_option();
    ## check alfresco status
    if (gofast_cmis_check_alfresco_status()) {

        $available_templates = $templates_options;
        $list_templates = array();
        $selected = array();
        foreach ($available_templates as $value) {
              $path = $value['path'];
              $key = $value['id'];
              $list_templates[$path] = urldecode(str_replace('/webdav', '', $path));
              if(!empty($value['descendants'])){
                  $list_templates = array_merge($list_templates,$value['descendants']);
              }
              if($from_template && $value->nid == $template_nid){
                $selected['name'] = array_shift(explode('.', $value['name']));
              }
        }


        ## store all folders templates in the form
        $form['templates'] = array(
          '#type' => 'select',
	        '#multiple' => true,
          '#name' => 'templates',
          '#options' => gofast_ztree_get_drupal_path_from_webdav_path($list_templates),
          '#attributes' => array(
            'class' => array('gofast_display_none')
          )
        );

        if (empty($list_templates)) {
          $form['empty_ztree_templates'] = array(
            '#markup' => t('There is no templates available yet.', array(), array('context' => 'gofast:gofast_cmis')),
          );
          $form['empty_ztree_templates']['#group'] = 'group_template_file';
          $form['#groups']['group_template_file']->children[] = 'empty_ztree_templates';
          $form['#group_children']['empty_ztree_templates'] = 'group_template_file';
        }

        $form['ztree_templates']['#group'] = 'group_template_file';
        if (!isset($form['#groups']['group_template_file'])) {
          $form['#groups']['group_template_file'] = new stdClass();
        }
        $form['#groups']['group_template_file']->children[] = 'ztree_templates';
        $form['#group_children']['ztree_templates'] = 'group_template_file';

        $form['templates']['#group'] = 'group_template_file';
        $form['#groups']['group_template_file']->children[] = 'templates';
        $form['#group_children']['templates'] = 'group_template_file';
    }

    // This is for vertical tab reorganization
    $form['empty_template']['#group'] = 'group_empty_file';
    if (!isset($form['#groups']['group_empty_file'])) {
      $form['#groups']['group_empty_file'] = new stdClass();
    }
    $form['#groups']['group_empty_file']->children[] = 'empty_template';
    $form['#group_children']['empty_template'] = 'group_empty_file';

    $form['#after_build'][] = 'gofast_ztree_after_build';
    $form['#after_build'][] = 'gofast_ztree_folders_templates_after_build';
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit', array(), array('context' => 'gofast')),
      '#id' => 'submit_template_folder',
      '#attributes' => array('class' => array('btn-success'))
    );

    return $form;
}

/**
 * Implements HOOK_FORM_validate()
 *
 * @param type $form
 * @param type $form_state
 */
function gofast_ajax_file_browser_add_template_folder_form_validate($form, &$form_state){

    $form_id = $form['form_id'];
    if(empty($form['templates']['#value'])){
        $commands[] = gofast_command_toast_message(t("You need to select at least 1 template", array(), array('context' => 'gofast')), "warning");
        print ajax_render($commands);
        exit;
    }
    if($form_id != 'group_node_form'){
	## get ajax file browser location
	$drupal_path = $form['#path'];
	$nid = gofast_og_get_group_id_from_title_2(str_replace("/alfresco/webdav", "", $drupal_path), true);
	//Check if the current user can write on this group
	if (!og_user_access('node', $nid, 'create alfresco_item content')){
	    $commands[] = ctools_modal_command_dismiss();
	    $commands[] = gofast_command_toast_message(t("You can't create a folder template here! Please check that you are not in an archived area or that you have the correct rights"),"error");
	    print ajax_render($commands);
	    exit;
	}
    }
}

/**
 * given an array of cmis paths, removing subpaths from the array
 */
function gofast_folder_clean_subpaths(array $children_path): array {
  // we make sure the shortest values have the shortest index
  usort($children_path, function($a, $b) {
    // returns 0 if equal, 1 if left-side is greater, -1 if right-side is greater
    return strlen($a) <=> strlen($b);
  });

  // will receive the filtered values
  $accumulator = [];
  // number of directory separators to know how deep-nested we are in the folders
  $ds_count = 0;

  foreach ($children_path as $child_path) {
    // in case we have an associative array, we initialize the directory separator count here
    if ($ds_count == 0) {
      $ds_count = count(explode("/", $child_path));
      $accumulator[] = $child_path;
      continue;
    }
    // subfolders go nowhere
    if (count(explode("/", $child_path)) > $ds_count) {
      continue;
    }
    // if we get through here, it seems we're good
    $accumulator[] = $child_path;
  }
  return $accumulator;
}

/**
 * Implements HOOK_FORM_submit()
 *
 * @param type $form
 * @param type $form_state
 */
function gofast_ajax_file_browser_add_template_folder_form_submit($form, &$form_state){

  $node = $form['#node'];
  $space_types = gofast_og_node_types();
  $form_type = in_array($node->type, gofast_og_content_bundles($space_types)) ? 'space content' : (in_array($node->type, array_keys($space_types)) ? 'space' : NULL);

  $asAdmin = TRUE;

  ## case of add space
  if ($form_type === 'space') {

    ## get ajax file browser location
    $nid = $form_state['values']['nid'];
    $drupal_path = gofast_cmis_space_get_webdav_path($nid);

    ## get reference of ajax file browser location
    $item_reference = gofast_ajax_file_browser_get_reference_from_href($drupal_path);

    ## get all templates selected
    $paths_template_selected = $form['og_ztree_templates_folder']['templates']['#value'];
  } else { ##case of ajax file browser
    ## get ajax file browser location
    $drupal_path =  $form['#path'];

    ## get reference of ajax file browser location
    $item_reference = gofast_ajax_file_browser_get_reference_from_href($drupal_path);
    $paths_template_selected = $form['templates']['#value'];

    ## get all folders children to verify if exist
    $space_children = gofast_cmis_get_children($drupal_path);
  }

  ## reach all template to create
  foreach ($paths_template_selected as $path_template_selected) {
    if ($form_type !== 'space content' && in_array($drupal_path . (str_replace("/Sites/FOLDERS TEMPLATES", "", $path_template_selected)), (array) $space_children)) {
      $form_state['exist'] = true;
      continue;
    }

    ## get 1st level children
    $children_item = gofast_cmis_get_children($path_template_selected, "folders", $asAdmin);
    $children_item = gofast_folder_clean_subpaths($children_item);

    ## create all folders templates children recursively
    gofast_folder_template_create_children($children_item, $item_reference);
  }
}

/**
 * Create all children of folder template given in paramater
 *
 * @param array $children_item : all paths of items to create (1st level)
 * @param [type] $location_alfresco_id : location to create the folder
 * @return void
 */
function gofast_folder_template_create_children($children_path, $location_alfresco_id)
{
  ## Reach all children  (recursively)
  foreach ($children_path as $child_path) {
    if (substr($child_path, -1) === "/") {
      continue;
    }

    $child_item = gofast_cmis_item_get_by_path($child_path);

    ## Get children data
    $folder_name = $child_item->properties['cmis:name'];

    ## Create folder
    $new_folder = gofast_cmis_item_folder_insert($folder_name, $location_alfresco_id, TRUE);
    ## Get children of current folder
    $children_item = gofast_cmis_get_children($child_path, "folders", TRUE);
    $children_item = gofast_folder_clean_subpaths($children_item);
    // $children_item = cmisapi_getChildren($repository, $children_id)->objectList;

    if (!empty($children_item)) {
      ## Reach recursively children in order to create it
      gofast_folder_template_create_children($children_item, $new_folder->properties['alfcmis:nodeRef']);

    }
  }
}

function gofast_ajax_file_browser_validate_delete_folder(){
    global $user;

    $folder = empty($folder) ? $_POST["folder"] : $folder;
    $folder = empty($folder) ? $_GET["folder"] : $folder;

    $reference = gofast_ajax_file_browser_get_reference_from_href($folder);
    $item = gofast_cmis_item_get($reference);

    $creator_name = $item->properties['cmis:createdBy'];

    if($creator_name != $user->name){
	return false;
    }
}

/**
 *  Function gofast_ajax_file_browser_check_favorite_folder()
 *  Delete favorite folder if exist
 * @return int 1 if favorite was delete 0 else
 */
function gofast_ajax_file_browser_check_favorite_folder(){
  $folders = empty($folders) ? gofast_xss_clean($_POST["folders"]) : $folders;
  $folders = empty($folders) ? gofast_xss_clean($_GET["folders"]) : $folders;

  $has_deleted_bookmarks = 0;
  foreach ($folders as $folder) {
    $item = gofast_cmis_item_get_by_path(str_replace('/alfresco/webdav', "", urldecode($folder)));
    if (isset($item->id)) {
      $result = db_select('gofast_bookmark_folder', 'bf')
        ->fields('bf', array('fbid'))
        ->condition('folder_reference', $item->properties['alfcmis:nodeRef'], '=')
        ->execute()
        ->fetchAll();
      if (!empty($result)) {
        foreach ($result as $key => $value) {
          db_query("DELETE FROM gofast_bookmark_folder WHERE fbid = '" . $value->fbid . "'");
        }
        $has_deleted_bookmarks = 1;
      }
    }
  }
  echo $has_deleted_bookmarks;
}

function gofast_ajax_file_browser_get_documents_into_folder(){
  $folder_path = gofast_xss_clean($_GET['folder_path']);
  $int = gofast_xss_clean($_GET['int']);
  $documents = gofast_cmis_get_children($folder_path,'documents');
  $theme_list_documents = theme('gofast_ajax_file_brower_list_children_path', array('documents' => $documents));
  $result = array(
    'theme_list_documents' => $theme_list_documents,
    'int' => $int
  );
  print json_encode($result);
  exit;
}

function gofast_ajax_file_browser_get_icon(){
  $path = gofast_xss_clean($_GET['folder_path']);
  $int = gofast_xss_clean($_GET['int']);
  $nid = gofast_ajax_file_browser_get_nid_from_href($path);
  if(empty($nid)){
    $item = gofast_cmis_item_get_by_path($path);
    $reference = $item->properties['alfcmis:nodeRef'];
    $parents = gofast_cmis_webservice_get_node_parents($reference);
    if(count($parents) > 1){
      $icon = "<span class='fas fa-folders' style='color:#3498db'></span>";
      $locations = theme('gofast_tooltip_emplacements', array('locations' => $parents));
    }else{
      $icon = "<span class='fa fa-folder'></span>";
    }
  }else{
    $node = node_load($nid);
    $node_ref = $node->reference;
    $locations = gofast_cmis_webservice_get_node_parents($node_ref);
    if (count($locations) > 1){
      $locations = theme('gofast_tooltip_emplacements', array('locations' => $locations));
    }
    $icon = theme('gofast_node_icon_format', array('node' => $node));
  }
  $result = array(
    'icon' => $icon,
    'locations' => $locations,
    'int' => $int
  );
  print json_encode($result);
  exit;
}

function gofast_main_ajax_file_browser()
{
  $browser = theme('ajax_file_browser_mobile');
  return theme('main_ajax_file_browser', array('ajax_browser'=> $browser));
}


/**
 * Implements hook_block_info
 */
function gofast_ajax_file_browser_block_info()
{
  $blocks['main_ajax_file_browser'] = array(
    'info' => t('main_ajax_file_browser', array(), array('context' => 'gofast')),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_info
 */
function gofast_ajax_file_browser_block_view($delta = '')
{
  $block = array();
  switch ($delta) {
    case 'main_ajax_file_browser':
      $block['subject'] = '';
      $content = gofast_main_ajax_file_browser();
      $block['content'] = $content;
      break;

  }
  return $block;
}

/**
 *
 * Processes Unzipping for files given the node details through $_POST
 *
 * @throws \Exception
 */
function gofast_ajax_file_browser_unzip_file() {
  $path = $_POST['item'];
  
  $main_location =  str_replace('/alfresco/webdav','',dirname($path));
  $main_location = urldecode($main_location);

  /** Get the alfresco parent store ID of a node   */
  $parent_item = gofast_cmis_item_get_by_path($main_location);
  $item = gofast_cmis_item_get_by_path(str_replace('/alfresco/webdav', "", urldecode($path)));
 
  $response = gofast_cmis_extract_selected_node_using_alfresco_service($item, $parent_item);
  drupal_json_output($response);
}

/**
 * Returns a status report of the unzipping process
 */
function gofast_ajax_file_browser_unzip_file_check_status() {
  if($_GET['isProgressionComplete'] === 'true'){
    drupal_json_output(variable_get('unzip_process_result', null));
  }else{
    drupal_json_output(variable_get('unzip_status', null));
  }
  return json_encode(array(
    'status' => 'error',
    'message' => t('An error occured while compressing the selected files'),
  ));
}

/**
 * Register a new download process  
 * Stores the download process id in the session
 * Returns JSON object with the download id and starts the job on the server.
 */
function gofast_download_selected_files($files = [], $AS_ADMIN = FALSE): void{
  if(empty($files)){
    $files = $_POST['files'];
  }
  
  if(empty($files)){  
    drupal_json_output([
      'status' => 'error',
      'message' => t('No files selected'),
    ]);
  }
  
  $uuid = uuid_generate();
  $download_id = 'gdf_'.rand(0, 1000).'_user_'.$uuid;
  
  drupal_json_output([
    'id' => $download_id,
    'files' => $files,
    'status' => 'download_processing',
    'message' => t('Downloading files'),
  ]);
  fastcgi_finish_request();
  gofast_ajax_file_browser_initialize_file_download_process($download_id, $files, $AS_ADMIN);
}

/**
 * Retrieves the result of a file download process from the session and returns it as JSON.
 *
 * This function is designed to be called via AJAX to get the status of a file download process.
 * The download result is stored in the session with the key 'gofast_download_result_[download_id]'.
 *
 * @return void
 */
function gofast_ajax_file_browser_get_download_result(): void {
  // Get the 'download_id' parameter from the GET request.
  $id = $_GET['download_id'];
  
  // Retrieve the download result from the session using the provided 'download_id'.
  $result = variable_get('gofast_download_result_' . $id, null);
  
  // Check if the download result is not NULL and if the 'download_id' matches the result's 'id'.
  if ($result !== NULL && $id == $result->id) {
    drupal_json_output($result);
    //unlink the file after download
    fastcgi_finish_request();
    sleep(2);
    // Once the download result has been retrieved and sent to the client, remove it from the session.
    unlink('/var/www/d7/'.$result->file);
    variable_del('gofast_download_result_' . $id);
  } else {
    // If the download result is not found in the session or the 'id' doesn't match, return a default JSON response.
    drupal_json_output([
      'id' => $id,
      'status' => 'PENDING',
      'message' => t('IN PROGRESS'),
    ]);
  }
}

/**
 * Initializes the file download process for the given download ID and files.
 *
 * @param string $download_id
 *   The unique identifier for the download process.
 * @param array $files
 *   An array of files to be downloaded.
 */
function gofast_ajax_file_browser_initialize_file_download_process(string $download_id, array $files, bool $AS_ADMIN): void {
  // Validate the selected files before proceeding.
  $validatedNodes = gofast_ajax_file_browser_validate_selected_files($files);

  if (empty($validatedNodes->nodes->passedValidation)) {
    // If no files passed validation, create a FAILED result.
    $result = (object) [
      'id' => $download_id,
      'status' => 'FAILED', 
      'file' => '',
      'downloadedFiles' => $validatedNodes->nodes->passedValidation,
      'failedFiles' => $validatedNodes->nodes->failedValidation,
    ];
  } else {
    // Otherwise, proceed with initializing node compression.
    try {
      $file = gofast_cmis_initialize_node_compression($validatedNodes->nodes->passedValidation, $AS_ADMIN);
      // Create a COMPLETE result.
      $result = (object) [
        'id' => $download_id,
        'status' => 'COMPLETE', 
        'file' => str_replace('var/www/d7/', '', $file) ?? '',
        'downloadedFiles' => $validatedNodes->nodes->passedValidation,
        'failedFiles' => $validatedNodes->nodes->failedValidation,
      ];
    } catch (\Exception $e) {
      // Handle any exceptions that occur during node compression.
      $result = (object) [
        'id' => $download_id,
        'status' => 'FAILED',
        'file' => '',
        'exception' => $e->getMessage(), // Using getMessage() to get the exception message.
        'downloadedFiles' => [],
        'failedFiles' => [],
      ];
    }
  }
  
  variable_set('gofast_download_result_'.$download_id, $result);
}


/**
 * Validate the selected files and folders before downloading them
 * Checks if a resource is confidential or internal return a results object with 
 * nodes that passed validation and nodes that failed validation. 
 * 
 * @param array $files Array of files to validate
 *
 * @return stdClass Validation result object
 */
function gofast_ajax_file_browser_validate_selected_files(array $files): stdClass {

  $validation = new stdClass();
  $validation->nodes = (object) [
    'passedValidation' => [],
    'failedValidation' => [],
  ];

  foreach ($files as $file) {
    $nid = gofast_ajax_file_browser_get_nid_from_reference($file['nodeRef']);
    if(!$nid){
      $item = gofast_cmis_item_get($file['nodeRef']); 
      if(isset($item->properties['cmis:objectTypeId']) && $item->properties['cmis:objectTypeId'] === 'cmis:folder'){
        $isValid  = gofast_ajax_file_browser_validate_folder_download($file['nodeRef']); 
        if($isValid){
          $result = (object) [
            'nodeRef' => $file['nodeRef'],
            'isConfidential' => false,
            'isInternal' => false,
            'title' => $item->properties['cmis:name'],
            'result' => 'passed',
          ];
        } else{
          $result = (object) [
            'nodeRef' => $file['nodeRef'],
            'isConfidential' => TRUE,
            'isInternal' => FALSE,
            'title' => $item->properties['cmis:name'],
            'folderErrorMessage' => t("This folder contains some confidential documents hence cannot be downloaded", [], ['context' => 'gofast:gofast_cmis']),
            'result' => 'failed'
          ];
        }

        $validation->nodes->{$result->result . 'Validation'}[] = $result;
      }
    } else {
      $is_confidential = gofast_cmis_is_node_confidential($nid);
      $is_internal = gofast_cmis_is_node_internal($nid);

      $result = (object) [
        'nodeRef' => $file['nodeRef'],
        'isConfidential' => $is_confidential,
        'isInternal' => $is_internal,
        'title' => gofast_cmis_get_node_field_from_nid('title', $nid),
        'result' => ($is_confidential || $is_internal) ? 'failed' : 'passed'
      ];
      $validation->nodes->{$result->result . 'Validation'}[] = $result;
    }
  }

  return $validation;
}

/**
 * Validate the selected folders before downloading them
 * Checks if a resource is confidential or internal return a results object with 
 * nodes that passed validation and nodes that failed validation. 
 * 
 * @param string $folderRef The reference of the folder to validate
 *
 * @return stdClass Validation result object
 */
function gofast_ajax_file_browser_validate_folder_download($nodeRef, $targetValue = "Confidential", $propertyName = "gofast:criticity"){
  $ticket_admin = gofast_cmis_webservice_generate_alfresco_ticket("admin");
  $query = "?alf_ticket=" . $ticket_admin . "&nodeRef=" . $nodeRef . "&targetValue=" . $targetValue."&propertyName=". $propertyName;
  $url = 'http://localhost:8080/alfresco/s/get/get_folder_has_files_with_metadata_field'.$query;

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Content-Type: application/json',
    'Content-Length: ' . strlen($query))
  );
  
  $result = curl_exec($ch);
  curl_close($ch);
  
  $results = json_decode($result); 
  $isValid = TRUE;
  foreach ($results as $result){
    if($result->found){
      $isValid = FALSE;
    }
  }
  return $isValid;
}

/** 
 * Compresses selected files and folders into a zip file
 */
function gofast_ajax_file_browser_compress(){
  global $user; 
  $selected_items_data = json_decode(variable_get("ithit_bulk_" . $user->uid));
  $main_location = str_replace('/alfresco/webdav','',dirname($selected_items_data[0]->url));
  $main_location = rawurldecode($main_location);
  if (isset($_POST['nodeRefs'])) {
    drupal_json_output(array(
      'status' => 'success',
      'code' => 200, 
      'message' => t('Compression of selected has been registered'),
    ));
    fastcgi_finish_request();
    try{
      gofast_cmis_compress_selected_nodes_using_alfresco_service($_POST['nodeRefs'], $main_location);
    }
    catch(\Exception $e){   
      variable_set('gofast_cmis_compression_status', array(
        'status' => 'ERROR',
        'message' => t('Something went wrong'),
        'code' => 500,
      ));
    }
  }
}

/**
 * Returns the status of an ongoing compression process
 */
function gofast_ajax_file_browser_check_compression_status(){
  $status = variable_get("gofast_cmis_compression_status");
  
  if(!empty($status)){
    drupal_json_output($status);
    fastcgi_finish_request();
    variable_del("gofast_cmis_compression_status");
  }
  else 
     drupal_json_output([
      "status" => "PENDING",
      "done"=> "0",
      "total"=> "0",
  ]);
}


function gofast_ajax_file_browser_get_disabled_tabs($nid = null) {
  $hidden_dropdown_links = [];
  $disabled_tabs = [];
  $tooltips = [];
  $isRootFolder = false;
  if(isset($_POST["isRootFolder"])){
    $isRootFolder = gofast_xss_clean($_POST["isRootFolder"]);
    $isRootFolder = filter_var($isRootFolder, FILTER_VALIDATE_BOOLEAN);
  }
  if($isRootFolder){
    array_push($disabled_tabs, "oghome", "ogcalendar", "ogkanban", "gofastSpaceMembers", "users_stats", "documents_stats", "ogconversation");
  } else if($nid != null){
    $node = node_load($nid);
    
    if(!gofast_og_is_space($node)){
      array_push($disabled_tabs, "ogcalendar", "ogkanban");
    }
    if(gofast_og_is_entity_hide_members_tab($node)){
      array_push($disabled_tabs, "gofastSpaceMembers");
      $tooltips["gofastSpaceMembers"] = gofast_ajax_file_browser_get_member_tab_tooltip($node);
    }
    if(gofast_og_is_entity_hide_home_tab($node)){
      array_push($disabled_tabs, "oghome");
      $tooltips["oghome"] = t('Root spaces have no homepages', [], ['context' => 'gofast:gofast_og']);
    }
    if(gofast_og_is_user_private_space($node)){
      array_push($disabled_tabs, "users_stats");
      $tooltips["users_stats"] = t('No users statistics for private space', array(), array('context' => 'gofast:gofast_og'));
    }
    global $user;
    if (!in_array('administrator member', gofast_og_get_user_final_roles_for_space('node', $node->nid, $user->uid), true)) {
      array_push($hidden_dropdown_links, "tab_ogaudit");
    }
  }
  $disabled_tabs = array_fill_keys($disabled_tabs, "");
  foreach($disabled_tabs as $tab_id => &$tooltip){
    if(isset($tooltips[$tab_id])){
      $tooltip = $tooltips[$tab_id];
    }
  }
  drupal_json_output(["disabled_tabs" => $disabled_tabs, "hidden_dropdown_links" => $hidden_dropdown_links]);
}

function gofast_ajax_file_browser_get_member_tab_tooltip($node){
  if($node->type == "public"){
    $membersTabTooltip = t('Administrators of this space are managed in the Public userlist, members are managed automatically', [], ['context' => 'gofast:gofast_og']);
  }else if($node->type == "private_space"){
    $membersTabTooltip = t("This is a private space, only the owner can be a member of it", [], ['context' => 'gofast:gofast_og']);
  }else{
    $membersTabTooltip = t('Members of this space are managed automatically', [], ['context' => 'gofast:gofast_og']);
  }
  return $membersTabTooltip;
}