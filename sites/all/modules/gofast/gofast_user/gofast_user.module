<?php

/**
 * Define default username for the platform administrator.
 *
 * @todo : vÃ©rifier qu'il ne soit pas alterable par l'utilisateur adm, ou dans
 * ce cas la constante devra tenir compte d'un eve,tuel changement...
 */
define('GOFAST_USER_ADMINISTRATOR_USERNAME', variable_get('gofast_user_adm_username', FALSE));

/**
 * Define the administrator's userID (available once adm is created).
 */
define('GOFAST_USER_ADMINISTRATOR_ID', variable_get('gofast_user_administrator_id', FALSE));

/**
 * Global role name that refers to administration permissions.
 */
define('GOFAST_ROLE_ADMIN', 'administrator');

/**
 * Global role name for managers. This role is given to any OG administrator
 * so that they are able to perform tasks needing extra (global) permissions.
 * This is a technical role maintained automatically, do not assign manually,
 * this role should not be visible to users.
 */
define('GOFAST_ROLE_MANAGER', 'manager');

/**
 * Global role name for standard users.
 */
define('GOFAST_ROLE_CONTRIBUTOR', 'contributor');

/**
 * Global role for read-only users (neither administrator nor contributor). For
 * now this role is "virtual" (though adms should be able to see/use it), and
 * it grants no more permissions than what drupal's 'authenticated user' do.
 */
define('GOFAST_ROLE_READ_ONLY', 'read only');

/**
 * Global role name that refers to business administration
 */
define('GOFAST_ROLE_BUSINESS_ADMIN', 'business administrator');

/**
 * Business administration role translatable string
 */
define('GOFAST_ROLE_BUSINESS_ADMIN_VALUE', 'User-Support');

/**
 * Super administrator role translatable string
 */
define('GOFAST_ROLE_SUPER_ADMIN_VALUE', 'Super-Administrator');

/**
 * Default user relationships id.
 */
define('GOFAST_USER_RTID', 1);

/**
 * Possible values for user profile or visibility :
 *  - OFF : Default behavior (relies on permission 'access user profile').
 *  - ON  : Only members of the same spaces can see each others.
 * Get labeled options: gofast_user_partitioning_options()
 * To get the actual value :
 *  variable_get('gofast_user_partitioning', GOFAST_USER_PARTITIONING_DEFAULT);
 */
define('GOFAST_USER_PARTITIONING_OFF', 0);
define('GOFAST_USER_PARTITIONING_ON', 2);
define('GOFAST_USER_PARTITIONING_ON_ONLY_EXTRANET', 1);

/**
 * Default value for user visibility.
 */
define('GOFAST_USER_PARTITIONING_DEFAULT', GOFAST_USER_PARTITIONING_OFF);

/**
 * Whether or not extranet users should be able to access non-extranet spaces.
 * variable_get('gofast_user_extranet_restriction', GOFAST_USER_EXTRANET_RESTRICTION_DEFAULT);
 */
define('GOFAST_USER_EXTRANET_RESTRICTION_OFF', 0);
define('GOFAST_USER_EXTRANET_RESTRICTION_ON', 1);
define('GOFAST_USER_EXTRANET_RESTRICTION_DEFAULT', GOFAST_USER_EXTRANET_RESTRICTION_ON);

/**
 * Default taxonomy  format for a user
 */
define('GOFAST_USER_DEFAULT_FORMAT', 'Profil');

require_once(drupal_get_path('module', 'gofast_user') . '/gofast_user.utils.inc');
require_once(drupal_get_path('module', 'gofast_user') . '/gofast_user.form.inc');
require_once(drupal_get_path('module', 'gofast_user') . '/gofast_user.api.inc');
require_once(drupal_get_path('module', 'gofast_user') . '/gofast_user.callback.inc');

/**
 * Version define version
 */
define('GOFAST_COMPLETE_VERSION', 1);
define('GOFAST_SIMPLE_VERSION', 2);

/**
 * Implements hook_init()
 */
function gofast_user_init() {
  //If we are logged out and the url is "/user/x/edit", redirect to the home page
  if(!user_is_logged_in() && strpos($_SERVER['REQUEST_URI'], "pass-reset-token") !== FALSE){
    header("Referrer-Policy: no-referrer");
    header("Location: /");
    exit;
  }

  if (gofast_request_is_ajax()) {
    return;
  }

  global $user;
  global $conf;

  if(isset($_SESSION['pass_reset_' . $user->uid])){
    $warning_message = t('You are using a temporarily session in order to change your password. Please change it from your profil', array(), array('context' => 'gofast'));
    drupal_set_message($warning_message, "warning");
    drupal_add_js(array('pass_reset' => "true"), 'setting');
    //Prevent navigate into other page than profil
    $current_url = current_path();
    $profil_edit_url = "user/".$user->uid."/edit";
    if($current_url != $profil_edit_url){
      drupal_goto($profil_edit_url);
    }
  }

  // GOFAST-8308 - make sure no 1-year long user cookie remains without httpOnly
  if(!isset($_COOKIE["gofast_cookies_secured"])) {
    gofast_user_flush_cookies();
    setcookie("gofast_cookies_secured", "true", 2147483647, "/");
  }

  if(gofast_user_is_comment_restricted()){
    $user->privateComment = TRUE;
  }

  $user->displayName = gofast_user_display_name(user_load($user->uid));

  //Check if we must pop up the carousel for this user
  lock_wait("gofast_carousel_users");
  lock_acquire("gofast_carousel_users");

  $carousel_users = variable_get("gofast_carousel_users", array());

  if(variable_get("gofast_carousel_active", FALSE) && !in_array($user->uid, $carousel_users, true)){
    $carousel_users[] = $user->uid;
    variable_set("gofast_carousel_users", $carousel_users);

    $user->display_carousel = TRUE;
  }
  if(!isset($conf['gofast-atatus-key']) || user_load($user->uid)->field_atatus_tracking[LANGUAGE_NONE]['0']['value'] != 0){
    $user->atatus_set = TRUE;
  }else{
    $user->atatus_set = FALSE;
  }

  $picture_path = variable_get('user_picture_default', '');
  $user->avatar_anon = url($picture_path, ['absolute' => TRUE]);

  if ($picture = file_load($user->picture)) {
    $user->avatar = file_create_url($picture->uri);
  }
  else {
    $user->avatar = $user->avatar_anon;
  }

  $picture_path = variable_get('user_picture_default', '');
  $user->avatar_anon = url($picture_path, ['absolute' => TRUE]);

  if ($picture = file_load($user->picture)) {
    $user->avatar = file_create_url($picture->uri);
  }
  else {
    $user->avatar = $user->avatar_anon;
  }

  lock_release("gofast_carousel_users");

  drupal_add_js(array('gofast' => array('user' => $user)), 'setting');
  $spaces_config = variable_get("spaces_defaults");
  drupal_add_js(
    array(
      'filterExtranet' => array(
        'config' => $spaces_config,
      )
    ),
    'setting'
  );
  drupal_add_library('gofast_user','user_directories');
}

function gofast_user_flush_cookies() {
  $past = time() - 3600;
  $user_cookies = ["gofast_complete_login_sid", "gofast_mobile_login_sid", "gofast_user", "gofast_version_login_selected"];
  foreach ($user_cookies as $user_cookie) {
    setcookie($user_cookie, "", $past, '/');
  }
}

function gofast_user_theme()
{
  return array(
    'gofast_user_profile' => array(
      'template' => 'tpl/gofast-user-profile'
    ),
    'gofast_user_profile_personal_card' => array(
      'template' => 'tpl/gofast-user-profile/gofast-user-profile-personal-card'
    ),
    'gofast_user_profile_espace_card' => array(
      'template' => 'tpl/gofast-user-profile/gofast-user-profile-espace-card'
    ),
    'gofast_user_profile_espace_panel' => array(
      'template' => 'tpl/gofast-user-profile/gofast-user-profile-espace/gofast-user-profile-espace-panel'
    ),
    'gofast_user_profile_espace_cell' => array(
      'template' => 'tpl/gofast-user-profile/gofast-user-profile-espace/gofast-user-profile-espace-cell'
    ),
    'gofast_user_profile_userlist_card' => array(
      'template' => 'tpl/gofast-user-profile/gofast-user-profile-userlist-card'
    ),
    'gofast_user_profile_roles' => array(
      'template' => 'tpl/gofast-user-profile/gofast-user-profile-roles'
    ),
    'gofast_user_profile_popup_template' => array(
      'template' => 'tpl/gofast-user-profile/gofast-user-profile-popup-template',
      'variables' => array(
          'uid' => NULL
      )
    ),

    'gofast_user_avatar_crop' => array(
      'template'  => 'tpl/avatar_crop',
      'variables' => array(
        'avatar' => NULL,
        'uid'    => NULL
      )
    ),
    'gofast-account-creation-body' => array(
      'template' => 'tpl/gofast-account-creation-body'
    ),
    'gofast-user-user-email-connect' => array(
      'template' => 'tpl/gofast-user-user-email-connect'
    ),
    'gofast-user-approve-resquest-relationship' => array(
      'template' => 'tpl/gofast-user-approve-resquest-relationship'
    ),
    'gofast-user-decline-resquest-relationship' => array(
      'template' => 'tpl/gofast-user-decline-resquest-relationship'
    ),
    'gofast-user-delete-relationship' => array(
      'template' => 'tpl/gofast-user-delete-relationship'
    ),
    'gofast-user-user-password-reset' => array(
      'template' => 'tpl/gofast-user-user-password-reset'
    ),
    'gofast_user_add_request_relationship' => array(
      'template' => 'tpl/gofast_user_add_request_relationship'
    ),
    'gofast_user_cancel_request_relationship' => array(
      'template' => 'tpl/gofast_user_cancel_request_relationship'
    ),
    'gofast_user_notify_allAdm_to_user_blocked' => array(
      'template' => 'tpl/gofast_user_notify_all_adm_to_blocked_user'
    ),
    'gofast_user_profile_groups' => array(
      'template' => 'tpl/gofast-user-profile-groups'
    ),
    'gofast_user_display_userlist' => array(
      'template' => 'tpl/gofast-user-display-userlist'
    ),
    'gofast_user_profile_detail_info' => array(
      'template' => 'tpl/gofast-user-profile-detail-info'
    ),
    'gofast_user_profile_personal_info' => array(
      'template' => 'tpl/gofast-user-profile-personal-info'
    ),
    'page_user_register_form' => array(
      'template' => 'tpl/gofast-user-user-register-form-page',
      'variables' => array('form' => NULL)
    ),
    'user_login_block' => array(
      'path' => drupal_get_path('theme', 'bootstrap_keen') . '/templates',
      'template' => 'user-login-block',
      'render element' => 'form',
    ),
    'user_register_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('theme', 'bootstrap_keen') . '/templates',
      'template' => 'user_register_form'
    ),
    'user_profile_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('theme', 'bootstrap_keen') . '/templates',
      'template' => 'user_profile_form'
    ),
  );
}



function gofast_user_library()
{
  $lib = 'sites/all/libraries/cropper';
  $path = drupal_get_path('module', 'gofast_user');
  $libraries = array();
  $libraries['avatar_cropper'] = array(
    'title' => 'Cropper library',
    'version' => '1.0',
    'js' => array(
      $path . '/js/gofast_avatar_crop.js' => array(
        'group' => JS_DEFAULT
      )
    ),
    'css' => array(
      $path . '/css/gofast_crop.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 1
      )
    )
  );
  $libraries['user_directories'] = array(
    'title' => 'Directories libraries',
    'version' => '1.0',
    'css' => array(
      $path . '/css/gofast_directories.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME + 1,
        'weight' => 5
      )
    )
  );
  return $libraries;
}

/**
 * Alter the theme registry information returned from hook_theme().
 * @param type $theme_registry
 */
function gofast_user_theme_registry_alter(&$theme_registry)
{
  // Alter user-picture theme.
  $theme_registry['user_picture']['variables'] = array(
    'account' => NULL,
    'style' => NULL,
    'dimensions' => NULL,
    'popup' => TRUE,
    'link' => TRUE
  );

  // Replace preprocess function (avoid double processing per theme call).
  foreach ($theme_registry['user_picture']['preprocess functions'] as $key => &$preprocess) {
    if ($preprocess != 'template_preprocess_user_picture')
      continue;

    // We must avoid theme's HOOK string in the function naming (or this
    // function will be called twice).
    $preprocess = 'gofast_user_preprocess_picture';
    break;
  }

  // Alter "username" theme, merge in user_picture variables and add options.
  $theme_registry['username']['variables'] += $theme_registry['user_picture']['variables'] + array(
    'picture' => TRUE,
    'override_name' => TRUE,
    'menu' => FALSE
  );

  // Alter "image_style" theme so that we can override base style dimensions.
  $theme_registry['image_style']['variables']['override_base_dim'] = NULL;

  // Set dimensions defaults to prevent user_picture defaults fallback as it
  // intends to display bigger pics.
  $theme_registry['username']['variables']['dimensions'] = 24; // same as current node icons dim

  //Change theme accept relationship
  $theme_registry['user_relationships_pending_request_approve_link'] = array(
    'template' => 'sites/all/modules/gofast/gofast_views/theme/gofast-user-relationships-pending-request-approve-link',
    'arguments' => array(
      'uid' => NULL,
      'rid' => NULL,
    ),
    'type' => 'module',
    'theme path' => 'sites/all/modules/gofast/gofast_views',
    'preprocess functions' => array(
      '0' => 'template_preprocess',
      '1' => 'template_preprocess_gofast_user_relationships_pending_request_approve_link',
      '2' => 'contextual_preprocess'
    ),
    'process functions' => array(
      '0' => 'template_process',
      '1' => 'ctools_process',
      '2' => 'rdf_process',
    )

  );
  //Change theme decline relationship
  $theme_registry['user_relationships_pending_request_disapprove_link'] = array(
    'template' => 'sites/all/modules/gofast/gofast_views/theme/gofast-user-relationships-pending-request-disapprove-link',
    'arguments' => array(
      'uid' => NULL,
      'rid' => NULL,
    ),
    'type' => 'module',
    'theme path' => 'sites/all/modules/gofast/gofast_views',
    'preprocess functions' => array(
      '0' => 'template_preprocess',
      '1' => 'template_preprocess_gofast_user_relationships_pending_request_disapprove_link',
      '2' => 'contextual_preprocess'
    ),
    'process functions' => array(
      '0' => 'template_process',
      '1' => 'ctools_process',
      '2' => 'rdf_process',
    )

  );
}


function gofast_user_user_logout($account)
{
  drupal_add_js(array('gofast' => array('user' => ['uid' => 0])), 'setting');
}

/**
 * Implements hook_enable()
 */
function gofast_user_enable()
{
  if (GOFAST_USER_ADMINISTRATOR_ID && !entity_load('user', GOFAST_USER_ADMINISTRATOR_ID)) {
    variable_set('gofast_user_administrator_id', FALSE);
  }
  $locale_weight = db_select('system')
    ->fields('system', array('weight'))
    ->condition('name', 'locale', '=')
    ->execute()
    ->fetchField();

  db_update('system')
    ->fields(array('weight' => $locale_weight + 1))
    ->condition('name', 'gofast_user')
    ->execute();
}


/**
 * Define user permissions. Supply permissions so that they can be selected on
 * the user permissions page and used to grant or restrict access to actions
 * the module performs.
 *
 * Permissions are checked using user_access().
 */
function gofast_user_permission() {
  // Allow users to grant and revoke user roles regardless of the 'administer
  // permissions' check.
  return array(
    'administer roles' => array(
      'title' => t('Administer profiles', array(), array('context' => 'gofast')),
      'description' => t('Grant or revoke user profiles. Flag user as "extranet" or "broadcaster".', array(), array('context' => 'gofast:gofast_user')),
      'restrict access' => TRUE
    ),

    'gofast administer users' => array(
      'title' => t('Administer users', array(), array('context' => 'gofast_og')),
      'description' => t('Allow to edit any user (execpt his password and email)', array(), array('context'=> 'gofast:gofast_og')),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implements hook_og_role_grant()
 *
 *  Grant role "manager" to any space administrator.
 */
function gofast_user_og_role_grant($entity_type, $gid, $uid, $rid) {
  if ($uid == GOFAST_USER_ADMINISTRATOR_ID) {
    // Ignore administrators, they already have manager's permissions.
    return;
  }

  $account = user_load($uid);
  if (gofast_user_has_role(GOFAST_ROLE_MANAGER, $account)) {
    // User is already a manager.
    return;
  }

  //we are during a user creation, don't do anything
   if(isset($_SESSION["default_role_creation_user"])){
        return;
   }

  $og_roles = og_get_user_roles_name($rid);
  $og_role = reset($og_roles);

  if ($og_role === OG_ADMINISTRATOR_ROLE) {
    $role = user_role_load_by_name(GOFAST_ROLE_MANAGER);
    $gofast_users_to_promote_manager = variable_get("gofast_users_to_promote_manager", array());
    $gofast_users_to_promote_manager[$uid] = $uid;

    variable_set('gofast_users_to_promote_manager', $gofast_users_to_promote_manager);
    //user_multiple_role_edit(array($uid), 'add_role', $role->rid);
  }
}

/**
 * Implements hook_og_role_revoke()
 *
 *  Revoke role "manager" to user that haven't any OG administer role.
 */
function gofast_user_og_role_revoke($entity_type, $gid, $uid, $rid) {
  $account = user_load($uid);

  if (gofast_user_is_adm($account)) {
    // Ignore administrators.
    return;
  }

  if (!gofast_user_has_role(GOFAST_ROLE_MANAGER, $account)) {
    // This does not apply to this user.
    return;
  }

  // This function can be called manually so we have to check $rid first.
  if (isset($rid)) {
    $og_roles = og_get_user_roles_name($rid);
    $og_role = reset($og_roles);
    if ($og_role !== OG_ADMINISTRATOR_ROLE) {
      return;
    }
  }

  // Check if the user has still access to administration tasks in at least one
  // of its space (excluding its private space and the current one).
  $spaces = gofast_og_get_spaces_by_user($account);
  $private_id = gofast_og_get_user_private_space($account, FALSE);

  foreach ($spaces as $_gid) {
    if ($gid == $_gid || $_gid == $private_id) continue;
    if (og_user_access($entity_type, $_gid, 'administer group', $account)) {
      // User has still an administer access, do nothing.
      return;
    }
  }

  // User lost all OG privileges, safely remove its manager role.
  //$role = user_role_load_by_name(GOFAST_ROLE_MANAGER);
  //user_multiple_role_edit(array($uid), 'remove_role', $role->rid);
    $gofast_users_to_unpromote_manager = variable_get("gofast_users_to_unpromote_manager", array());
    $gofast_users_to_unpromote_manager[$uid] = $uid;
    variable_set('gofast_users_to_unpromote_manager', $gofast_users_to_unpromote_manager);
}

/**
 * Implements hook_og_membership_delete().
 */
function gofast_user_og_membership_delete(OgMembership $og_membership) {
  if ($og_membership->entity_type !== 'user' || $og_membership->field_name !== GOFAST_OG_USER_MEMBERSHIP_FIELD) {
    return;
  }

  $_events = _gofast_ldap_entity_last_events();
  if (isset($_events["node|{$og_membership->gid}"]) && $_events["node|{$og_membership->gid}"] === 'delete') {
    // An OG node has just been deleted, nothing to do here.
    return;
  }

  // Run manually our og_role_revoke implementation to check if user has to be
  // revoked manager permissions.
  gofast_user_og_role_revoke($og_membership->group_type, $og_membership->gid, $og_membership->etid, NULL);
}



/**
 * Implements hook_user_presave()
 *
 * A user account is about to be created or updated. This hook provides a way
 * to store properties in the serialized {users}.data column, which is
 * automatically loaded whenever a user account object is loaded, modules may
 * add to $edit['data'] in order to have their data serialized on save.
 *
 * @param $edit
 *  The array of form values submitted by the user. Assign values to this array
 *  to save changes in the database.
 * @param $account
 *  The user object on which the operation is performed. Values assigned in this
 *  object will not be saved in the database.
 * @param $category
 *  The active category of user information being edited.
 *
 * @throws \Exception
 */
function gofast_user_user_presave(&$edit, $account, $category) {
  // Store update timestamp into 'data' storage.
  $edit['data']['changed'] = time();

  //update field_format with the right tid (for Profil)
  $taxonomy_term = taxonomy_get_term_by_name(GOFAST_USER_DEFAULT_FORMAT);
  if(count($taxonomy_term) > 0 ){
    $edit['field_format'][LANGUAGE_NONE][0]['tid'] = array_shift($taxonomy_term)->tid;
  }

  // Ensure user won't see CKeditor switch toggles.
  $edit['data']['ckeditor_show_toggle'] = 'f';

  //the user is going to be blocked
    if(isset($edit["status"]) && $edit["status"] == 0 && $account->status == 1){
      $server = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
      $dn = gofast_ldap_user_dn($account->uid);
      $current_pass_encrypt = gofast_ldap_get_user_pwd($account);
      $userPassword = base64_decode($current_pass_encrypt);
      $server->modifyLdapEntry($dn, array('userPassword' => "_blocked_".$userPassword));
      $edit["pass"] = "_blocked_".$userPassword;
    }elseif(isset($edit["status"]) && $edit["status"] == 1 && $account->status == 0){
      $server = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
      $dn = gofast_ldap_user_dn($account->uid);

      //if SASL is enabled on the account
      if($account->sasl_auth[LANGUAGE_NONE][0]['value'] == 1){
        // External server domain components.
        $ext_server = gofast_ldap_server_load(GOFAST_LDAP_EXT_SERVER);
        $basedn = is_array($ext_server->basedn) ? reset($ext_server->basedn) : $ext_server->basedn;
        $dc_string = substr($basedn, strpos($basedn, 'dc='));
        $domain = str_replace(array('dc=', ',', 'DC='), array('', '.',''), $dc_string);

        $userPassword = "{SASL}{$account->name}@{$domain}";
      }else{
        $current_pass_encrypt = gofast_ldap_get_user_pwd($account);
        $userPassword = base64_decode($current_pass_encrypt);
        $userPassword = str_replace("_blocked_", "", $userPassword);
      }
      $server->modifyLdapEntry($dn, array('userPassword' => $userPassword));
    }
    if(isset($account->is_new) && isset($edit['roles'][3])){
        ## if the user will be admin then add ADMIN_GOFAST
	$LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
	$LdapServer->connectAndBindIfNotAlready();
	$ldap_basedn = variable_get('gofast_ldap_int_base_dn');
	$attributes = array();
	$attributes['objectclass'] = array('groupOfNames');
	$attributes['description'] = GOFAST_ADMIN_PLATFORM;
	$attributes['cn'] = GOFAST_ADMIN_PLATFORM;
	$gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

	$LdapServer->groupAddMember($gofast_ldap_gofast_admin_basedn, $account);
    }

    if(isset($account->is_new) && isset($edit['roles'][7])){
      ## if the user will be admin then add ADMIN_GOFAST
      $LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
      $LdapServer->connectAndBindIfNotAlready();
      $ldap_basedn = variable_get('gofast_ldap_int_base_dn');
      $attributes = array();
      $attributes['objectclass'] = array('groupOfNames');
      $attributes['description'] = GOFAST_BUSINESS_ADMIN_PLATFORM;
      $attributes['cn'] = GOFAST_BUSINESS_ADMIN_PLATFORM;
      $gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

      $LdapServer->groupAddMember($gofast_ldap_gofast_admin_basedn, $account);
    }

    if(isset($edit['roles'][3]) && !isset($account->roles[3])){
        ## if the user will be admin then add ADMIN_GOFAST
        $LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
        $LdapServer->connectAndBindIfNotAlready();
        $ldap_basedn = variable_get('gofast_ldap_int_base_dn');
        $attributes = array();
        $attributes['objectclass'] = array('groupOfNames');
        $attributes['description'] = GOFAST_ADMIN_PLATFORM;
        $attributes['cn'] = GOFAST_ADMIN_PLATFORM;
        $gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

        $LdapServer->groupAddMember($gofast_ldap_gofast_admin_basedn, $account);

         watchdog("debug roles test", "pas superadmin avant mais maintenant oui");
  }else if(isset($edit['roles']) && !$edit['roles'][3] && isset($account->roles[3])){
        ## else remove it
        $LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
        $LdapServer->connectAndBindIfNotAlready();
        $ldap_basedn = variable_get('gofast_ldap_int_base_dn');
        $attributes = array();
        $attributes['objectclass'] = array('groupOfNames');
        $attributes['description'] = GOFAST_ADMIN_PLATFORM;
        $attributes['cn'] = GOFAST_ADMIN_PLATFORM;
        $gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

        $LdapServer->groupRemoveMember($gofast_ldap_gofast_admin_basedn, $account);
        //also remove admin permissions on root spaces
        $uid = $account->uid;
        $root_spaces = gofast_og_get_root_spaces(FALSE, TRUE);

        foreach($root_spaces as $nid){ //We fetch into the root spaces (excluding private spaces)
          $node = node_load($nid);
          $bundle = $node->type;

          if($bundle == 'public'){ //We save the public node to use it later.
           continue;
          }

          $roles_query = og_roles('node', $bundle, $nid, FALSE, FALSE);
          foreach($roles_query as $rkey => $roles){ //We get the role IDs associated to the space
            if($roles == GOFAST_OG_ROLE_ADMIN){
              $admin_rid = $rkey;
            }
            if($roles == GOFAST_OG_ROLE_READ_ONLY){
              $readonly_rid = $rkey;
            }
            if($roles == GOFAST_OG_ROLE_STANDARD){
              $contributor_rid = $rkey;
            }
          }

          //The user is subscribed without any role
          og_role_revoke('node', $nid, $uid, $admin_rid);
          og_role_grant('node', $nid, $uid, $readonly_rid);

        }
        watchdog("debug roles test", "superadmin avant mais maintenant non");
    }

    if(isset($edit['roles']) && !$edit['roles'][7] && isset($account->roles[7])){
        ## Remove LDAP role
        $LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
        $LdapServer->connectAndBindIfNotAlready();
        $ldap_basedn = variable_get('gofast_ldap_int_base_dn');
        $attributes = array();
        $attributes['objectclass'] = array('groupOfNames');
        $attributes['description'] = GOFAST_BUSINESS_ADMIN_PLATFORM;
        $attributes['cn'] = GOFAST_BUSINESS_ADMIN_PLATFORM;
        $gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

        $LdapServer->groupRemoveMember($gofast_ldap_gofast_admin_basedn, $account);

        //also remove admin permissions on root spaces
        $uid = $account->uid;
        $root_spaces = gofast_og_get_root_spaces(FALSE, TRUE);

        foreach($root_spaces as $nid){ //We fetch into the root spaces (excluding private spaces)
          $node = node_load($nid);
          $bundle = $node->type;

          if($bundle == 'public'){ //We save the public node to use it later.
           continue;
          }

          $roles_query = og_roles('node', $bundle, $nid, FALSE, FALSE);
          foreach($roles_query as $rkey => $roles){ //We get the role IDs associated to the space
            if($roles == GOFAST_OG_ROLE_ADMIN){
              $admin_rid = $rkey;
            }
            if($roles == GOFAST_OG_ROLE_READ_ONLY){
              $readonly_rid = $rkey;
            }
            if($roles == GOFAST_OG_ROLE_STANDARD){
              $contributor_rid = $rkey;
            }
          }

          //The user is subscribed without any role
          og_role_revoke('node', $nid, $uid, $admin_rid);
          og_role_grant('node', $nid, $uid, $readonly_rid);

        }
    }elseif($edit['roles'][7] && !isset($account->roles[7])){
        // Add LDAP role
        $LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
        $LdapServer->connectAndBindIfNotAlready();
        $ldap_basedn = variable_get('gofast_ldap_int_base_dn');
        $attributes = array();
        $attributes['objectclass'] = array('groupOfNames');
        $attributes['description'] = GOFAST_BUSINESS_ADMIN_PLATFORM;
        $attributes['cn'] = GOFAST_BUSINESS_ADMIN_PLATFORM;
        $gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

        $LdapServer->groupAddMember($gofast_ldap_gofast_admin_basedn, $account);

        //also add admin permissions on root spaces
        $uid = $account->uid;
        $root_spaces = gofast_og_get_root_spaces(FALSE, TRUE);

        foreach($root_spaces as $nid){ //We fetch into the root spaces (excluding private spaces)
          $node = node_load($nid);
          $bundle = $node->type;

          if($bundle == 'public'){ //We save the public node to use it later.
           continue;
          }

          $roles_query = og_roles('node', $bundle, $nid, FALSE, FALSE);
          foreach($roles_query as $rkey => $roles){ //We get the role IDs associated to the space
            if($roles == GOFAST_OG_ROLE_ADMIN){
              $admin_rid = $rkey;
            }
            if($roles == GOFAST_OG_ROLE_READ_ONLY){
              $readonly_rid = $rkey;
            }
            if($roles == GOFAST_OG_ROLE_STANDARD){
              $contributor_rid = $rkey;
            }
          }

          //The user is subscribed without any role
          og_role_revoke('node', $nid, $uid, $readonly_rid);
          og_role_grant('node', $nid, $uid, $admin_rid);

        }
         watchdog("debug roles test", "pas business avant mais maintenant oui");
    }
}

/**
 * Hook cronapi (defined the cron items).
 */
function gofast_user_cronapi($op, $job = NULL) {
  $items['gofast_user_disable_expired_accounts_cron'] = array(
    'description' => 'Deactivate all extranet accounts whose expiry date has passed',
    'rule' => '0 1 * * *', // Every day at 01:00
  );

  return $items;
}
function gofast_user_mail_alter(&$message) {

  // some useful variables
  global $user;
  $userbdd = user_load($user->uid);
  $author_name = gofast_user_display_name($userbdd);
  $author_message =  $message["params"]["account"]->content;
  global $base_url;
  $account = $message["params"]["account"];
  $l = array('langcode' => $account->language, 'context' => 'gofast_user');
  $site_name = variable_get('site_name', 'GoFast');

  if($message["id"] == "user_register_admin_created"){
    $author_pic = [
      "src" =>  gofast_get_url_picture_by_id($user->picture),
      "alt" => t("@user's picture", array('@user' => format_username($user)), array('context' => 'gofast:gofast_user')),
    ];
    $user_login = $account->name;
    $user_password = $account->password;
    $url = $base_url;
    $url_change_password = user_pass_reset_url($account);

    if(strpos($user_password, "{BCRYPT}") !== false){
      $user_password = t("Your password is encrypted and will not be displayed here", array(), $l);
    }

    $full_name = gofast_user_display_name($account);

    $subject = t("Welcome to", array(), array('context' => 'gofast', 'langcode' => $account->language)). " " . $site_name;
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast-account-creation-body', array(
      'author_pic' => $author_pic,
      'author_name' => $author_name,
      'author_message' => nl2br($author_message),
      'user_login' => $user_login,
      'user_password' => $user_password,
      'site_name' => $site_name,
      'url' => $url,
      'url_change_password' => $url_change_password,
      'full_name' => $full_name,
      'l' => $l,
      'is_sasl' => $account->sasl_auth[LANGUAGE_NONE][0]['value'] == 1,
    ));

   unset($message['to']);
    $message['send'] = FALSE;

    $mail = array(
      'body' => $body,
      'title' => $subject,
      'subject' => $subject,
      'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail, array(array('method' => 'to','recpt' => $account->mail)), time());
  }
  // in the case witch the relationship is validate (after the first request is send)
  if($message['id'] == 'user_relationship_mailer_approve'){
    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("Approved request for a new relationship on @siteName", array('@siteName' => $siteName), $l);
    $title = t("Approved request for a new relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast-user-approve-resquest-relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'author_pic'  => $author_pic,
    ));
    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail, array(array('method' => 'to','recpt' => $message['to'])) , time());
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_status_activated'){
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_relationship_mailer_disapprove'){
    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("Declined request for a new relationship on @siteName", array('@siteName' => $siteName), $l);
    $title = t("Declined request for a new relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast-user-decline-resquest-relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'author_pic'  => $author_pic,
    ));

    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail, array(array('method' => 'to','recpt' => $message['to'])) , time());

    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_relationship_mailer_remove'){
    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("You lost a relationship on @siteName", array('@siteName' => $siteName), $l);
    $title = t("You lost a relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast-user-delete-relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'author_pic'  => $author_pic,
    ));
    if($message['to'] !== $user->mail){

      $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
      );
      gofast_mail_queue_api_queue_ext($mail,  array(array('method' => 'to','recpt' => $message['to'])) , time());
    }
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_relationship_mailer_request'){

    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("Request for a new relationship on @siteName", array('@siteName' => preg_replace('/[^A-Za-z0-9\-]/', '', $siteName)), $l);
    $title = t("Request for a new relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast_user_add_request_relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'message'     => $_POST['relationship_message'],
      'author_pic'  => $author_pic,
    ));

    $recpt = array(array('method' => 'to','recpt' => $message['to']));
    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail,  $recpt, time());
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_relationship_mailer_cancel'){

    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("Cancelled request for a new relationship on @siteName", array('@siteName' => preg_replace('/[^A-Za-z0-9\-]/', '', $siteName)), $l);
    $title = t("Cancelled request for a new relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast_user_cancel_request_relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'author_pic'  => $author_pic,
    ));
    $recpt = array(array('method' => 'to','recpt' => $message['to']));
    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail,  $recpt, time());
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_password_reset'){

    $new_password_link = user_pass_reset_url($account);
    $subject = t("Your new password request on @site_name", array('@site_name' => $site_name), array('context' => 'gofast', 'langcode' => $account->language));
    $title = t("New password request", array(), array('context' => 'gofast', 'langcode' => $account->language));
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;
    $l = array('context' => 'gofast', 'langcode' => $account->language);
    $body = theme('gofast-user-user-password-reset', array(
      'new_password_link' => $new_password_link,
      'l' => $l,
      'site_name' => $site_name,
      'name' =>  $account->ldap_user_givenname[LANGUAGE_NONE][0]['value'],
      'is_sasl' => $account->sasl_auth[LANGUAGE_NONE][0]['value'] == 1,
    ));

    $recpt = array(array('method' => 'to','recpt' => $message['to']));
    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail,  $recpt, time());
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if ($message['id'] == 'login_security_block_user_notify'){

    unset($message['to']);
    $message['send'] = FALSE;

    $queryAllAdm = db_query("SELECT uid FROM users_roles WHERE rid='3'");
    $allAdm = $queryAllAdm->fetchAll();

    foreach ($allAdm as $adm){
      $admAccount = user_load($adm->uid);

      $l = array('context' => 'gofast', 'langcode' => $admAccount->language);
      $site_name = variable_get('site_name');
      $subject = t("A user has blocked his account", array(), $l);
      $title = t("A user has blocked his account", array(), $l);
      $footer = t('Message sent from ', array(), $l)." ".$site_name;
      $blocked_user = user_load_by_name($message['params']['@username']);
      $linkAccount = "<a href='".$GLOBALS['base_url']."/user/".$blocked_user->uid."'>".$message['params']['@username']."</a>";
      $body = theme('gofast_user_notify_allAdm_to_user_blocked', array(
        'admName' => gofast_user_display_name($admAccount),
        'l' => $l,
        'site_name' => $site_name,
        'p' => $message,
        'userBlocked' => $linkAccount,
      ));

      $recpt = array(array('method' => 'to','recpt' => $admAccount->mail));
      $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail,  $recpt, time());

    }
  }
}

/**
 * Implements_hook_user_insert()
 *
 * A user account was created. Module should save its custom additions to the
 * user object into the database.
 *
 * @see hook_user_presave() for params description
 */
function gofast_user_user_insert(&$edit, $account, $category) {
  watchdog('user_insert', $account->name);


  // Save event for notifications
  $groups_to_join = $edit['og_user_node']['und'];
  foreach ($groups_to_join as $group) {

    $node = node_load($group['target_id']);

    $membership_data = array(
        'membership_action' => 'NMEM', // New Member
        'membership_type' => 'user',
        'membership_id' => $account->uid,
        'membership_name' => gofast_user_get_display_name_sql($account->uid)
    );

    gofast_message_ext_create_og_membership_entity($node, $membership_data);
    gofast_audit_add_members($node, $membership_data);
  }



  if(isset($_SESSION["default_role_creation_user"])){
      unset($_SESSION["default_role_creation_user"]);
  }

}


/**
 * Implements hook_user_update()
 *
 * A user account was updated. Modules may use this hook to update their user
 * data in a custom storage after a user account has been updated.
 *
 * @see hook_user_presave() for params description
 */
function gofast_user_user_update(&$edit, $account, $category) {
  //detect if the user has just been blocked but not disable ( it means the user has been blocked due to an execessive login number)
  if($account->status == 0 && $account->original->status == 1){
      if(!gofast_user_is_left($account)){
          //user has been blocked due to an execessive login number
            //audit
            global $user;
            $event = array('mod_author' => $account->uid, 'mod_timestamp' => time(), 'event' => 'user_blocked','uid_to_block' => $account->uid);
            $event = serialize($event);
            $last_event_serialized = rawurlencode($event);

            $last_event_unserialized["mod_timestamp"] = time();
            $last_event_unserialized["mod_author"] = $account->uid;

            //Insert inton audit
            gofast_audit_insert_line_audit(0, 'user_blocked', $last_event_serialized, $last_event_unserialized); //The value 0 is define in order to not render node in the audit
      }
  }
  
  if(variable_get('gofast_user_current_username_updated', FALSE)){
    variable_set('gofast_user_current_username_updated', FALSE);
    user_logout();
  }
  
  //watchdog('user_update', json_encode($edit));

}

/**
 * Implements hook_user_load()
 * Act on user objects when loaded from the database.
 *
 * Due to the static cache in user_load_multiple() you should not use this hook
 * to modify the user properties returned by the {users} table itself since this
 * may result in unreliable results when loading from cache.
 *
 * @param $users An array of user objects, indexed by uid.
 */
function gofast_user_user_load($users) {
  foreach ($users as $uid => &$account) {
    // Add an alias for the changed properties.
    $account->changed = isset($account->data['changed']) ? $account->data['changed'] : 0;
  }
}
/**
 * Implements hook_user_delete()
 *
 * Respond to user deletion. This hook is invoked from user_delete_multiple()
 * before field_attach_delete() is called and before users are actually removed
 * from the database.
 * Modules should additionally implement hook_user_cancel() to process stored
 * user data for other account cancellation methods.
 *
 * @param $account The account that is being deleted.
 */
function gofast_user_user_delete($account) {
  if ($account->uid == GOFAST_USER_ADMINISTRATOR_ID) {
    variable_set('gofast_user_administrator_id', FALSE);
  }
}



################# PREPROCESS SECTION ###################


function template_preprocess_user_login_block(&$variables){
  $variables['form']['name']['#attributes'] = array('class' => array('form-control-solid', 'h-auto', 'p-4', 'rounded-lg'), 'tabindex' => '1');
  $variables['form']['name']['#attributes']['autocomplete'] = 'off';
  unset($variables['form']['name']['#title']);
  $variables['form']['pass']['#attributes'] = array('class' => array('form-control-solid', 'h-auto', 'p-4', 'rounded-lg'), 'tabindex' => '2');
  unset($variables['form']['pass']['#title']);
  $variables['form']['actions']['submit']['#attributes'] = array('class' => array('font-weight-bolder', 'font-size-h6', 'px-8', 'py-2', 'my-3', 'ml-3'));
    // print '<pre>'; print_r($variables); exit;
}

/**
 *
 * Preprocess variables for user-profile.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $account
 *
 * @see user-picture.tpl.php
 */
function gofast_user_preprocess_user_profile(&$variables) {

    // $timer_start = microtime(true);
    // watchdog('gofast_user', '%name() START ', array('%name' => __FUNCTION__), WATCHDOG_INFO);

   if ($variables['elements']['#view_mode'] !== 'full') {
     return;
   }

   global $user;

   $account = $variables['elements']['#account'];

   drupal_add_library('gofast_user', 'avatar_cropper');
   drupal_add_js(drupal_get_path('module', 'gofast_user') . '/js/gofast_profile.js', array('type' => 'file', 'weight' => 5));

   // Is the current user theme administrator ?
   $is_adm = gofast_user_is_adm($user);

   // Is the current user a space administrator.
   $is_space_adm = user_access('administer spaces');

   // Is the current user visiting his own profile (note : let su manage other
   // profiles as its own).
   $self = $user->uid == 1 || $user->uid == $account->uid;

   if (!$account->status) {
     $variables['account_blocked'] = t('Blocked', array(), array('context' => 'gofast:gofast_user'));
   }

   if(gofast_user_is_left($account)){
       $variables['account_left'] = true;
       $variables['account_blocked'] = t('Disabled', array(), array('context' => 'gofast:gofast_user'));
   }

    if(gofast_user_view_access($account) === FALSE){
        drupal_goto("/error/403");
       return;
    }

   // Load user taxonomy terms and assign it to variables ($user_[taxonomyVocabulary])
   foreach (array('hobbies', 'interests', 'skills') as $vocabulary) {
   if (empty($account->{"field_{$vocabulary}"})) {
     ${"user_" . $vocabulary} = array();
     continue;
   }
   foreach ($account->{"field_{$vocabulary}"}[LANGUAGE_NONE] as $key => $term) {
     ${$vocabulary}[] = $term['tid'];
   }
   ${$vocabulary} = taxonomy_term_load_multiple(${$vocabulary});
   foreach (${$vocabulary} as $tid => $term) {
     $term_links[] = t($term->name, array(), array('context' => 'gofast'));
   }
   $variables['taxonomy']["{$vocabulary}"] = implode(', ', $term_links);
   ${"user_" . $vocabulary} = $term_links;
   unset($term_links);
   }

   // Get all ldap-mapped fields, and merge it to $variables.
   $variables['ldap'] = gofast_ldap_user_attributes($account);
   foreach ($variables['ldap'] as $fieldname => &$info) {
     list ($field_type, $widget_type) = explode('::', $info['element']);
     switch ($widget_type) {
       case 'options_select' : $info['element'] = 'select';
         break;
       case 'textarea' : $info['element'] = 'textarea';
         break;
       case 'textfield' :
       default : $info['element'] = $field_type;
     }
   }

   // User title
   $user_title = $variables['ldap']['ldap_user_title']['value'];

   // User department/organisation/company.
   $user_dept = $variables['ldap']['ldap_user_o']['value'];

   // Set all the default values.
   $variables['user_email'] = $account->mail;

   // Override picture theme already processed in cache.
   $picture = theme('user_picture', array(
       'account' => $account,
       'style' => FALSE,
      /* 'dimensions' => array(
         'width' => '100%',
         'height' => '100%'
       ),*/
       'popup' => FALSE,
       'link' => FALSE,
       'attributes' => array('style' => 'max-width:100%; max-height:100%')
     )
   );

   if ($self || user_access('gofast administer users')) {
     // Make the picture editable.
     $href = "gofast/nojs/user/edit-avatar/{$account->uid}";
     $alt = t('Edit picture', array(), array('context' => 'gofast:gofast_user'));
     // When ajaxifying into profile page, we have to include this
     ctools_include('modal');
     ctools_include('ajax');
     $picture = ctools_modal_text_button($picture, $href, $alt, 'ctools-modal-cropping-avatar-modal-style');

   }

   $variables['profile_picture'] = $picture;

   // Role - "authenticated user" is not displayed (mandatory).
   $roles = array_filter($account->roles, function ($role) {
   return $role !== 'authenticated user' && $role !== 'manager';
   });
   foreach($roles as $key=>$roles_user){
    $roles[$key] = gofast_get_profiles_key_value_map()[$roles_user];
   }

   $permissions_fields = array("extranet", "broadcaster", "comment_restricted");
   $permissions_key_value_map = gofast_get_permissions_key_value_map();
   $permissions = array();
   foreach($permissions_fields as $permissions_field) {
    $field = "is_" . $permissions_field;
    $function = "gofast_user_" . $field;
    $already_is = call_user_func_array($function, [$account]);
    $permissions[$permissions_field] = array($permissions_key_value_map[$permissions_field] => $already_is);
   }

   // display profiles (previously called platform "roles") and permissions in dedicated template
   $variables['profile_roles'] = theme("gofast_user_profile_roles", array("roles" => $roles, "permissions" => $permissions));

   // Primary Phone Number
   $variables['profile_primary_phone'] = '';
   if (!empty($account->ldap_user_telephonenumber)) {
     $variables['profile_primary_phone'] = $variables['ldap']['ldap_user_telephonenumber']['value'];
   }
   elseif (!empty($account->ldap_user_mobile)) {
     $variables['profile_primary_phone'] = $variables['ldap']['ldap_user_mobile']['value'];
   }

   // Score
   $variables['profile_score'] = userpoints_get_current_points($account->uid) . ' ' . t('points', array(), array('context' => 'gofast'));

   // Birthdate
   $wrapper = entity_metadata_wrapper('user', $account);
   $format = $account->language === 'fr' ? 'd/m/Y' : 'm/d/Y';
   $birthdate = $wrapper->field_birthdate->value();
   $formatted_birthdate = $birthdate ? date($format, $birthdate) : '';
   $formatted_minDate = '01/01/1900';
   $formatted_maxDate = '12/31/2000';
   $date_default = t('Select date', array(), array('context' => 'gofast'));

   $variables['profile_birthdate'] = $formatted_birthdate;

   if(!empty($account->field_extranet_expiration_date)){
      $variables["profile_expiration_date"] = $account->field_extranet_expiration_date[LANGUAGE_NONE][0]["value"];
   }

   $variables['manager_default'] = isset($account->ldap_user_manager[LANGUAGE_NONE][0]['value']) ? $account->ldap_user_manager[LANGUAGE_NONE][0]['value'] : '';

   // Provide in place editing options.
   //if ($self || $is_adm || $is_space_adm) {
   //for the moment, only admin and self can edit profil
   if ($self || $user->uid == 1) {
     // X-editable dependancies
     $loaded = libraries_load('x-editable');
     drupal_add_js(drupal_get_path('module', 'gofast') . '/js/gofast_xeditable.js', array('type' => 'file', 'weight' => 5));
     $loaded_select2 = libraries_load('select2');
   }

   if($self){
     // Make a modal profile edition link
     $dest = "modal/nojs/user/{$account->uid}/edit/uprofile";
     $alt = t('Profile settings', array(), array('context' => 'gofast'));
     $variables['profile_uprofile_settings'] = ctools_modal_text_button($alt, $dest, $alt, 'blue-hover uprofile-settings');
   }

   //if ($self || $is_adm || $is_space_adm) {
   //for the moment, only admin and self can edit profil
   if ($self || $user->uid == 1 || user_access('gofast administer users') ) {
     // Advanced settings link
     $text = '';
     if( ! gofast_essential_is_essential()){
       $text = t('Account settings', array(), array('context' => 'gofast:gofast_user'));
     }

     $dest = "/modal/nojs/user/{$account->uid}/edit";
     ctools_include('modal');
     ctools_include('ajax');
     $variables['profile_account_settings'] = theme('account_settings', array('href'=> $dest , 'class' => 'btn btn-default ctools-use-modal' , 'text' => $text ));
   }

   $organisations = $groups = $public = $extranet = $user_all_groups = $visitor_all_groups = array();

   $variables['userlists'] = $userlists;
   $variables['organisations'] = $organisations;
   $variables['groups'] = $groups;
   $variables['public'] = $public;
   $variables['extranet'] = $extranet;
   $variables['requested_groups'] = implode(' ', (array) $requested_groups);

   $variables['og_button_join'] = "";

   $path = drupal_get_path('module', 'gofast_user');
   $variables['account'] = $account;
   $variables['self'] = $self;
   $variables['is_adm'] = $is_adm;
   $variables['is_manager'] = $is_space_adm; // rename template variable.
   $variables['javascript'] = isset($js) ? $js : NULL;
   $variables['stylesheet_src'] = "/{$path}/css/profile.css";

   drupal_add_css(drupal_get_path('module', 'gofast_user') . "/css/profile.css");

   // Contextual actions

   $account_request_actions = array();
   foreach (gofast_user_get_request_actions($account) as $action) {
     $account_request_actions[]['themed'] = $action;
   }

   $user_contextual_actions = array();

   if (!empty($account_request_actions)) {
     $user_contextual_actions[] = array(
       'id' => 'account-dropdown',
       'title' => 'Contextual actions',
       'button-text' => '',
       'icon-class' => 'fa fa-bars',
       'children' => $account_request_actions
     );
   }

   $variables['contextual_actions'] = theme('contextual_links', array('buttons' => $user_contextual_actions));

    $variables['userDetails'] = ["test" => 'test'];

    // $timer_stop = microtime(true);
    // watchdog('gofast_user', '%name() END - [execution time = %time s]',array('%name' => __FUNCTION__,  '%time' => ($timer_stop - $timer_start) ), WATCHDOG_INFO);

}

function template_preprocess_gofast_user_profile_personal_card(&$variables){

  global $user;

  $account = $variables['account'];

  // Is the current user visiting his own profile (note : let su manage other
  // profiles as its own).
  $self = $user->uid == 1 || $user->uid == $account->uid;

  // Override picture theme already processed in cache.
  $picture = theme(
    'user_picture',
    array(
      'account' => $account,
      'style' => FALSE,
      /* 'dimensions' => array(
        'width' => '100%',
        'height' => '100%'
      ),*/
      'popup' => FALSE,
      'link' => FALSE,
      'attributes' => array('style' => 'max-width:100%; max-height:100%')
    )
  );

  if ($self || user_access('gofast administer users')) {
    // Make the picture editable.
    $href = "gofast/nojs/user/edit-avatar/{$account->uid}";
    $alt = t('Edit picture', array(), array('context' => 'gofast:gofast_user'));
    // When ajaxifying into profile page, we have to include this
    ctools_include('modal');
    ctools_include('ajax');
    $picture = ctools_modal_text_button($picture, $href, $alt, 'ctools-modal-cropping-avatar-modal-style');
  }

  $variables['profile_picture'] = $picture;

  // Get all ldap-mapped fields, and merge it to $variables.
  $variables['ldap'] = gofast_ldap_user_attributes($account);

  $variables['self'] = $self;

  // Primary Phone Number
  $variables['profile_primary_phone'] = '';
  $field_name = 'ldap_user_telephonenumber';
  if (!empty($account->ldap_user_telephonenumber)) {
    $variables['profile_primary_phone'] = $variables['ldap']['ldap_user_telephonenumber']['value'];
  } elseif (!empty($account->ldap_user_mobile)) {
    $field_name = 'ldap_user_mobile';
    $variables['profile_primary_phone'] = $variables['ldap']['ldap_user_mobile']['value'];
  }

  // Score
  $variables['profile_score'] = userpoints_get_current_points($account->uid) . ' ' . t('points', array(), array('context' => 'gofast'));

  // Birthdate
  $wrapper = entity_metadata_wrapper('user', $account);
  $format = $account->language === 'fr' ? 'd/m/Y' : 'm/d/Y';
  $birthdate = $wrapper->field_birthdate->value();
  $formatted_birthdate = $birthdate ? date($format, $birthdate) : '';
  $formatted_minDate = '01/01/1900';
  $formatted_maxDate = '12/31/2000';
  $date_default = t('Select date', array(), array('context' => 'gofast'));

  $variables['profile_birthdate'] = $formatted_birthdate;

    // User title
  $user_title = $variables['ldap']['ldap_user_title']['value'];

  // User department/organisation/company.
  $user_dept = $variables['ldap']['ldap_user_o']['value'];

  // Set all the default values.
  $variables['user_email'] = $account->mail;

  if ($self || $user->uid == 1) {
    // Email field
    $email_field = array(
      'pk' => $account->uid,
      'name' => 'mail',
      'value' => $variables['elements']['#account']->mail,
      'emptytext' => t('Enter your email', array(), array('context' => 'gofast')),
      'wrapper_class' => array()
    );
    $variables['elements']['#account']->mail = theme('x-editable_field', gofast_xeditable_enrich_values($email_field));

    // Given name field
    $user_givenname_field = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_givenname',
      'value' => $variables['ldap']['ldap_user_givenname']['value'],
      'emptytext' => t('Enter your first name', array(), array('context' => 'gofast')),
      'wrapper_class' => array()
    );
    $variables['ldap']['ldap_user_givenname']['value'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_givenname_field));

    // Second name field
    $user_sn_field = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_sn',
      'value' => $variables['ldap']['ldap_user_sn']['value'],
      'emptytext' => t('Enter your last name', array(), array('context' => 'gofast')),
      'wrapper_class' => array()
    );
    $variables['ldap']['ldap_user_sn']['value'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_sn_field));

    // Title field
    $user_title_field = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_title',
      'value' => $user_title,
      'emptytext' => t('Enter function', array(), array('context' => 'gofast:gofast_user')),
      'placement' => 'right',
      'wrapper_class' => array()
    );
    $variables['ldap']['ldap_user_title']['value'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_title_field));

    // Department field
    $user_dept_field = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_o',
      'value' => $user_dept,
      'emptytext' => t('Enter department', array(), array('context' => 'gofast:gofast_user')),
      'placement' => 'right',
      'wrapper_class' => array()
    );
    $variables['ldap']['ldap_user_o']['value'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_dept_field));

    // Phone field
    $user_phone_field = array(
      'pk' => $account->uid,
      'name' => $field_name,
      'value' => $variables['profile_primary_phone'],
      'emptytext' => t('Enter phone number', array(), array('context' => 'gofast')),
      'wrapper_class' => array()
    );
    $variables['profile_primary_phone'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_phone_field));

    $field_birthdate = array(
      'pk' => $account->uid,
      'name' => 'field_birthdate',
      'value' => $formatted_birthdate,
      'type' => 'datetime',
      'datetimepicker' => array(
        'startDate' => $formatted_minDate,
        'endDate' => $formatted_maxDate,
        'language' =>  $account->language !== 'fr' ? 'en' : 'fr', //
        'minView' => 2,
        'bootcssVer' => 3,
      ),
      'title' => t('Birthday', array(), array('context' => 'gofast:gofast_user')),
      'format' => dateformat_PHP_to_bootstrapDatePicker($format),
      'emptytext' => $date_default,
      'placement' => 'right',
      'showbuttons' => 'bottom',
    );
    $variables['profile_birthdate'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_birthdate));

    $about_me = count($account->ldap_user_description) > 0 ? $account->ldap_user_description[LANGUAGE_NONE][0]['value'] : null;
    $field_user_description = array(
      'pk' => $user->uid,
      'name' => 'ldap_user_description',
      'value' => $about_me,
      'title' => t('About me', array(), array('context' => 'gofast:gofast_user')),
      'type' => 'textarea',
      'emptytext' => t('Enter description', array(), array('context' => 'gofast:gofast_user')),
      'placement' => 'bottom',
      'showbuttons' => 'bottom',
      'mode' => 'popup',
      'wrapper_class' => array()
    );
    $variables['field_description'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_user_description));
  }

}

/**
 * Preprocesses variables for theme_username().
 *
 * Integrates themed user picture and replaces user name with display name when
 * possible and if the options are set.
 *
 * @see template_preprocess_username()
 * @see template_process_username()
 */
function gofast_user_preprocess_username(&$variables) {
  $account = user_load($variables['account']->uid);

  if ($variables['picture'] === TRUE) {
    $variables['picture'] = theme('user_picture', array('link' => FALSE, 'wrapper' => 'username') + $variables);
  }

  // Protect $account information if user has no view access to this profile.
  // $variables['profile_access'] flags whether user has 'access user profiles'
  // permission, but it's not sufficient if user partitioning is enabled.
  if (!user_view_access($account)) {
    $variables['name'] = 'xxxxx';
    $variables['attributes_array'] = array(
      'title' => t("You don't have permission to view this profile.", array(), array('context' => 'gofast:gofast_user')),
      'data-toggle' => 'tooltip',
      'data-placement' => 'auto left'
    ) + $variables['attributes_array'];
    unset ($variables['link_path']);
    return;
  }

  if (!$variables['link']) {
    unset ($variables['link_path']);
  }

  if ($variables['override_name'] === TRUE) {
    $variables['name'] = '<span class="display_name">' . gofast_user_display_name($account). '</span>';
  }
  elseif (is_string($variables['override_name'])) {
    $variables['name'] = '<span class="display_name">' . $variables['override_name'] . '</span>';
  }

  if ($variables['menu']) {
    $variables['name'] .= '<span class="caret"></span>';
  }
}

/**
 * Process variables for user-picture.tpl.php.
 *
 * @override template_preprocess_user_picture()
 * @param $variables
 *  The $variables array contains the following arguments :
 *  - account : A user object with 'name', 'uid' and 'picture' fields.
 *  - style : Use it to everride default "Image Style" name (need image.module).
 *  - dimensions : (numeric/array) picture dimension in pixels (default to null).
 *    If set, "Image Style" effect won't be applied.
 *  - popup : (boolean) whether or not to popup profile data on mouse event.
 *
 * @see user.modiule
 * @see user-picture.tpl.php
 */
function gofast_user_preprocess_picture(&$variables) {
  $variables['user_picture'] = '';
  if (!variable_get('user_pictures', 0)) {
    return;
  }
  $account = user_load($variables['account']->uid);
  $wrapped = isset($variables['wrapper']) && $variables['wrapper'];
  // Check acces and show anon picture if user is denied access to this profile.
  $access = user_view_access($account);
  if ($access && !empty($account->picture)) {
    // @TODO: Ideally this function would only be passed file objects, but
    // since there's a lot of legacy code that JOINs the {users} table to a
    // {node} or {comments} and passes the results into this function, if we
    // get numeric value in the picture field we'll assume it's a file id
    // and load it for them. Once we've got user_load_multiple() and
    // comment_load_multiple() functions the user module will be able to load
    // the picture files in mass during the object's load process.
    if (is_numeric($account->picture)) {
      $account->picture = file_load($account->picture);
    }
    if (!empty($account->picture->uri)) {
      $filepath = $account->picture->uri;
    }
  }
  elseif (variable_get('user_picture_default', '')) {
    $filepath = variable_get('user_picture_default', '');
  }
  if (isset($filepath)) {
    // Set image dimensions.
    $dim = $variables['dimensions'];
    $dimensions = array();
    if (!empty($dim)) {
      if (is_numeric($dim)) {
        $dimensions = array('width' => $dim, 'height' => $dim);
      }
      elseif (isset($dim['width']) && isset($dim['height'])) {
        $dimensions = $dim;
      }
    }
    // Set alternative text and title.
    $alt = t("@user's picture", array('@user' => format_username($account)), array('context' => 'gofast:gofast_user'));
    $title = $wrapped ? '' : ($access ? $alt : t("You don't have permission to view this profile.", array(), array('context' => 'gofast:gofast_user')));
    // Use Bootstrap tooltip by default.

    if(isset($variables['attributes'])){
      $attributes = array_merge($variables['attributes'],array('data-toggle' => 'tooltip', 'data-placement' => 'auto left'));
    }else{
      $attributes = array('data-toggle' => 'tooltip', 'data-placement' => 'auto left');
    }

    // If the image does not have a valid Drupal scheme (for eg. HTTP), or if
    // style is not set, don't load image styles.
    $style = $variables['style'];
    if (module_exists('image') && file_valid_uri($filepath) && $style) {
      if (!empty($dimensions)) {
        // Tell image_style dimensions are set to actually override the base
        // style dimensions. This allows to request a Gofast thumbnail (40*40)
        // for example, but with overriden dimensions (it's up to you to
        // request only smaller dims to prevent pixelated images).
        $dimensions += array('override_base_dim' => TRUE);
      }
      $variables['user_picture'] = theme('image_style', $dimensions + array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $title, 'attributes' => $attributes));
    }
    else {
      $variables['user_picture'] = theme('image', $dimensions + array('path' => $filepath, 'alt' => $alt, 'title' => $title, 'attributes' => $attributes));
    }

    if ($variables['link'] && !empty($account->uid) && $access) {
      $variables['user_picture'] = l($variables['user_picture'], "user/{$account->uid}", array('html' => TRUE, 'attributes' => $attributes));
    }
  }
  // Javascript mouse events (popup small profile on mouse events).
  if ($access && $variables['popup'] === TRUE) {
    $variables['classes_array'][] = 'profile-to-popup';
  }
}


function gofast_user_preprocess_page(&$variables){
  global $user;

  // If the user just switched language, save changes as a
  // profile preference.
  $params = drupal_get_query_parameters();
  if (isset($params['language']) && $user->language !== $params['language']) {
    gofast_user_save_lang($params['language']);
  }

  // Add global user related styles on every page.
  drupal_add_css(drupal_get_path('module', 'gofast_user') . "/css/gofast_user.css");
}

/**
 * Implements hook_user_login
 */
function gofast_user_user_login(&$edit, $account) {
    global $user;

    //Generate token
    $uuid = gofast_generate_uuid();
    $tokenGofast = base64_encode($uuid);

    //Generate end timestamp
    $timestamp = time() + 60;

    //Store the token
    db_merge('gofast_token')
        ->insertFields(array(
            'uid' => $user->uid,
            'token' => $tokenGofast,
            'timestamp' => $timestamp,
        ))
        ->updateFields(array(
          'token' => $tokenGofast,
          'timestamp' => $timestamp,
        ))
        ->key(array('uid' => $user->uid))
        ->execute();

  variable_set("gofast_token_user_login", $tokenGofast);
}

/**
 * Implements hook_drupal_goto_alter
 */
function gofast_user_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // or str_ends_with() with PHP8
  if(preg_match('/node\/?$/', $path)) {
    $path = "activity";
  }
  // GoFAST-7585: avoid double append of "path" query parameter when login with Keycloak
  if (strpos($_SERVER["REQUEST_URI"], 'saml/consume') !== FALSE && strpos($path, "path") !== false) {
    $path = explode("?", $path)[0];
  }
  if (isset($_SESSION['login_path']) && !empty($_SESSION['login_path'])) {
    $options['query']['path'] = $_SESSION['login_path'];
    unset($_SESSION['login_path']);
  }
}

function gofast_ajax_login_version_submit_callback(&$form, &$form_state)
{
  global $user;
  global $cookie_domain;

  $standard_prefix_url = variable_get_value('base_url_standard');
  $user = user_load($form_state['uid']);
  $selectVersion = $form_state['values']['simplified_login'];

  setcookie('gofast_version_login_selected', $selectVersion, strtotime('+1 year'), '/', $cookie_domain, true, true); // set the chosen version cookie ininite

  $form_state['redirect'] = 'user/' . $user->uid;
}

function gofast_user_login_and_redirect_to_mobile()
{
  $front_page = variable_get("site_frontpage", "activity");
  gofast_essential_choose_version("Essential");

  drupal_goto($front_page);
}

function gofast_user_login_and_redirect_to_standard()
{
  $front_page = variable_get("site_frontpage", "activity");
  gofast_essential_choose_version("Plus");

  drupal_goto($front_page);
}


function gofast_user_login_form_validation($form, &$form_state)
{
  $errors = form_get_errors();
  if (isset($errors["login"]) || isset($errors['name'])) {
    $errors['name'] = t('Sorry, unrecognized username or password.');
    gofast_form_unset_error('name');
    form_set_error('name', $errors['name']);
  }
  $login_form_disabled = variable_get("gofast_disable_login_form", FALSE);
  if($login_form_disabled){
      if($form_state["values"]["name"] !== "adm" && $form_state["values"]["name"] !== "admin"){
          form_set_error("Unable to login without using SSO");return;
      }
  }
  $account = user_load_by_name($form_state["values"]["name"]);
  // If the user is disabled, we signal it so our patch in the core handler will increment login attempts (to prevent exposing that this username exists)
  if ($account->status == 0) {
    $form_state["values"]["status"] = 0;
  }
  // this account logs using sasl but the external ldap is unreachable: prevent login and warn the user instead of decrementing login attempts
  if ($account->sasl_auth[LANGUAGE_NONE][0]['value'] == 1 && !gofast_ldap_is_directory_reachable(FALSE)) {
    form_set_error("gofast_user", t("Unable to reach the company directory. If the problem persists, please contact your IT department.",  [], ["context" => "gofast:gofast_ldap"]));
    flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
    _login_security_remove_events($form_state["values"]["name"]);
    return;
  }
  if (module_exists('gofast_community')){
    if ($account && $account->name == 'admin') {
      // If the user is admin, deny access.
      form_set_error('name', t('Access denied for admin.'));
      flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
      _login_security_remove_events($form_state["values"]["name"]);
      return;
    }
  }
}


function template_preprocess_gofast_user_profile_popup_template(&$variables) {
    $user_id = $variables["uid"];

    $user_popup = user_load($user_id);
    $variables["user_name"] = gofast_user_display_name($user_popup);
    $variables["user_orga"] = gofast_ldap_ou_title($user_popup);
    $variables["user_role"] = $user_popup->ldap_user_o[LANGUAGE_NONE][0]['value'];

    $timestamp = $user_popup->login;
    $date = format_date($timestamp, 'short');
    $variables["user_lastlogin"] = $date;

    $variables["user_actions"] = gofast_user_get_request_actions($user_popup);
    $variables["user_points"] = db_query("select points from userpoints where uid =" . $user_id)->fetch()->points . " pts";
    $variables["user_picture"] = theme('user_picture', array('account' => $user_popup, 'dimensions' => 100, 'popup' => false));

}

function template_preprocess_gofast_user_profile_personal_info(&$variables){
  global $user;
  foreach(taxonomy_get_vocabularies() as $vocabulary){
          $variables[$vocabulary->machine_name . "_vid"] = $vocabulary->vid;
  }
}

/**
 * Deactivate all extranet accounts whose expiry date has passed
 */
function gofast_user_disable_expired_accounts_cron(){
  $query = db_select("field_data_field_extranet_expiration_date", "fdfeed")
            ->fields("fdfeed", array("entity_id", "field_extranet_expiration_date_value"));
  $query->innerJoin("field_data_is_extranet", "fdie", "fdie.entity_id = fdfeed.entity_id");
  $query->condition("fdie.is_extranet_value", 1, "=");
  $results = $query->execute()
                  ->fetchAllAssoc("entity_id");

  foreach($results as $result){
    $actual_timestamp = time();
    $expire_timestamp = $result->field_data_field_extranet_expiration_date;
    if($expire_timestamp < $actual_timestamp){
      gofast_user_leave_user($result->entity_id);
    }
  }
}