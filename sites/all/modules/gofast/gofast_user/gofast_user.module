<?php

/**
 * Define default username for the platform administrator.
 *
 * @todo : vÃ©rifier qu'il ne soit pas alterable par l'utilisateur adm, ou dans
 * ce cas la constante devra tenir compte d'un eve,tuel changement...
 */
define('GOFAST_USER_ADMINISTRATOR_USERNAME', variable_get('gofast_user_adm_username', FALSE));

/**
 * Define the administrator's userID (available once adm is created).
 */
define('GOFAST_USER_ADMINISTRATOR_ID', variable_get('gofast_user_administrator_id', FALSE));

/**
 * Global role name that refers to administration permissions.
 */
define('GOFAST_ROLE_ADMIN', 'administrator');

/**
 * Global role name for managers. This role is given to any OG administrator
 * so that they are able to perform tasks needing extra (global) permissions.
 * This is a technical role maintained automatically, do not assign manually,
 * this role should not be visible to users.
 */
define('GOFAST_ROLE_MANAGER', 'manager');

/**
 * Global role name for standard users.
 */
define('GOFAST_ROLE_CONTRIBUTOR', 'contributor');

/**
 * Global role for read-only users (neither administrator nor contributor). For
 * now this role is "virtual" (though adms should be able to see/use it), and
 * it grants no more permissions than what drupal's 'authenticated user' do.
 */
define('GOFAST_ROLE_READ_ONLY', 'read only');

/**
 * Default user relationships id.
 */
define('GOFAST_USER_RTID', 1);

/**
 * Possible values for user profile or visibility :
 *  - OFF : Default behavior (relies on permission 'access user profile').
 *  - ON  : Only members of the same spaces can see each others.
 * Get labeled options: gofast_user_partitioning_options()
 * To get the actual value :
 *  variable_get('gofast_user_partitioning', GOFAST_USER_PARTITIONING_DEFAULT);
 */
define('GOFAST_USER_PARTITIONING_OFF', 0);
define('GOFAST_USER_PARTITIONING_ON', 2);
define('GOFAST_USER_PARTITIONING_ON_ONLY_EXTRANET', 1);

/**
 * Default value for user visibility.
 */
define('GOFAST_USER_PARTITIONING_DEFAULT', GOFAST_USER_PARTITIONING_OFF);

/**
 * Whether or not extranet users should be able to access non-extranet spaces.
 * variable_get('gofast_user_extranet_restriction', GOFAST_USER_EXTRANET_RESTRICTION_DEFAULT);
 */
define('GOFAST_USER_EXTRANET_RESTRICTION_OFF', 0);
define('GOFAST_USER_EXTRANET_RESTRICTION_ON', 1);
define('GOFAST_USER_EXTRANET_RESTRICTION_DEFAULT', GOFAST_USER_EXTRANET_RESTRICTION_ON);

/**
 * Default taxonomy  format for a user
 */
define('GOFAST_USER_DEFAULT_FORMAT', 'Profil');

/**
 * Version define version
 */
define('GOFAST_COMPLETE_VERSION', 1);
define('GOFAST_SIMPLE_VERSION', 2);

/**
 * Implements hook_init()
 */
function gofast_user_init() {
  //If we are logged out and the url is "/user/x/edit", redirect to the home page
  if(!user_is_logged_in() && strpos($_SERVER['REQUEST_URI'], "pass-reset-token") !== FALSE){
    header("Referrer-Policy: no-referrer");
    header("Location: /");
    exit;
  }

  if (gofast_request_is_ajax()) {
    return;
  }

  global $user;

  if(isset($_SESSION['pass_reset_' . $user->uid])){
    $warning_message = t('You are using a temporarily session in order to change your password. Please change it from your profil', array(), array('context' => 'gofast'));
    drupal_set_message($warning_message, "warning");
    drupal_add_js(array('pass_reset' => "true"), 'setting');
    //Prevent navigate into other page than profil
    $current_url = current_path();
    $profil_edit_url = "user/".$user->uid."/edit";
    if($current_url != $profil_edit_url){
      drupal_goto($profil_edit_url);
    }
  }

  if(gofast_user_is_comment_restricted()){
    $user->privateComment = TRUE;
  }

  $user->displayName = gofast_user_display_name(user_load($user->uid));

  //Check if we must pop up the carousel for this user
  lock_wait("gofast_carousel_users");
  lock_acquire("gofast_carousel_users");

  $carousel_users = variable_get("gofast_carousel_users", array());

  if(variable_get("gofast_carousel_active", FALSE) && !in_array($user->uid, $carousel_users, true)){
    $carousel_users[] = $user->uid;
    variable_set("gofast_carousel_users", $carousel_users);

    $user->display_carousel = TRUE;
  }

  $picture_path = variable_get('user_picture_default', '');
  $user->avatar_anon = url($picture_path, ['absolute' => TRUE]);

  if ($picture = file_load($user->picture)) {
    $user->avatar = file_create_url($picture->uri);
  }
  else {
    $user->avatar = $user->avatar_anon;
  }

  $picture_path = variable_get('user_picture_default', '');
  $user->avatar_anon = url($picture_path, ['absolute' => TRUE]);

  if ($picture = file_load($user->picture)) {
    $user->avatar = file_create_url($picture->uri);
  }
  else {
    $user->avatar = $user->avatar_anon;
  }

  lock_release("gofast_carousel_users");

  drupal_add_js(array('gofast' => array('user' => $user)), 'setting');
  drupal_add_library('gofast_user','user_directories');
}

/**
 * Checks if a user has a given role. We should prefer this method over core
 * user_has_role() method that check on rid which may differ in production site.
 *
 * @param string $role_name
 *  A role name.
 * @param object|null $account (optional)
 *  A user account. Defaults to the current user.
 * @return
 *  bool TRUE if the user has the role, or FALSE if not.
 */
function gofast_user_has_role($role_name, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  return isset($account->roles) && in_array($role_name, $account->roles, true);
}

/**
 * Checks whether a user is an administrator or not.
 *
 * @param object|null $account (optional)
 *  A user account. Defaults to the current user.
 * @return boolean
 *  TRUE if the user is an administrator, FALSE otherwise.
 */
function gofast_user_is_adm($account = NULL) {
  return gofast_user_has_role(GOFAST_ROLE_ADMIN, $account);
}

/**
 * Checks whether a user is a manager or not.
 *
 * @param object|null $account (optional)
 *  A user account. Defaults to the current user.
 * @return boolean
 *  TRUE if the user is an administrator, FALSE otherwise.
 */
function gofast_user_is_manager($account = NULL){
  return gofast_user_has_role(GOFAST_ROLE_MANAGER, $account);
}


/**
 * Implements hook_menu()
 */
function gofast_user_menu() {
  $items = array();

  $items['admin/config/gofast/user'] = array(
    'title' => t('User accounts', array(), array('context' => 'gofast')),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gofast_user_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Profile popup ajax callback
  $items['profile/popup/%'] = array(
    'page callback' => 'gofast_user_profile_popup',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'access arguments' => array('access user profiles'),
    'access callback' => 'user_access',
    'delivery callback' => 'gofast_ajax_delivery'
  );

  $items['spaces/private-space'] = array(
    'page callback' => 'gofast_user_private_space_page',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

  $items['profile/save-language/%'] = array(
    'page callback' => 'gofast_user_save_lang',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'delivery callback' => 'gofast_ajax_delivery'
  );

  $items['gofast/user-autocomplete/%'] = array(
    'page callback' => 'gofast_user_autocomplete',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access user profiles'),
    'access callback' => 'user_access'
  );

  $items['gofast/%ctools_js/user/edit-avatar/%'] = array(
    'title' => t("Edit avatar", array(), array('context' => 'gofast')),
    'page callback' => 'gofast_user_edit_avatar',
    'page arguments' => array(1, 4),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
    'delivery callback' => 'gofast_ajax_delivery'
  );

  $items['gofast/save/avatar'] = array(
    'title' => 'Gofast save avatar ajax',
    'page callback' => 'gofast_crop_save_avatar_ajax',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
    'delivery callback' => 'gofast_ajax_delivery'
  );

  $items['admin/user/%user/edit-roles/%ctools_js'] = array(
    'title' => 'GoFAST User Roles',
    'page callback' => 'gofast_user_edit_roles',
    'page arguments' => array(4, 2),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('administer roles')
  );

  $items['gofast/user/%/unblock'] = array (
    'title' => 'GoFAST_User UnblockAndRefreshed',
    'page callback' => 'gofast_user_unblockAndRefresh',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'gofast_user_is_adm',
  );

   $items['gofast/user/%/leave'] = array (
    'title' => 'GoFAST_User UnblockAndRefreshed',
    'page callback' => 'gofast_user_unblockAndRefresh',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'gofast_user_is_adm',
  );

  $items['gofast/user/%/unblock_profile'] = array (
    'title' => 'GoFAST_User Unblock',
    'page callback' => 'gofast_user_unblock_profile',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'gofast_user_is_adm',
  );

  $items['gofast/user/%/block_profile'] = array (
    'title' => 'GoFAST_User Block',
    'page callback' => 'gofast_user_block_profile',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'gofast_user_is_adm',
  );

  $items['gofast/user/%/groups'] = array(
    'title' => 'GoFAST_User Groups',
    'page callback' => 'gofast_user_get_groups_async',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
    'delivery callback' => 'gofast_ajax_delivery'
  );

   $items['gofast/user/%/myteam'] = array(
    'title' => 'GoFAST_User Block',
    'page callback' => 'gofast_user_groups_get_block_myteam_async',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
    'delivery callback' => 'gofast_ajax_delivery'
  );

  $items['gofast/user/whoami'] = array(
    'page callback' => 'gofast_user_whoami',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['gofast/user/login/redirect/%'] = array(
    'page callback' => 'gofast_user_login_with_token',
    'page arguments' => array(4,5),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE
  );

  $items['gofast/user/login/version/mobile'] = array(
    'page callback' => 'gofast_user_login_and_redirect_to_mobile',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE
  );

  $items['gofast/user/login/version/standard'] = array(
    'page callback' => 'gofast_user_login_and_redirect_to_standard',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE
  );

  return $items;
}

/**
 * Implements hook_menu_alter()
 */
function gofast_user_menu_alter(&$items) {
  // Add an access callback to user item so that user menu links are not shown
  // to anonymous users.
  if (isset($items['user'])) {
    $items['user']['access callback'] = 'user_is_logged_in';
  }
}


/**
 * Define user permissions. Supply permissions so that they can be selected on
 * the user permissions page and used to grant or restrict access to actions
 * the module performs.
 *
 * Permissions are checked using user_access().
 */
function gofast_user_permission() {
  // Allow users to grant and revoke user roles regardless of the 'administer
  // permissions' check.
  return array(
    'administer roles' => array(
      'title' => t('Administer roles', array(), array('context' => 'gofast')),
      'description' => t('Grant or revoke user roles. Flag user as "extranet" or "broadcaster".', array(), array('context' => 'gofast:gofast_user')),
      'restrict access' => TRUE
    ),

    'gofast administer users' => array(
      'title' => t('Administer users', array(), array('context' => 'gofast_og')),
      'description' => t('Allow to edit any user (execpt his password and email)', array(), array('context'=> 'gofast:gofast_og')),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Wrapper function. Returns Gofast user roles. Drupal 'anonymous' roles is
 * excluded, others can be filtered out depending on parameters.
 *
 * @param boolean $technicals [optional]
 *  Whether or not to include technical roles, e.g. 'manager' is implicit and
 *  should not be displayed to users. If TRUE technical roles will be
 *  included. Defaults to FALSE.
 *
 * @param string $permissions [optional]
 *  A permission string. If set, only roles containing that permission are
 *  returned.
 *
 * @return array
 *  An associative array with the role id as the key and the role name as value.
 */
function gofast_user_roles($technicals = FALSE, $permissions = NULL) {
  $roles = user_roles(TRUE, $permissions);
  if (!$technicals) {
    // Exclude technical roles.
    $roles = array_diff($roles, array_intersect($roles, _gofast_user_technical_roles()));
  }
  return $roles;
}

/**
 * Returns an array of Gofast technical role names.
 *
 * @return
 *  Indexed array of roles names.
 */
function _gofast_user_technical_roles() {
  return array(GOFAST_ROLE_MANAGER, 'authenticated user');
}

/**
 * Gofast admin user roles page/modal calback.
 */
function gofast_user_edit_roles($js, $account) {
  $args = func_get_args();
  array_shift($args);

  if (!$js) {
    array_unshift($args, 'gofast_user_edit_roles_form');
    return call_user_func_array('drupal_get_form', $args);
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'ajax' => TRUE,
    'title' => t('Edit user roles', array(), array('context' => 'gofast:gofast_user')),
    'build_info' => array(
      'args' => $args
    )
  );

  $commands = ctools_modal_form_wrapper('gofast_user_edit_roles_form', $form_state);

  if ($form_state['submitted']) {
    $commands = array(ctools_modal_command_dismiss());
  }

  print ajax_render($commands);
}

/**
 * Gofast admin user roles form builder.
 */
function gofast_user_edit_roles_form($form, $form_state, $account) {
  $form['info'] = array(
    '#markup' => '<div>' . theme('username', array('account' => $account)) . '<hr></div>'
  );

  $form['roles'] = array(
    '#title' => t('Edit user roles', array(), array('context' => 'gofast:gofast_user')),
    '#type' => 'checkboxes',
    '#options' => $roles = gofast_user_roles(),
    '#default_value' => array_keys(array_intersect_key($roles, $account->roles)),
    '#access' => user_access('administer roles'),
    '#attributes' => array('class' => array('user-roles-force-single')),
    '#attached' => array('js' => array(array(
      'data' => drupal_get_path('module', 'gofast_user') . '/js/gofast_user.js',
      'type' => 'file',
      'scope' => 'footer',
      'weight' => 5
    )))
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save', array(), array('context' => 'gofast'))
  );

  return $form;
}

/**
 * Submit callback for edit user roles form.
 */
function gofast_user_edit_roles_form_submit($form, $form_state) {
  $account = $form_state['build_info']['args'][0];
  $roles = gofast_user_roles();

  $selected = array_filter($form_state['values']['roles']);
  $rid = reset($selected);
  $role_name = $roles[$rid];

  // Only submit changes.
  if (!gofast_user_has_role($role_name, $account)) {
    // Apply single-role policy.
    foreach ($roles as $_rid => $_name) {
      unset($account->roles[$_rid]);
    }
    $account->roles[$rid] = $role_name;
  }

  user_save($account);
}

/**
 * Implements hook_form_FormID_alter()
 */
function gofast_user_form_user_register_form_alter(&$form, &$form_state) {
  global $user;
  gofast_user_account_form_alter($form, $form_state, 'user_register_form');
  // Set default value for user roles.
  $role_admin = user_role_load_by_name(GOFAST_ROLE_ADMIN);
  $role_contrib = user_role_load_by_name(GOFAST_ROLE_CONTRIBUTOR);
  $role_ro = user_role_load_by_name(GOFAST_ROLE_READ_ONLY);

  //Value for administrator is 'Super Administrator'
  $form['group_roles']['roles']['#options'][$role_admin->rid] = t('Super administrator', array(), array('context' => 'gofast:user'));
  $form['group_roles']['roles'][$role_admin->rid]['#attributes']['class'][] = 'role_administrator';

  //Default value for plateform role is 'Standard'
  $form['group_roles']['roles']['#default_value'] = array($role_contrib->rid);
  $form['group_roles']['roles']['#options'][$role_contrib->rid] = t('Standard', array(), array('context' => 'gofast:user'));
  $form['group_roles']['roles'][$role_contrib->rid]['#attributes']['class'][] = 'role_contributor';

  //Add custom classes on flag to trigger js
  $form['is_extranet']['#attributes']['class'][] = 'flag_extranet';
  $form['is_broadcaster']['#attributes']['class'][] = 'flag_broadcaster';
  $form['is_extranet']['#attributes']['class'][] = 'flag_extranet';
  $form['is_broadcaster']['#attributes']['class'][] = 'flag_broadcaster';
  $form['gofast_default_role']['field_default_role']['#attributes']['class'][] = 'default_roles';

  //Unset read only choice
  unset ($form['account']['roles']['#options'][$role_ro->rid]);
  unset ($form['group_roles']['roles']['#options'][$role_ro->rid]);

  $form['#validate'][] = 'gofast_user_username_field_validate';
  $form['wrapper_account']['name']['#description'] = 'Username has to be between 5-15 characters long and can only contain letters and numbers';

  if (!empty($_GET['gids']) && empty($form_state[GOFAST_OG_USER_MEMBERSHIP_FIELD])) {
    $form[GOFAST_OG_USER_MEMBERSHIP_FIELD][LANGUAGE_NONE][0]['default']['#default_value'] = $_GET['gids'];
  }

  //We check if the user that is creating the new account has admin privileges to
  //some organisations and build the form according to that
  foreach($form['ldap_user_ou'][LANGUAGE_NONE]['#options'] as $gid => $name){
    if(is_numeric($gid) && !in_array('administrator member', gofast_og_get_user_final_roles_for_space('node', $gid, $user->uid), true)){
      unset ($form['ldap_user_ou'][LANGUAGE_NONE]['#options'][$gid]);
      unset ($form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]['#options'][$gid]);
    }
  }

  if($user->uid == 1){
      $spaces = array_merge(gofast_og_get_children("4", TRUE, FALSE, TRUE), gofast_og_get_children("5", TRUE, FALSE, TRUE),gofast_og_get_children("6", TRUE, FALSE, TRUE), gofast_og_get_children("7", TRUE, FALSE, TRUE));
      foreach($spaces as $gid){
          $form['ldap_user_ou'][LANGUAGE_NONE]['#options'][$gid] = gofast_get_node_title($gid);
          $form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]['#options'][$gid] = gofast_get_node_title($gid);
      }
  }

  //Move notify to message panel
  $form["message"]["notify"] = $form['group_complement']['notify'];
  unset($form['group_complement']['notify']);

  //Retrieve saved user form configuration
  $default_user_form_configuration = array(
      'sasl_auth' => variable_get('gofast_sasl_auth', 0),
      'extranet' => FALSE,
      'broadcaster' => FALSE,
      'comment_restricted' => FALSE,
      'default_role' => "1",
      'notify' => 1
  );
  $user_form_defaults = variable_get("user_form_defaults", $default_user_form_configuration);

  $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#default_value'] = $user_form_defaults['sasl_auth'];

  $form['group_roles']['is_extranet'][LANGUAGE_NONE]['#default_value'] = $user_form_defaults['extranet'];
  $form['group_roles']['is_broadcaster'][LANGUAGE_NONE]['#default_value'] = $user_form_defaults['broadcaster'];
  $form['group_roles']['field_is_comment_restricted'][LANGUAGE_NONE]['#default_value'] = $user_form_defaults['comment_restricted'];

  $form['gofast_default_role']['field_default_role']['und']["#default_value"] = $user_form_defaults['default_role'];

  $form['group_complement_notify']['notify']["#default_value"] = $user_form_defaults['notify'];

  //add hidden field to manage creator's response if account with same mail already exists
   $form['email_already_exists_confirmed']["#type"] = "hidden";
   $form['email_already_exists_confirmed']["#default_value"] = 0;
  //add custom validate to manage create user with mail already taken
   $form['#validate'][] = 'gofast_user_account_validate';
}

function gofast_user_account_validate($form, &$form_state) {
  global $user;
        $errors = form_get_errors();
        if ($errors) {
          // Clear errors.
          form_clear_error();
          // Clear error messages.
          $error_messages = drupal_get_messages('error');
          // Initialize an array where removed error messages are stored.
          $removed_messages = array();

          // Remove all errors originated by the 'foo][bar' element.
          foreach ($errors as $name => $error_message) {

            if ($name == 'mail') {
                // error is about mail. Check if a user alreasy exists with same mail. If yes, check if this user is blocked. If yes, discard the error
                $mail = $form_state["values"]["mail"];
                $existing_user = user_load_by_mail($mail);
                //be sure we don't load user we are currently edit
                $editing_user = $form['#user'];
                if(isset($editing_user->uid)){
                    if($existing_user->uid == $editing_user->uid){
                        $existing_users = user_load_multiple(array(), array('mail' => $mail));
                        foreach($existing_users as $uid=>$my_user){
                            if($uid !== $editing_user->uid){
                                $existing_user = $my_user;
                            }

                        }
                    }
                }

                if(isset($existing_user->uid) && $existing_user->status == 0){
                    if($form_state["values"]["email_already_exists_confirmed"] == 1 || !isset($form_state["values"]["email_already_exists_confirmed"]) || $_SERVER["REQUEST_URI"] !== "/system/ajax"){
                     $removed_messages[] = $error_message;
                     unset($errors[$name]);
                    }else{
                        ctools_include('modal');
                        ctools_include('ajax');

                        $popup_content = "<h5>" . t('A blocked user with this email already exists', array(), array('context' => 'gofast:gofast_user')) . "<br />" . t('Do you want to create a new account or unblock previous one ?', array(), array('context' => 'gofast:gofast_user')) . "</h5><br /><br />";
                        $popup_content .= "<button style='margin-left: 10px' class='btn btn-dark btn-sm icon-before' type='submit' onclick='Gofast.user.SubmitForm()'>" . t('Create new account', array(), array('context' => 'gofast:gofast_user')) . "</button>";
                        $popup_content .= "<button style='margin-left: 10px' class='btn btn-dark btn-sm icon-before' type='submit' onclick='Gofast.user.Unblock_user(" . $existing_user->uid . ")'>" . t('Unblock previous one', array(), array('context' => 'gofast:gofast_user')) . "</button>";

                        $output = array();
                        $output[] = ctools_modal_command_display(t('Warning', array(), array('context' => 'gofast:gofast_user')), $popup_content);

                        print ajax_render($output);exit();
                    }
                }
            }
          }

          // Reinstate remaining errors, except if it concern the og_group_content_ref field and if the broadcast field is fill
          foreach ($errors as $name => $error) {
            form_set_error($name, $error);
            // form_set_error() calls drupal_set_message(), so we have to filter out
            // these from the error messages as well.
            $removed_messages[] = $error;
          }

          // Reinstate remaining error messages (which, at this point, are messages that
          // were originated outside of the validation process).
          foreach (array_diff($error_messages['error'], $removed_messages) as $message) {
            drupal_set_message($message, 'error');
          }
        }

}

function gofast_user_username_field_validate($form, &$form_state) {

  $output['error'] = FALSE;
  $username = $form_state['input']['name'];

  if (strlen($username) < 2 || strlen($username) > 50) {
    $output['error'] = TRUE;
    $output['msg'] = t('The username has to be between 2 and 50 characters long. ', array(), array('context' => 'gofast:gofast_user'));
  }
  if (strpos($username,' ') > 0 || strpos($username, "'") !== FALSE ){
    $output['error'] = TRUE;
    $output['msg'] = t('Username cannot contain spaces or ' . chr(39)  , array(), array('context' => 'gofast:gofast_user'));
  }

//display username errors
  if ($output['error']){
    //drupal_set_message( $output['msg'], 'error');
    form_set_error('name', $output['msg']);
  }
}

/**
 * Implements hook_form_FormID_alter()
 */
function gofast_user_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  if ($user->uid == 1) {
    return;
  }

  // Only use for edit profile
  $form_state['is_admin'] = FALSE;

  $editing_user = $form['#user'];
  gofast_user_account_form_alter($form, $form_state, 'user_profile_form');
  gofast_ldap_profile_forms_alter($form, $form_state);

  // This reorganize method changed the element tree, wrapper...
  gofast_ldap_reorganize_user_register_form_elements($form, $form_state);

  //translate
  gofast_user_account_form_translate_field($form);

  // The username is readonly
  $form['group_account']['wrapper_account']['name']['#attributes']['readonly'] = 'readonly';
  $form['picture']['#access'] = FALSE;

  $self = FALSE;
  if($editing_user->uid == $user->uid ){
    //only for current user
    $form['group_account']['account']['mail']['#access'] = TRUE;
    $form['group_account']['account']['pass']['#access'] = TRUE;
    $form['actions']['cancel']['#access'] = FALSE;
    $self = TRUE;

  }else{
    $form['group_account']['account']['mail']['#access'] = FALSE;
    $form['group_account']['account']['pass']['#access'] = FALSE;
    $form['actions']['cancel']['#access'] = FALSE;
  }

  $can_be_edited = FALSE;
  if(gofast_user_is_adm() || gofast_user_is_adm($editing_user) || user_access('gofast administer user')){
    $can_be_edited = TRUE;
  }


  $form['field_birthdate']['#access'] = $self;
  //Can only be editable via xeditable;
  $form['field_hobbies']['#access'] = FALSE;
  $form['field_interests']['#access'] = FALSE;
  $form['field_skills']['#access'] = FALSE;

  $form[GOFAST_OG_USER_MEMBERSHIP_FIELD]['#access'] = $can_be_edited;
  $form['user_relationships_ui_settings']['#access'] = $can_be_edited;

  $form['group_profile_data']['ldap_user_title']['#access'] = $self;
  $form['group_profile_data']['ldap_user_o']['#access'] = $can_be_edited;
  $form['group_profile_data']['ldap_user_telephonenumber']['#access'] = $self;
  $form['group_profile_data']['ldap_user_mobile']['#access'] = $self;
  $form['group_profile_data']['ldap_user_title']['#access'] = $self;

  $form['account']['status']['#access'] = $can_be_edited;

  if (!gofast_user_is_adm() || gofast_user_is_adm($editing_user)) {
    $form['group_profile_data']['#access'] = $can_be_edited;
    $form['group_profile_data']['ldap_user_ou']['#access'] = $can_be_edited;
    $form['group_complement']['#access'] = $can_be_edited;
  }

  if($self){
      $form['group_profile_data']['#access'] = $self;
  }

  $form['group_roles']['#access'] = $can_be_edited;
  $form['gofast_default_role']['#access'] = $can_be_edited;

  // Adding field to fieldset should be done in the after_build for conserving the add-on in manager textbox
  $form['#after_build'][] = 'gofast_ldap_add_to_fieldset';

  // Set default value for user roles.
  $role_admin = user_role_load_by_name(GOFAST_ROLE_ADMIN);
  $role_contrib = user_role_load_by_name(GOFAST_ROLE_CONTRIBUTOR);
  $role_ro = user_role_load_by_name(GOFAST_ROLE_READ_ONLY);
  $user_is_admin = gofast_user_is_adm($editing_user);

  //Value for administrator is 'Super Administrator'
  $form['group_roles']['roles']['#options'][$role_admin->rid] = t('Super administrator', array(), array('context' => 'gofast:user'));
  $form['group_roles']['roles'][$role_admin->rid]['#attributes']['class'][] = 'role_administrator';

  //Default value for plateform role is 'Standard'
  if($user_is_admin){
    $form['account']['roles']['#default_value'] = array($role_admin->rid);
  }
  else{
    $form['account']['roles']['#default_value'] = array($role_contrib->rid);
  }
  $form['group_roles']['roles']['#options'][$role_contrib->rid] = t('Standard', array(), array('context' => 'gofast:user'));
  $form['group_roles']['roles'][$role_contrib->rid]['#attributes']['class'][] = 'role_contributor';

  //Add custom classes on flag to trigger js
  $form['group_roles']['is_extranet']['#attributes']['class'][] = 'flag_extranet';
  $form['group_roles']['is_broadcaster']['#attributes']['class'][] = 'flag_broadcaster';
  $form['is_extranet']['#attributes']['class'][] = 'flag_extranet';
  $form['is_broadcaster']['#attributes']['class'][] = 'flag_broadcaster';
  $form['gofast_default_role']['field_default_role']['#attributes']['class'][] = 'default_roles';

  //Unset read only choice
  unset ($form['group_roles']['roles']['#options'][$role_ro->rid]);

  //Hide useless group complements
  $form['group_complement']["#type"] = "hidden";

   //add custom validate to manage edit user with mail already taken
   $form['#validate'][] = 'gofast_user_account_validate';

  if(!$editing_user->uid) {

  } else {
    ctools_include('modal');
    ctools_include('ajax');
    $dest = "modal/nojs/{$editing_user->uid}/manage_main_orga";
    $alt = t('Manage main organization', array(), array('context' => 'gofast_manage_main_organization'));
    $contentButton = ctools_modal_text_button($alt, $dest, $alt, 'blue-hover manage_main_organization');
    $form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]["#suffix"] = $contentButton;
    if ($form_state['modal_orga'] == TRUE) {
        //We check if the user that is creating the new account has admin privileges to
        //some organisations and build the form according to that
        foreach($form['ldap_user_ou'][LANGUAGE_NONE]['#options'] as $gid => $name){
          if($gid == $form['ldap_user_ou'][LANGUAGE_NONE]['#default_value']){ //Bypass for current organization
            continue;
          }
          if(is_numeric($gid) && !in_array('administrator member', gofast_og_get_user_final_roles_for_space('node', $gid, $user->uid), true)){
            unset ($form['ldap_user_ou'][LANGUAGE_NONE]['#options'][$gid]);
            unset ($form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]['#options'][$gid]);
          }
        }
        unset($form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]["#suffix"]); //delete button Manage main organization in modal 'Manage main organization'
    } else {
        $form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]["#disabled"] = TRUE;
    }
  }
}


/**
 * This is the form that block a user
 * @param type $form
 * @param array $form_state
 * @return array the form
 */
function gofast_blocked_user_form($form, &$form_state) {
  $uid = isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : FALSE;
  $user = user_load($uid);

  // These two submit handlers unpublish then remove link between node and publication
  $form['#submit'] = array(
    'gofast_blocked_user_form_submit',
  );
  $uid_to_block = $uid;
  $form['#uid_to_block'] = $uid_to_block;

  return confirm_form(
          $form,
          t('Block this user', array(), array('context' => 'gofast')) . ' '. $user->name,
          isset($_GET['destination']) ? $_GET['destination'] : 'user/' . $user->uid,
          t('Are you sure you want to block this user?', array(), array('context' => 'gofast:gofast_user')),
          t('Block', array(), array('context' => 'gofast')),
          t('Cancel', array(), array('context' => 'gofast'))
  );
}

function gofast_blocked_user_form_submit($form, &$form_state){
    global $user;

    //Get the uid to insert in the audit
    $uid_to_block = $form['#uid_to_block'];

    $event = array('mod_author' => $user->uid, 'mod_timestamp' => time(), 'event' => 'user_blocked','uid_to_block' => $uid_to_block);
    $event = serialize($event);
    $last_event_serialized = rawurlencode($event);

    $last_event_unserialized["mod_timestamp"] = time();
    $last_event_unserialized["mod_author"] = $user->uid;

    //Insert inton audit
    gofast_audit_insert_line_audit(0, 'user_blocked', $last_event_serialized, $last_event_unserialized); //The value 0 is define in order to not render node in the audit
    gofast_user_block($uid_to_block);
}

/**
 * This is the form that unblock a user
 * @param type $form
 * @param array $form_state
 * @return array the form
 */
function gofast_unblocked_user_form($form, &$form_state) {
  $uid = isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : FALSE;
  $user = user_load($uid);

  // These two submit handlers unpublish then remove link between node and publication
  $form['#submit'] = array(
    'gofast_unblocked_user_form_submit',
  );

  $uid_to_block = $uid;
  $form['#uid_to_block'] = $uid_to_block;
  return confirm_form(
          $form,
          t('Block this user', array(), array('context' => 'gofast')) . ' '. $user->name,
          isset($_GET['destination']) ? $_GET['destination'] : 'user/' . $user->uid,
          t('Are you sure you want to unblock this user?', array(), array('context' => 'gofast:gofast_user')),
          t('Unblock', array(), array('context' => 'gofast')),
          t('Cancel', array(), array('context' => 'gofast'))
  );
}

function gofast_unblocked_user_form_submit($form, &$form_state){
    $uid_to_block = $form['#uid_to_block'];
    gofast_user_unblock($uid_to_block);
}

function gofast_delete_user_form($form, &$form_state) //Delete user - task
{
  $uid = isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : FALSE;
  $user = user_load($uid);

  $form['#submit'] = array(
    'gofast_delete_user_form_submit',
  );
  $form['#uid_to_delete'] = $uid;
  return confirm_form(
    $form,
    t('Delete this user', array(), array('context' => 'gofast')) . ' ' . $user->name,
    isset($_GET['destination']) ? $_GET['destination'] : 'user_listing_tab',
    t('Are you sure you want to delete this user ?', array(), array('context' => 'gofast:gofast_user'))
  );
}

// Function delete user
function gofast_delete_user_form_submit($form, &$form_state)
{

  global $user;

  $user_to_delete_datas = user_load($form['#uid_to_delete']); // load user Datas
  $isAdmin = !empty($user->roles['3']);


  if ($user_to_delete_datas->access == 0 && $isAdmin) {

    // 1- function that delete user data in ldap
    gofast_ldap_user_delete($user_to_delete_datas);

    // 2- Function that delete user data in Bonita
    // we create the cookie as admin bonita
    $cookie_name = "cookie_bonita" . BONITA_TECHNICAL_LOGIN . ".txt";
    $workflows_user_id = gofast_workflows_get_user_id($user_to_delete_datas);

    if($workflows_user_id != null && isset($variable_association[$user_to_delete_datas->uid])){
      gofast_workflows_curl_delete_user($workflows_user_id, $cookie_name);
      $variable_association = variable_get(VARIABLE_NAME_ID_BONITA, array());
      unset($variable_association[$user_to_delete_datas->uid]) ;
      variable_set(VARIABLE_NAME_ID_BONITA, $variable_association);
    }

    // 3- delete user data from drupal BDD
    user_delete($user_to_delete_datas->uid);
  }
}

function gofast_leave_user_form($form, &$form_state) {
  $uid = isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : FALSE;
  $user = user_load($uid);

  $form['#submit'] = array(
    'gofast_leave_user_form_submit',
  );
  $form['#uid_to_block'] = $uid;
  return confirm_form(
          $form,
          t('Disable this user', array(), array('context' => 'gofast')) . ' '. $user->name,
          isset($_GET['destination']) ? $_GET['destination'] : 'user/' . $uid,
          t('Are you sure you want to disable this user?', array(), array('context' => 'gofast:gofast_user'))
  );
}

function gofast_leave_user_form_submit($form, &$form_state){
    $uid_to_block = $form['#uid_to_block'];
    gofast_user_leave_user($uid_to_block);
}

function gofast_unleave_user_form($form, &$form_state) {
  $uid = isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : FALSE;
  $user = user_load($uid);

  $form['#submit'] = array(
    'gofast_unleave_user_form_submit',
  );
  $last_url= $_SERVER['HTTP_REFERER'];
  $uid_to_block = $uid;
  $form['#uid_to_block'] = $uid_to_block;
  return confirm_form(
          $form,
          t('Re-enable this user', array(), array('context' => 'gofast')) . ' '. $user->title,
          isset($_GET['destination']) ? $_GET['destination'] : 'user/' . $uid,
          t('Are you sure you want to re-enable this user?', array(), array('context' => 'gofast:gofast_user'))
//          t('Re-enable', array(), array('context' => 'gofast')),
//          t('Cancel', array(), array('context' => 'gofast'))
  );
}

function gofast_unleave_user_form_submit($form, &$form_state){
    $uid_to_block = $form['#uid_to_block'];
    gofast_user_unleave_user($uid_to_block);
}

/**
 * Translate label & descritpion for form
 * @param type $form
 */
function gofast_user_account_form_translate_field(&$form){

  $label = $form['group_account']['account']['ldap_user_givenname'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_account']['account']['ldap_user_givenname'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_account']['account']['ldap_user_sn'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_account']['account']['ldap_user_sn'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $desc = $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#description'];
  if($label !== NULL){
    $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#description'] =  t( $desc, array(), array('context' => 'gofast') );
  }

  $label = $form['group_roles']['is_extranet'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['group_roles']['is_extranet'][LANGUAGE_NONE]['#title'] = t($label, array(), array('context' => 'gofast'));
  }

  $desc = $form['group_roles']['is_extranet'][LANGUAGE_NONE]['#description'];
  if($label !== NULL){
    $form['group_roles']['is_extranet'][LANGUAGE_NONE]['#description'] = t($desc, array(), array('context' => 'gofast'));
  }

  $label = $form['group_roles']['is_broadcaster'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['group_roles']['is_broadcaster'][LANGUAGE_NONE]['#title'] = t($label, array(), array('context' => 'gofast'));
  }

  $desc = $form['group_roles']['is_broadcaster'][LANGUAGE_NONE]['#description'];
  if($label !== NULL){
    $form['group_roles']['is_broadcaster'][LANGUAGE_NONE]['#description'] = t($desc, array(), array('context' => 'gofast'));
  }

  $label = $form['group_roles']['field_is_comment_restricted'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['group_roles']['field_is_comment_restricted'][LANGUAGE_NONE]['#title'] = t($label, array(), array('context' => 'gofast'));
  }

  $desc = $form['group_roles']['field_is_comment_restricted'][LANGUAGE_NONE]['#description'];
  if($label !== NULL){
    $form['group_roles']['field_is_comment_restricted'][LANGUAGE_NONE]['#description'] = t($desc, array(), array('context' => 'gofast'));
  }

  $label = $form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]['#title'] = t($label, array(), array('context' => 'gofast'));
  }

  $label = $form['group_profile_data']['ldap_user_title'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_title'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_profile_data']['ldap_user_o'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_o'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_profile_data']['ldap_user_telephonenumber'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_telephonenumber'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_profile_data']['ldap_user_mobile'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_mobile'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['ldap_user_manager'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['ldap_user_manager'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

}

/**
 * Translate label & descritpion for form
 * @param type $form
 */
function gofast_user_account_form_translate_field_register(&$form){
  $label = $form['group_account']['wrapper_account']['ldap_user_givenname'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_account']['wrapper_account']['ldap_user_givenname'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_account']['wrapper_account']['ldap_user_sn'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_account']['wrapper_account']['ldap_user_sn'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $desc = $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#description'];
  if($label !== NULL){
    $form['group_account']['account']['sasl_auth'][LANGUAGE_NONE]['#description'] =  t( $desc, array(), array('context' => 'gofast') );
  }

  $label = $form['is_extranet'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['is_extranet'][LANGUAGE_NONE]['#title'] = t($label, array(), array('context' => 'gofast'));
  }

  $desc = $form['is_extranet'][LANGUAGE_NONE]['#description'];
  if($label !== NULL){
    $form['is_extranet'][LANGUAGE_NONE]['#description'] = t($desc, array(), array('context' => 'gofast'));
  }

  $label = $form['is_broadcaster'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['is_broadcaster'][LANGUAGE_NONE]['#title'] = t($label, array(), array('context' => 'gofast'));
  }

  $desc = $form['is_broadcaster'][LANGUAGE_NONE]['#description'];
  if($label !== NULL){
    $form['is_broadcaster'][LANGUAGE_NONE]['#description'] = t($desc, array(), array('context' => 'gofast'));
  }

  $label = $form['field_is_comment_restricted'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['field_is_comment_restricted'][LANGUAGE_NONE]['#title'] = t($label, array(), array('context' => 'gofast'));
  }

  $desc = $form['field_is_comment_restricted'][LANGUAGE_NONE]['#description'];
  if($label !== NULL){
    $form['field_is_comment_restricted'][LANGUAGE_NONE]['#description'] = t($desc, array(), array('context' => 'gofast'));
  }

  $label = $form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_ou'][LANGUAGE_NONE]['#title'] = t($label, array(), array('context' => 'gofast'));
  }

  $label = $form['group_profile_data']['ldap_user_title'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_title'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_profile_data']['ldap_user_o'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_o'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_profile_data']['ldap_user_telephonenumber'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_telephonenumber'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_profile_data']['ldap_user_mobile'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_mobile'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

  $label = $form['group_profile_data']['ldap_user_manager'][LANGUAGE_NONE][0]['value']['#title'];
  if($label !== NULL){
    $form['group_profile_data']['ldap_user_manager'][LANGUAGE_NONE][0]['value']['#title'] = t( $label, array(), array('context' => 'gofast') );
  }

}

/**
 *  Performs alterations on user account forms (registration & edition).
 */
function gofast_user_account_form_alter(&$form, &$form_state, $form_id) {


  gofast_userlist_og_user_form_alter($form, $form_state);

  //Labels translation
  gofast_user_account_form_translate_field_register($form);
  $account = $form['#user'];
  $self = $account->uid === $GLOBALS['user']->uid;

  //for the moment, prevent everybody (except admin) to edit form profil except self
  //need to be more complex (for exemple allow editing non sensible data like firstname, lastname, picture, etc, but not password or email)
/*
   if($self == false && $GLOBALS['user']->uid != 1 && $form_id !== "user_register_form"){
       drupal_goto("/error/403");exit;
   }
 */

  // Override access policy so that gofast adm are able to edit user roles
  // without requiring 'administer permissions'.
  $access_options = $form['account']['roles']['#options'];
  $form['account']['roles']['#access'] = $access_options && user_access('administer roles');

  // Apply the same policy for the user "extranet" and "broadcaster" flags.
  $form['is_extranet']['#access'] = $form['account']['roles']['#access'];
  $form['is_broadcaster']['#access'] = $form['account']['roles']['#access'];

  $form['account']['roles']['#attributes']['class'][] = 'user-roles-force-single';
  $form['account']['roles']['#attached']['js'] = array(array(
    'data' => drupal_get_path('module', 'gofast_user') . '/js/gofast_user.js',
    'type' => 'file',
    'scope' => 'footer',
    'weight' => 5
  ));

  // Always disable & Hide 'technical' roles.
  foreach (_gofast_user_technical_roles() as $role_name) {
    $role = user_role_load_by_name($role_name);
    $form['account']['roles'][$role->rid]['#disabled'] = TRUE;
    // $form['account']['roles'][$role->rid]['#attributes']['class'] = array('aaa');
    //drupal_add_css(".form-item-roles-{$role->rid} {visibility:hidden;height:0px;}", 'inline');
  }

  // Prevent edition of user private space field reference.
  $form[GOFAST_OG_USER_PRIVATE_SPACE]['#access'] = FALSE;

  // OG membership field requires 'administer group' permission for users to
  // be able to subscribe other users into spaces, but we can't grant any user
  // this permission because it is too broad. Instead, we override the access
  // using our own permission check. Self profile is editable.
  $og_field = &$form[GOFAST_OG_USER_MEMBERSHIP_FIELD];
  $access = $self || user_access('administer spaces') && user_access('administer users');
  $og_field['#access'] = $access;
  if($form_id === 'user_profile_form'){
    unset($form[GOFAST_OG_USER_MEMBERSHIP_FIELD]); //Disabled feature in GOFAST-3006
  }

  if ($access) {
    $og_options = &$og_field[LANGUAGE_NONE][0]['default']['#options'];

    // Override display properties.
    $og_field['#type'] = 'fieldset';
    $og_field['#title'] = t('Space membership', array(), array('context' => 'gofast'));
    unset ($og_field[LANGUAGE_NONE]['#title'], $og_field[LANGUAGE_NONE][0]['default']['#title']);

    // Exclude OG bundles user should not be able to edit (private spaces).
    $space_types = gofast_og_node_types();
    unset ($og_options[$space_types['private_space']]);

    // If not a self profile edition, filter options according to permission
    // check in each space.
    $managed_gids = $self ? gofast_og_get_spaces_by_user() : gofast_og_get_managed_spaces();
    gofast_og_form_field_filter_by_id($form, GOFAST_OG_USER_MEMBERSHIP_FIELD, $managed_gids);
  }

  // Autocomplete for manager textfield.
  $form['ldap_user_manager'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'gofast/user-autocomplete';

  // Timezone: if configurable and default is not set, use site default.
  $config_timezone = variable_get('configurable_timezones', 1) && isset ($form['timezone']['timezone']);
  if ($config_timezone && empty($form['timezone']['timezone']['#default_value'])) {
    $form['timezone']['timezone']['#default_value'] = variable_get('date_default_timezone', @date_default_timezone_get());
  }

  //Hide useless group complements
  $form['group_complement']["#type"] = "hidden";

  //Remove block/unblock field
  $form['group_complement_status']['#access'] = FALSE;
  $form['account']['status']['#access'] = FALSE;

  //Remove field left
  $form['field_left']['#attributes']['class'][] = "gofast_display_none";

  array_unshift($form['#validate'], 'gofast_user_form_validate');
  array_unshift($form['#submit'], 'gofast_user_form_submit');
}

function gofast_user_form_validate(&$form, &$form_state) {
  // Validate 'username' as a file name since it will be used as a dir name for
  // the user's private space directory (basically directories must respect the
  // same restrictions as filenames).
  if (!gofast_validate_filename($form_state['values']['name'])) {
    form_set_error('name', t('Username identifier contains illegals characters.', array(), array('context' => 'gofast:gofast_user')));
  }
  $_SESSION["default_role_creation_user"] = $form_state['values']["field_default_role"][LANGUAGE_NONE][0]["value"];

  $role_contrib = user_role_load_by_name(GOFAST_ROLE_CONTRIBUTOR);

  if(!gofast_user_is_adm()){
    $form_state['values']['roles'][$role_contrib->rid] = $role_contrib->rid;
  }
}

/**
 * Submit callback for user account forms (registration & edition).
 */
function gofast_user_form_submit(&$form, &$form_state) {
  if($form['#form_id'] === 'user_profile_form'){
    //Disabled feature in GOFAST-3006
    unset($form['og_user_node']);
    unset($form_state['field']['og_user_node']);
  }

  if ($form['group_complement']['status']['#value'] == 1 && $form['#user']->status == 0 && $form['#user']->uid !== 0){
    $user = $form['#user'];
    gofast_user_unblock($user->uid);
  }

  $account = $form['#user'];
  if (isset($form_state['values']['pass'])) {
    // Keep track of password updates.
    _gofast_set_user_key($account->uid, $form_state['values']['pass']);
  }


  // Clear XSS
  $form_state['values']['ldap_user_givenname']['und'][0]['value'] = gofast_xss_clean($form_state['values']['ldap_user_givenname']['und'][0]['value']); // Firstname
  $form_state['values']['ldap_user_sn']['und'][0]['value'] = gofast_xss_clean($form_state['values']['ldap_user_sn']['und'][0]['value']); // Lastname
  $form_state['values']['ldap_user_title']['und'][0]['value'] = gofast_xss_clean($form_state['values']['ldap_user_title']['und'][0]['value']); // title
  $form_state['values']['ldap_user_o']['und'][0]['value'] = gofast_xss_clean($form_state['values']['ldap_user_o']['und'][0]['value']); // compagny
  $form_state['values']['ldap_user_telephonenumber']['und'][0]['value'] = gofast_xss_clean($form_state['values']['ldap_user_telephonenumber']['und'][0]['value']); // phone
  $form_state['values']['ldap_user_mobile']['und'][0]['value'] = gofast_xss_clean($form_state['values']['ldap_user_mobile']['und'][0]['value']); // mobile
  $form_state['values']['field_substitute']['und'][0]['value'] = gofast_xss_clean($form_state['values']['field_substitute']['und'][0]['value']); // substitute
  // END Clear XSS



 /* $self = $account->uid === $GLOBALS['user']->uid;
  $og_edit = isset($form_state['values'][GOFAST_OG_USER_MEMBERSHIP_FIELD][LANGUAGE_NONE]);

  // If the current user is editing OG field of another user, prevent any loss
  // of memberships. Administrators are not concerned because they cannot
  // unsubscribe users from a space inadvertently.
  if ($og_edit && !$self && !gofast_user_has_role(GOFAST_ROLE_ADMIN)) {
    // A manager (or a group administrator) is editing memberships, in this case
    // access policy narrow down OG memberships options according to the manager
    // spaces [i.e. its managed spaces @see gofast_og_get_managed_spaces()], so
    // the actual memberships values needs to be completed with the actual user
    // memberships.
    $og_values = &$form_state['values'][GOFAST_OG_USER_MEMBERSHIP_FIELD][LANGUAGE_NONE];

    // Computes the difference between the actual user's spaces and the managed
    // spaces (of the manager), then add it to the manager submitted values.
    // User's private space is ignored because it doesn't rely on the same
    // membership type.
    $private = array(gofast_og_get_user_private_space($account, FALSE));
    $spaces = gofast_og_get_spaces_by_user($account);
    $managed = gofast_og_get_managed_spaces();

    $missing = array_diff($spaces, $private, $managed);
    if (!empty($missing)) {
      foreach ($missing as $gid) {
        $og_values[] = array(
          'target_id' => $gid,
          'field_mode' => 'default' // . .
        );
      }
    }
  }*/
}

/**
 * Implements hook_og_role_grant()
 *
 *  Grant role "manager" to any space administrator.
 */
function gofast_user_og_role_grant($entity_type, $gid, $uid, $rid) {
  if ($uid == GOFAST_USER_ADMINISTRATOR_ID) {
    // Ignore administrators, they already have manager's permissions.
    return;
  }

  $account = user_load($uid);
  if (gofast_user_has_role(GOFAST_ROLE_MANAGER, $account)) {
    // User is already a manager.
    return;
  }

  //we are during a user creation, don't do anything
   if(isset($_SESSION["default_role_creation_user"])){
        return;
   }

  $og_roles = og_get_user_roles_name($rid);
  $og_role = reset($og_roles);

  if ($og_role === OG_ADMINISTRATOR_ROLE) {
    $role = user_role_load_by_name(GOFAST_ROLE_MANAGER);
    $gofast_users_to_promote_manager = variable_get("gofast_users_to_promote_manager", array());
    $gofast_users_to_promote_manager[$uid] = $uid;

    variable_set('gofast_users_to_promote_manager', $gofast_users_to_promote_manager);
    //user_multiple_role_edit(array($uid), 'add_role', $role->rid);
  }
}

/**
 * Implements hook_og_role_revoke()
 *
 *  Revoke role "manager" to user that haven't any OG administer role.
 */
function gofast_user_og_role_revoke($entity_type, $gid, $uid, $rid) {
  $account = user_load($uid);

  if (gofast_user_is_adm($account)) {
    // Ignore administrators.
    return;
  }

  if (!gofast_user_has_role(GOFAST_ROLE_MANAGER, $account)) {
    // This does not apply to this user.
    return;
  }

  // This function can be called manually so we have to check $rid first.
  if (isset($rid)) {
    $og_roles = og_get_user_roles_name($rid);
    $og_role = reset($og_roles);
    if ($og_role !== OG_ADMINISTRATOR_ROLE) {
      return;
    }
  }

  // Check if the user has still access to administration tasks in at least one
  // of its space (excluding its private space and the current one).
  $spaces = gofast_og_get_spaces_by_user($account);
  $private_id = gofast_og_get_user_private_space($account, FALSE);

  foreach ($spaces as $_gid) {
    if ($gid == $_gid || $_gid == $private_id) continue;
    if (og_user_access($entity_type, $_gid, 'administer group', $account)) {
      // User has still an administer access, do nothing.
      return;
    }
  }

  // User lost all OG privileges, safely remove its manager role.
  //$role = user_role_load_by_name(GOFAST_ROLE_MANAGER);
  //user_multiple_role_edit(array($uid), 'remove_role', $role->rid);
    $gofast_users_to_unpromote_manager = variable_get("gofast_users_to_unpromote_manager", array());
    $gofast_users_to_unpromote_manager[$uid] = $uid;
    variable_set('gofast_users_to_unpromote_manager', $gofast_users_to_unpromote_manager);
}

/**
 * Implements hook_og_membership_delete().
 */
function gofast_user_og_membership_delete(OgMembership $og_membership) {
  if ($og_membership->entity_type !== 'user' || $og_membership->field_name !== GOFAST_OG_USER_MEMBERSHIP_FIELD) {
    return;
  }

  $_events = _gofast_ldap_entity_last_events();
  if (isset($_events["node|{$og_membership->gid}"]) && $_events["node|{$og_membership->gid}"] === 'delete') {
    // An OG node has just been deleted, nothing to do here.
    return;
  }

  // Run manually our og_role_revoke implementation to check if user has to be
  // revoked manager permissions.
  gofast_user_og_role_revoke($og_membership->group_type, $og_membership->gid, $og_membership->etid, NULL);
}

/**
 * Helper function that returns a list of user entities matching role ids or
 * role names passed in.
 *
 * @param $roles
 *  An array of role_ids or role_names, depending on $type
 * @param $type
 *  (optional) A string defining the type of the $roles param. Possible values
 *  are 'rid' or 'name'. Default is 'name'.
 */
function gofast_user_load_multiple_by_roles($roles, $type = 'name', $full = TRUE) {
  switch ($type) {
    case 'rid' : return _gofast_user_load_multiple_by_role_ids($roles, $full);
    case 'name': return _gofast_user_load_multiple_by_roles($roles, $full);
  }
  return array();
}

function _gofast_user_load_multiple_by_role_ids($rids, $full = TRUE) {
  if (!is_array($rids))
    (array) $rids;
  $query = 'SELECT DISTINCT(uid) FROM {users_roles} WHERE rid IN (:rids)';
  $result = db_query($query, array(':rids' => $rids));
  $uids = $result->fetchCol();
  if($full){
    return $uids ? user_load_multiple($uids) : array();
  }
  return $uids;
}

function _gofast_user_load_multiple_by_roles($roles, $full = TRUE) {
  if (!is_array($roles))
    (array) $roles;
  $query = 'SELECT rid FROM {role} WHERE name IN (:names)';
  $result = db_query($query, array(':names' => $roles));
  $rids = $result->fetchCol();
  return $rids ? _gofast_user_load_multiple_by_role_ids($rids, $full) : array();
}

function gofast_user_load_all($full = TRUE) {
  $query = 'SELECT (uid) FROM {users}';
  $result = db_query($query);
  $uids = $result->fetchCol();
  if($full){
    return $uids ? user_load_multiple($uids) : array();
  }
  return $uids;
}

/**
 * formulaire de config test
 */
function gofast_user_settings_form() {
  $adm_exists = GOFAST_USER_ADMINISTRATOR_ID !== FALSE;

  $form['gofast_user_settings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Manage Gofast users',
    'info' => array(
      '#type' => 'item',
      '#description' => 'Create account (test) : ' . theme('item_list', array('items' => array(GOFAST_USER_ADMINISTRATOR_USERNAME)))),
  );

  $form['gofast_user_settings']['status'] = array(
    '#type' => 'item',
    '#description' => $adm_exists ? t('An administrator named %name already exists', array('%name' => GOFAST_USER_ADMINISTRATOR_USERNAME), array('context' => 'gofast:gofast_user')) : t('Create administrator profile', array(), array('context' => 'gofast:gofast_user'))
  );

  $form['gofast_user_settings']['submit'] = array(
    '#type' => 'submit',
    '#name' => 'Create',
    '#value' => 'Create',
    '#disabled' => $adm_exists
  );

  return $form;
}

function gofast_user_settings_form_submit($form, &$form_state) {
  if ($form_state['submitted'] && drupal_strtolower($form_state['clicked_button']['#value']) == 'create') {
    $account = gofast_user_adm_create();
    if ($account->uid) {
      drupal_set_message('Administrator account created successfully.', 'status');
    }
  }
}

/**
 * Implements hook_enable()
 */
function gofast_user_enable() {
  if (GOFAST_USER_ADMINISTRATOR_ID && !entity_load('user', GOFAST_USER_ADMINISTRATOR_ID)) {
    variable_set('gofast_user_administrator_id', FALSE);
  }
  $locale_weight = db_select('system')
          ->fields('system', array('weight'))
          ->condition('name', 'locale', '=')
          ->execute()
          ->fetchField();

  db_update('system')
          ->fields(array('weight' => $locale_weight + 1))
          ->condition('name', 'gofast_user')
          ->execute();
}

/**
 * Implements hook_user_presave()
 *
 * A user account is about to be created or updated. This hook provides a way
 * to store properties in the serialized {users}.data column, which is
 * automatically loaded whenever a user account object is loaded, modules may
 * add to $edit['data'] in order to have their data serialized on save.
 *
 * @param $edit
 *  The array of form values submitted by the user. Assign values to this array
 *  to save changes in the database.
 * @param $account
 *  The user object on which the operation is performed. Values assigned in this
 *  object will not be saved in the database.
 * @param $category
 *  The active category of user information being edited.
 */
function gofast_user_user_presave(&$edit, $account, $category) {
  // Store update timestamp into 'data' storage.
  $edit['data']['changed'] = time();

  //update field_format with the right tid (for Profil)
  $taxonomy_term = taxonomy_get_term_by_name(GOFAST_USER_DEFAULT_FORMAT);
  if(count($taxonomy_term) > 0 ){
    $edit['field_format'][LANGUAGE_NONE][0]['tid'] = array_shift($taxonomy_term)->tid;
  }

  // Ensure user won't see CKeditor switch toggles.
  $edit['data']['ckeditor_show_toggle'] = 'f';

  //the user is going to be blocked
    if(isset($edit["status"]) && $edit["status"] == 0 && $account->status == 1){
      $server = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
      $dn = gofast_ldap_user_dn($account->uid);
      $current_pass_encrypt = gofast_ldap_get_user_pwd($account);
      $userPassword = base64_decode($current_pass_encrypt);
      $server->modifyLdapEntry($dn, array('userPassword' => "_blocked_".$userPassword));
      $edit["pass"] = "_blocked_".$userPassword;
    }elseif(isset($edit["status"]) && $edit["status"] == 1 && $account->status == 0){
      $server = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
      $dn = gofast_ldap_user_dn($account->uid);

      $current_pass_encrypt = gofast_ldap_get_user_pwd($account);
      $userPassword = base64_decode($current_pass_encrypt);
      $userPassword = str_replace("_blocked_", "", $userPassword);
      $server->modifyLdapEntry($dn, array('userPassword' => $userPassword));
    }
    if(isset($account->is_new) && isset($edit['roles'][3])){
        ## if the user will be admin then add ADMIN_GOFAST
	$LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
	$LdapServer->connectAndBindIfNotAlready();
	$ldap_basedn = variable_get('gofast_ldap_int_base_dn');
	$attributes = array();
	$attributes['objectclass'] = array('groupOfNames');
	$attributes['description'] = GOFAST_ADMIN_PLATFORM;
	$attributes['cn'] = GOFAST_ADMIN_PLATFORM;
	$gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

	$LdapServer->groupAddMember($gofast_ldap_gofast_admin_basedn, $account);
    }

    if(isset($edit['roles'][3]) && isset($account->roles[4])){
        ## if the user will be admin then add ADMIN_GOFAST
	$LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
	$LdapServer->connectAndBindIfNotAlready();
	$ldap_basedn = variable_get('gofast_ldap_int_base_dn');
	$attributes = array();
	$attributes['objectclass'] = array('groupOfNames');
	$attributes['description'] = GOFAST_ADMIN_PLATFORM;
	$attributes['cn'] = GOFAST_ADMIN_PLATFORM;
	$gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

	$LdapServer->groupAddMember($gofast_ldap_gofast_admin_basedn, $account);
    }else if($edit['roles'][4] && isset($account->roles[3])){
        ## else remove it
	$LdapServer = gofast_ldap_server_load(GOFAST_LDAP_INT_SERVER);
	$LdapServer->connectAndBindIfNotAlready();
	$ldap_basedn = variable_get('gofast_ldap_int_base_dn');
	$attributes = array();
	$attributes['objectclass'] = array('groupOfNames');
	$attributes['description'] = GOFAST_ADMIN_PLATFORM;
	$attributes['cn'] = GOFAST_ADMIN_PLATFORM;
	$gofast_ldap_gofast_admin_basedn = 'cn=' . $attributes['cn'] . ',ou=Groups,' . $ldap_basedn;

	$LdapServer->groupRemoveMember($gofast_ldap_gofast_admin_basedn, $account);
    }
}

function gofast_user_mail_alter(&$message) {

  // some usefull variables
  global $user;
  $userbdd = user_load($user->uid);
  $author_name = gofast_user_display_name($userbdd);
  $author_message =  $message["params"]["account"]->content;
  global $base_url;
  $account = $message["params"]["account"];
  $l = array('langcode' => $account->language, 'context' => 'gofast_user');
  $site_name = variable_get('site_name', 'GoFast');

  if($message["id"] == "user_register_admin_created"){
    $author_pic = theme('user_picture', array('account' => $user));
    //$author_name = $user->display_name;
    $user_login = $account->name;
    $user_password = $account->password;
    $url = $base_url;
    $url_change_password = user_pass_reset_url($account);

    if(strpos($user_password, "{BCRYPT}") !== false){
        $user_password =  '<div>'.t("Please change your account password immediately using ", array(), $l).'<a href="'.$url_change_password.'" style="font-size:15px; text-decoration: underline; text-decoration-color: #0074A6; font-weight:normal;   overflow:auto;   margin-left: 5px;   font-weight: bold;   color: #0074A6" class="link">'.t("this link", array(), $l).'</a> </div>';
    }

    $full_name = gofast_user_display_name($account);

    $subject = t("Welcome to", array(), array('context' => 'gofast', 'langcode' => $account->language)). " " . $site_name;
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    if($account->sasl_auth[LANGUAGE_NONE][0]['value'] == 1){
      $body = theme('gofast-account-creation-sasl-body', array(
        'author_pic' => $author_pic,
        'author_name' => $author_name,
        'author_message' => $author_message,
        'user_login' => $user_login,
        'user_password' => $user_password,
        'site_name' => $site_name,
        'url' => $url,
        'url_change_password' => $url_change_password,
        'full_name' => $full_name,
        'l' => $l,
    ));
    }
    else{
      $body = theme('gofast-account-creation-body', array(
        'author_pic' => $author_pic,
        'author_name' => $author_name,
        'author_message' => nl2br($author_message),
        'user_login' => $user_login,
        'user_password' => $user_password,
        'site_name' => $site_name,
        'url' => $url,
        'url_change_password' => $url_change_password,
        'full_name' => $full_name,
        'l' => $l,
    ));
   }
   unset($message['to']);
   $message['send'] = FALSE;

    $mail = array(
      'body' => $body,
      'title' => $subject,
      'subject' => $subject,
      'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail, array(array('method' => 'to','recpt' => $account->mail)), time());
  }
  // in the case witch the relationship is validate (after the first request is send)
  if($message['id'] == 'user_relationship_mailer_approve'){
    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("Approved request for a new relationship on @siteName", array('@siteName' => $siteName), $l);
    $title = t("Approved request for a new relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast-user-approve-resquest-relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'author_pic'  => $author_pic,
    ));
    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail, array(array('method' => 'to','recpt' => $message['to'])) , time());
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_status_activated'){
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_relationship_mailer_disapprove'){
    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("Declined request for a new relationship on @siteName", array('@siteName' => $siteName), $l);
    $title = t("Declined request for a new relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast-user-decline-resquest-relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'author_pic'  => $author_pic,
    ));

    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail, array(array('method' => 'to','recpt' => $message['to'])) , time());

    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_relationship_mailer_remove'){
    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("You lost a relationship on @siteName", array('@siteName' => $siteName), $l);
    $title = t("You lost a relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast-user-delete-relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'author_pic'  => $author_pic,
    ));
    if($message['to'] !== $user->mail){

      $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
      );
      gofast_mail_queue_api_queue_ext($mail,  array(array('method' => 'to','recpt' => $message['to'])) , time());
    }
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_relationship_mailer_request'){

    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("Request for a new relationship on @siteName", array('@siteName' => preg_replace('/[^A-Za-z0-9\-]/', '', $siteName)), $l);
    $title = t("Request for a new relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast_user_add_request_relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'message'     => $_POST['relationship_message'],
      'author_pic'  => $author_pic,
    ));

    $recpt = array(array('method' => 'to','recpt' => $message['to']));
    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail,  $recpt, time());
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_relationship_mailer_cancel'){

    $recipient = user_load_by_mail($message['to']);
    $l = array('langcode' => $recipient->language, 'context' => 'gofast_user');
    $siteName = variable_get('site_name');
    $recipName = gofast_user_display_name($recipient);
    $relationshipSeeker = $author_name;
    $author_pic = theme('user_picture', array('account' => $user));
    $linkAccount = $GLOBALS['base_url']."/user";

    $subject = t("Cancelled request for a new relationship on @siteName", array('@siteName' => preg_replace('/[^A-Za-z0-9\-]/', '', $siteName)), $l);
    $title = t("Cancelled request for a new relationship", array(), $l);
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;

    $body = theme('gofast_user_cancel_request_relationship', array(
      'l' => $l,
      'siteName' => $siteName,
      'recipName' => $recipName,
      'relationshipSeeker' => $relationshipSeeker,
      'linkAccount' => $linkAccount,
      'author_pic'  => $author_pic,
    ));
    $recpt = array(array('method' => 'to','recpt' => $message['to']));
    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail,  $recpt, time());
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if($message['id'] == 'user_password_reset'){

    $new_password_link = user_pass_reset_url($account);
    $subject = t("Your new password request on @site_name", array('@site_name' => $site_name), array('context' => 'gofast', 'langcode' => $account->language));
    $title = t("New password request", array(), array('context' => 'gofast', 'langcode' => $account->language));
    $footer = t('Message sent from ', array(), array('context' => 'gofast', 'langcode' => $account->language))." ".$site_name;
    $l = array('context' => 'gofast', 'langcode' => $account->language);
    $body = theme('gofast-user-user-password-reset', array(
      'new_password_link' => $new_password_link,
      'l' => $l,
      'site_name' => $site_name,
      'name' => gofast_user_display_name($account),
    ));

    $recpt = array(array('method' => 'to','recpt' => $message['to']));
    $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail,  $recpt, time());
    unset($message['to']);
    $message['send'] = FALSE;
  }

  if ($message['id'] == 'login_security_block_user_notify'){

    unset($message['to']);
    $message['send'] = FALSE;

    $queryAllAdm = db_query("SELECT uid FROM users_roles WHERE rid='3'");
    $allAdm = $queryAllAdm->fetchAll();

    foreach ($allAdm as $adm){
      $admAccount = user_load($adm->uid);

      $l = array('context' => 'gofast', 'langcode' => $admAccount->language);
      $site_name = variable_get('site_name');
      $subject = t("A user has blocked his account", array(), $l);
      $title = t("A user has blocked his account", array(), $l);
      $footer = t('Message sent from ', array(), $l)." ".$site_name;
      $blocked_user = user_load_by_name($message['params']['@username']);
      $linkAccount = "<a href='".$GLOBALS['base_url']."/user/".$blocked_user->uid."'>".$message['params']['@username']."</a>";
      $body = theme('gofast_user_notify_allAdm_to_user_blocked', array(
        'admName' => gofast_user_display_name($admAccount),
        'l' => $l,
        'site_name' => $site_name,
        'p' => $message,
        'userBlocked' => $linkAccount,
      ));

      $recpt = array(array('method' => 'to','recpt' => $admAccount->mail));
      $mail = array(
        'body' => $body,
        'title' => $title,
        'subject' => $subject,
        'footer' => $footer
    );
    gofast_mail_queue_api_queue_ext($mail,  $recpt, time());

    }
  }
}

/**
 * Implements_hook_user_insert()
 *
 * A user account was created. Module should save its custom additions to the
 * user object into the database.
 *
 * @see hook_user_presave() for params description
 */
function gofast_user_user_insert(&$edit, $account, $category) {
  watchdog('user_insert', $account->name);


  // Save event for notifications
  $groups_to_join = $edit['og_user_node']['und'];
  foreach ($groups_to_join as $group) {

    $node = node_load($group['target_id']);

    $membership_data = array(
        'membership_action' => 'NMEM', // New Member
        'membership_type' => 'user',
        'membership_id' => $account->uid,
        'membership_name' => gofast_user_get_display_name_sql($account->uid)
    );

    gofast_message_ext_create_og_membership_entity($node, $membership_data);
  }



  if(isset($_SESSION["default_role_creation_user"])){
      unset($_SESSION["default_role_creation_user"]);
  }

}

/**
 * Create a user programmatically
 */
function gofast_user_user_create($username, $givenname, $sn, $pass, $mail, $main_orga, $lang = 'fr') {
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  $account = new StdClass();
  $account->is_new = TRUE;
  $account->status = TRUE;
  $account->name = $username;
  $account->pass = $pass;
  $account->mail = $mail;
  $account->init = $mail;
  $account->timezone = 'Europe/Paris';
  $account->language = $lang;

  $role = user_role_load_by_name(GOFAST_ROLE_CONTRIBUTOR);
  $account->roles[$role->rid] = GOFAST_ROLE_CONTRIBUTOR;

  // These fields are mandatory because we use them to generate [cn] attribute
  // token for ldap provisioning. Either LDAP module or openLDAP's inetOrgPerson
  // objectClass require cn to be set..
  $account->ldap_user_givenname[LANGUAGE_NONE][0]['value'] = $givenname;
  $account->ldap_user_sn[LANGUAGE_NONE][0]['value'] = $sn;

  // Password field provisioning to LDAP doesn't work during account creation.
  $edit = array('pass' => $account->pass);
  ldap_user_ldap_provision_pwd('set', $pass);

  $account = user_save($account, $edit);
  if ($account === FALSE) {
    //watchdog('Gofast User', 'User :adm creation failed.', array(':adm' => GOFAST_USER_ADMINISTRATOR_USERNAME), WATCHDOG_ERROR);
  }
  else {
   // watchdog('Gofast User', 'User :adm created successfully', array(':adm' => $account->name), WATCHDOG_INFO);
  }

  return $account;
}

/**
 * Implements hook_user_update()
 *
 * A user account was updated. Modules may use this hook to update their user
 * data in a custom storage after a user account has been updated.
 *
 * @see hook_user_presave() for params description
 */
function gofast_user_user_update(&$edit, $account, $category) {
  //detect if the user has just been blocked but not disable ( it means the user has been blocked due to an execessive login number)
  if($account->status == 0 && $account->original->status == 1){
      if(!gofast_user_is_left($account)){
          //user has been blocked due to an execessive login number
            //audit
            global $user;
            $event = array('mod_author' => $account->uid, 'mod_timestamp' => time(), 'event' => 'user_blocked','uid_to_block' => $account->uid);
            $event = serialize($event);
            $last_event_serialized = rawurlencode($event);

            $last_event_unserialized["mod_timestamp"] = time();
            $last_event_unserialized["mod_author"] = $account->uid;

            //Insert inton audit
            gofast_audit_insert_line_audit(0, 'user_blocked', $last_event_serialized, $last_event_unserialized); //The value 0 is define in order to not render node in the audit
      }
  }
  //watchdog('user_update', json_encode($edit));

}

/**
 * Implements hook_user_load()
 * Act on user objects when loaded from the database.
 *
 * Due to the static cache in user_load_multiple() you should not use this hook
 * to modify the user properties returned by the {users} table itself since this
 * may result in unreliable results when loading from cache.
 *
 * @param $users An array of user objects, indexed by uid.
 */
function gofast_user_user_load($users) {
  foreach ($users as $uid => &$account) {
    // Add an alias for the changed properties.
    $account->changed = isset($account->data['changed']) ? $account->data['changed'] : 0;
  }
}
/**
 * Implements hook_user_delete()
 *
 * Respond to user deletion. This hook is invoked from user_delete_multiple()
 * before field_attach_delete() is called and before users are actually removed
 * from the database.
 * Modules should additionally implement hook_user_cancel() to process stored
 * user data for other account cancellation methods.
 *
 * @param $account The account that is being deleted.
 */
function gofast_user_user_delete($account) {
  if ($account->uid == GOFAST_USER_ADMINISTRATOR_ID) {
    variable_set('gofast_user_administrator_id', FALSE);
  }
}

/**
 * Creates the Gofast Administrator (adm).
 */
function gofast_user_adm_create($thename, $thepswd, $moreInfos = array()) {
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  $account = new StdClass();
  $account->is_new = TRUE;
  $account->status = TRUE;
  variable_set('gofast_user_adm_username', $thename);
  $account->name = variable_get('gofast_user_adm_username'); //GOFAST_USER_ADMINISTRATOR_USERNAME;
  $account->pass = user_hash_password($thepswd);
  if ($moreInfos['Email'] !== ""){
    $account->mail = $moreInfos['Email'];
    $account->init = $moreInfos['Email'];
  }
  else{
    $account->mail = 'support@ceo-vision.com';
    $account->init = 'support@ceo-vision.com';
  }

  $account->timezone = 'Europe/Paris';
  $account->language = 'fr';

  $role = user_role_load_by_name(GOFAST_ROLE_ADMIN);
  $account->roles[$role->rid] = GOFAST_ROLE_ADMIN;

  /**** Profile Data ****/  // Add data of profile if they are registered
  if ($moreInfos['title'] !== "") {
    $account->ldap_user_title[LANGUAGE_NONE][0]['value'] = $moreInfos['title'];
  }
  if ($moreInfos['phoneNumber'] !== "") {
    $account->ldap_user_telephonenumber[LANGUAGE_NONE][0]['value'] = $moreInfos['phoneNumber'];
  }
  if ($moreInfos['MobilePhoneNumber'] !== "") {
  $account->ldap_user_mobile[LANGUAGE_NONE][0]['value'] = $moreInfos['MobilePhoneNumber'];
  }

  // These fields are mandatory because we use them to generate [cn] attribute
  // token for ldap provisioning. Either LDAP module or openLDAP's inetOrgPerson
  // objectClass require cn to be set..
  if ($moreInfos['Name'] && $moreInfos['firstName'] !== ""){
    $account->ldap_user_givenname[LANGUAGE_NONE][0]['value'] = $moreInfos['firstName'];
    $account->ldap_user_sn[LANGUAGE_NONE][0]['value'] = $moreInfos['Name'];
  }
  else {
    $account->ldap_user_givenname[LANGUAGE_NONE][0]['value'] = 'Administrator';
    $account->ldap_user_sn[LANGUAGE_NONE][0]['value'] = 'Gofast';
  }


  // Password field provisioning to LDAP doesn't work during account creation.
  $edit = array('pass' => $account->pass);
  ldap_user_ldap_provision_pwd('set', $thepswd);

  $account = user_save($account, $edit);
  if ($account === FALSE) {
    watchdog('Gofast User', 'User :adm creation failed.', array(':adm' => GOFAST_USER_ADMINISTRATOR_USERNAME), WATCHDOG_ERROR);
  }
  else {
    watchdog('Gofast User', 'User :adm created successfully', array(':adm' => $account->name), WATCHDOG_INFO);
    variable_set('gofast_user_administrator_id', $account->uid);
  }

  return $account;
}

/*
 * Delete the GoFast Administrator "adm"
 */
function gofast_user_adm_delete($uid){
  user_delete($uid);
  variable_del("gofast_user_administrator_id");
  // delete the old password from ldap
  ldap_user_ldap_provision_pwd("","",TRUE); // return false
}

/**
 *
 * Preprocess variables for user-profile.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $account
 *
 * @see user-picture.tpl.php
 */
function gofast_user_preprocess_user_profile(&$variables) {

  $timer_start = microtime(true);
  watchdog('gofast_user', '%name() START ', array('%name' => __FUNCTION__), WATCHDOG_INFO);

  if ($variables['elements']['#view_mode'] !== 'full') {
    return;
  }

  global $user;

  $account = $variables['elements']['#account'];

  drupal_add_library('gofast_user', 'cropper');
  drupal_add_js(drupal_get_path('module', 'gofast_user') . '/js/gofast_profile.js', array('type' => 'file', 'weight' => 5));

  // Is the current user theme administrator ?
  $is_adm = gofast_user_is_adm($user);

  // Is the current user a space administrator.
  $is_space_adm = user_access('administer spaces');

  // Is the current user visiting his own profile (note : let su manage other
  // profiles as its own).
  $self = $user->uid == 1 || $user->uid == $account->uid;

  if (!$account->status) {
    $variables['account_blocked'] = t('Blocked', array(), array('context' => 'gofast:gofast_user'));
  }

  if(gofast_user_is_left($account)){
      $variables['account_left'] = true;
      $variables['account_blocked'] = t('Disabled', array(), array('context' => 'gofast:gofast_user'));
  }

   if(gofast_user_view_access($account) === FALSE){
       drupal_goto("/error/403");
      return;
   }

  // Load user taxonomy terms and assign it to variables ($user_[taxonomyVocabulary])
  foreach (array('hobbies', 'interests', 'skills') as $vocabulary) {
    if (empty($account->{"field_{$vocabulary}"})) {
      ${"user_" . $vocabulary} = array();
      continue;
    }
    foreach ($account->{"field_{$vocabulary}"}[LANGUAGE_NONE] as $key => $term) {
      ${$vocabulary}[] = $term['tid'];
    }
    ${$vocabulary} = taxonomy_term_load_multiple(${$vocabulary});
    foreach (${$vocabulary} as $tid => $term) {
      $term_links[] = t($term->name, array(), array('context' => 'gofast'));
    }
    $variables['taxonomy']["{$vocabulary}"] = implode(', ', $term_links);
    ${"user_" . $vocabulary} = $term_links;
    unset($term_links);
  }

  // Get all ldap-mapped fields, and merge it to $variables.
  $variables['ldap'] = gofast_ldap_user_attributes($account);
  foreach ($variables['ldap'] as $fieldname => &$info) {
    list ($field_type, $widget_type) = explode('::', $info['element']);
    switch ($widget_type) {
      case 'options_select' : $info['element'] = 'select';
        break;
      case 'textarea' : $info['element'] = 'textarea';
        break;
      case 'textfield' :
      default : $info['element'] = $field_type;
    }
  }

  // User title
  $user_title = $variables['ldap']['ldap_user_title']['value'];

  // User department/organisation/company.
  $user_dept = $variables['ldap']['ldap_user_o']['value'];

  // Set all the default values.
  $variables['user_email'] = $account->mail;

  // Override picture theme already processed in cache.
  $picture = theme('user_picture', array(
      'account' => $account,
      'style' => FALSE,
     /* 'dimensions' => array(
        'width' => '100%',
        'height' => '100%'
      ),*/
      'popup' => FALSE,
      'link' => FALSE,
      'attributes' => array('style' => 'max-width:100%; max-height:100%')
    )
  );

  if ($self || user_access('gofast administer users')) {
    // Make the picture editable.
    $href = "gofast/nojs/user/edit-avatar/{$account->uid}";
    $alt = t('Edit picture', array(), array('context' => 'gofast:gofast_user'));
    // When ajaxifying into profile page, we have to include this
    ctools_include('modal');
    ctools_include('ajax');
    $picture = ctools_modal_text_button($picture, $href, $alt, 'ctools-modal-cropping-avatar-modal-style');

  }

  $variables['profile_picture'] = $picture;

  // Role - "authenticated user" is not displayed (mandatory).
  $roles = array_filter($account->roles, function ($role) {
    return $role !== 'authenticated user' && $role !== 'manager';
  });
    foreach($roles as $key=>$roles_user){
      if ($roles_user == 'contributor'){
          ($roles[$key] = t('Standard',array(), array('context' => 'gofast:gofast_user')));
      }
  }
  // Is extranet?
  if (gofast_user_is_extranet($account)) {
    $roles['extranet'] = t('Extranet:  ') . '<b>' . t('Yes') . '</b>';
  } else {
    $roles['extranet'] = t('Extranet:  ') . '<b>' . t('No') . '</b>';
  }
  $variables['profile_roles'] = array_to_html($roles, FALSE);
  $key_contributor = array_search("contributor", $roles);
  if($key_contributor !== FALSE){
      $roles[$key_contributor] = t("Standard",array(), array('context' => 'gofast'));
  }

  // Primary Phone Number
  $variables['profile_primary_phone'] = '';
  $field_name = 'ldap_user_telephonenumber';
  if (!empty($account->ldap_user_telephonenumber)) {
    $variables['profile_primary_phone'] = $variables['ldap']['ldap_user_telephonenumber']['value'];
  }
  elseif (!empty($account->ldap_user_mobile)) {
    $field_name = 'ldap_user_mobile';
    $variables['profile_primary_phone'] = $variables['ldap']['ldap_user_mobile']['value'];
  }

  // Score
  $variables['profile_score'] = userpoints_get_current_points($account->uid) . ' ' . t('points', array(), array('context' => 'gofast'));

  // Birthdate
  $wrapper = entity_metadata_wrapper('user', $account);
  $format = $account->language === 'fr' ? 'd/m/Y' : 'm/d/Y';
  $birthdate = $wrapper->field_birthdate->value();
  $formatted_birthdate = $birthdate ? date($format, $birthdate) : '';
  $formatted_minDate = '01/01/1900';
  $formatted_maxDate = '12/31/2000';
  $date_default = t('Select date', array(), array('context' => 'gofast'));

  $variables['profile_birthdate'] = $formatted_birthdate;

  // Manager
  // Build a list of managers so we can fill the 'xeditable' select box
  $xeditable_managers = array();
  foreach (gofast_user_load_multiple_by_roles('manager') as $uid => $manager) {
    if($uid === intval($user->uid)) {
      continue;
    }
    $dn = "uid={$manager->name}," . GOFAST_LDAP_INT_REALM_USERS;
    $manager_name = !empty (gofast_user_display_name($manager)) ? gofast_user_display_name($manager)." ({$manager->name})" : $manager->name;

    // Retrieve the user picture if exists, default picture
    if (!empty($manager->picture->uri)) {
      $manager_picture = substr(parse_url(file_create_url($manager->picture->uri))['path'], 1);
    }
    else {
      $manager_picture = variable_get('user_picture_default', '');
    }
    $xeditable_managers[] = array('id' => $dn, 'text' => $manager_name, 'managername' => $manager->name, 'pictureurl' => $manager_picture);
  }

  $variables['manager_default'] = isset($account->ldap_user_manager[LANGUAGE_NONE][0]['value']) ? $account->ldap_user_manager[LANGUAGE_NONE][0]['value'] : '';

  // Provide in place editing options.
  //if ($self || $is_adm || $is_space_adm) {
  //for the moment, only admin and self can edit profil
  if ($self || $user->uid == 1) {
    // X-editable dependancies
    $loaded = libraries_load('x-editable');
    drupal_add_js(drupal_get_path('module', 'gofast') . '/js/gofast_xeditable.js', array('type' => 'file', 'weight' => 5));
    $loaded_select2 = libraries_load('select2');
  }

  if($self){
    // Make a modal profile edition link
    $dest = "modal/nojs/user/{$account->uid}/edit/uprofile";
    $alt = t('Profile settings', array(), array('context' => 'gofast'));
    $variables['profile_uprofile_settings'] = ctools_modal_text_button($alt, $dest, $alt, 'blue-hover uprofile-settings');

    // X-EDITABLE
    $field_taxonomy = array(
      'pk' => $account->uid,
      'type' => 'select2',
      'showbuttons' => 'bottom',
      'select2' => array(
        'multiple' => true,
        'allowClear' => true,
      ),
      'placement' => 'right',
      'mode' => 'popup',
      'inputclass' => 'input-extra-large',
    );

    $field_skills = array(
      'name' => 'field_skills',
      'value' => $user_skills,
      'title' => t('Skills', array(), array('context' => 'gofast:gofast_user')),
      'params' => ['vid' => GOFAST_VID_SKILLS],
      'select2' => array(
        'tags' => gofast_xeditable_vocabulary_to_select_items(GOFAST_VID_SKILLS),
        'placeholder' => t('Type any skill', array(), array('context' => 'gofast:gofast_user')),
      ),
    );
    $field_skills = array_replace_recursive($field_taxonomy, $field_skills);
    $variables['taxonomy']['skills'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_skills, t("Select your skills", array(), array('context' => 'gofast'))));

    $field_interests = array(
      'name' => 'field_interests',
      'value' => $user_interests,
      'title' => t('Interests', array(), array('context' => 'gofast:gofast_user')),
      'params' => ['vid' => GOFAST_VID_INTERESTS],
      'select2' => array(
        'tags' => gofast_xeditable_vocabulary_to_select_items(GOFAST_VID_INTERESTS),
        'placeholder' => t('Type any interest', array(), array('context' => 'gofast:gofast_user')),
      ),
    );
    $field_interests = array_replace_recursive($field_taxonomy, $field_interests);
    $variables['taxonomy']['interests'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_interests, t("Select your interests", array(), array('context' => 'gofast'))));

    $field_passions = array(
      'name' => 'field_hobbies',
      'value' => $user_hobbies,
      'title' => t('Hobbies', array(), array('context' => 'gofast:gofast_user')),
      'params' => ['vid' => GOFAST_VID_HOBBIES],
      'select2' => array(
        'multiple' => false,
        'tags' => gofast_xeditable_vocabulary_to_select_items(GOFAST_VID_HOBBIES),
        'placeholder' => t('Type any hobby', array(), array('context' => 'gofast:gofast_user')),
      ),
    );
    $field_passions = array_replace_recursive($field_taxonomy, $field_passions);
    $variables['taxonomy']['passions'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_passions, t("Select your passions", array(), array('context' => 'gofast'))));
  }

  //if ($self || $is_adm || $is_space_adm) {
  //for the moment, only admin and self can edit profil
  if ($self || $user->uid == 1 || user_access('gofast administer users') ) {
    // Advanced settings link
    $text = '';
    if( ! gofast_mobile_is_mobile_domain()){
      $text = t('Account settings', array(), array('context' => 'gofast:gofast_user'));
    }

    $dest = "/modal/nojs/user/{$account->uid}/edit";
    ctools_include('modal');
    ctools_include('ajax');
    $variables['profile_account_settings'] = theme('account_settings', array('href'=> $dest , 'class' => 'btn btn-default ctools-use-modal' , 'text' => $text ));
  }

   if ($self || $user->uid == 1){
    // Email field
    $email_field = array(
      'pk' => $account->uid,
      'name' => 'mail',
      'value' => $variables['elements']['#account']->mail,
      'emptytext' => t('Enter your email', array(), array('context' => 'gofast')),
      'wrapper_class' => array()
    );
    $variables['elements']['#account']->mail = theme('x-editable_field', gofast_xeditable_enrich_values($email_field));

    // Given name field
    $user_givenname_field = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_givenname',
      'value' => $variables['ldap']['ldap_user_givenname']['value'],
      'emptytext' => t('Enter your first name', array(), array('context' => 'gofast')),
      'wrapper_class' => array()
    );
    $variables['ldap']['ldap_user_givenname']['value'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_givenname_field));

    // Second name field
    $user_sn_field = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_sn',
      'value' => $variables['ldap']['ldap_user_sn']['value'],
      'emptytext' => t('Enter your last name', array(), array('context' => 'gofast')),
      'wrapper_class' => array()
    );
    $variables['ldap']['ldap_user_sn']['value'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_sn_field));

    // Title field
    $user_title_field = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_title',
      'value' => $user_title,
      'emptytext' => t('Enter title', array(), array('context' => 'gofast:gofast_user')),
      'placement' => 'right',
      'wrapper_class' => array()
    );
    $variables['ldap']['ldap_user_title']['value'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_title_field));

    // Department field
    $user_dept_field = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_o',
      'value' => $user_dept,
      'emptytext' => t('Enter department', array(), array('context' => 'gofast:gofast_user')),
      'placement' => 'right',
      'wrapper_class' => array()
    );
    $variables['ldap']['ldap_user_o']['value'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_dept_field));

    // Phone field
    $user_phone_field = array(
      'pk' => $account->uid,
      'name' => $field_name,
      'value' => $variables['profile_primary_phone'],
      'emptytext' => t('Enter phone number', array(), array('context' => 'gofast')),
      'wrapper_class' => array()
    );
    $variables['profile_primary_phone'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_phone_field));
  }

  // Email field : De-activated x-editable for now because Drupal asks for user password when validating the form (on field submit).
  /* $user_email_field = array(
    'pk' => $account->uid,
    'name' => 'mail',
    'value' => $variables['user_email'],
    'emptytext' => 'Enter email',
    );
    $variables['user_email'] = theme('x-editable_field', gofast_xeditable_enrich_values($user_email_field)); */

  $organisations = $groups = $public = $extranet = $user_all_groups = $visitor_all_groups = array();

/*
  $groups_user_gids = gofast_og_get_spaces_by_user($account);

  $groups_user = node_load_multiple($groups_user_gids);
  $nodes_groups_path = gofast_cmis_space_get_drupal_path_multiple_nodes($groups_user_gids);

  foreach($groups_user as $group){
    if(node_access('view', $group)){
      switch ($group->type) {
        case 'private_space':
          break;
        case 'organisation':
          $organisations['path'][$group->nid] = $nodes_groups_path[$group->nid];
          break;
        case 'group':
          $groups['path'][$group->nid] = $nodes_groups_path[$group->nid];
          break;
        case 'public':
          $public['path'][$group->nid] = $nodes_groups_path[$group->nid];
          break;
        case 'extranet':
          $extranet['path'][$group->nid]= $nodes_groups_path[$group->nid];
        default:
          break;
      }
    }
  }
  asort($groups['path']);
  asort($public['path']);
  asort($organisations['path']);
  asort($extranet['path']);

  // Requested groups
  $requested_groups_ids = gofast_og_get_user_pending_spaces($account);
  $requested_groups = array();

  if(count($requested_groups_ids) > 0 ){
    $query_og_info = db_select('node', 'n');
    $query_og_info->fields('n', array('nid', 'title', 'type'));
    $query_og_info->condition('n.nid', array_values($requested_groups_ids), 'IN');

    $results = $query_og_info->execute();

    if ($results->rowCount() > 0) {
      while($og = $results->fetchObject()){
        $gid = $og->nid;
        $og_link = l($og->title . ' (' . t("Pending", array(), array('context' => 'gofast')) . ')', "node/{$gid}", array('attributes' => array('class' => 'ajax-navigate', 'nid' => $gid, 'title' => $og->title)));
        $requested_groups[] = $og_link;
      }
    }
  }

  ## get userlists

  $userlists = array();
  $userlists_ids = gofast_userlist_get_userlists_by_user($account);
  if (!empty($userlists_ids)) {
    foreach ($userlists_ids as $key => $ulid) {
      $entity_userlist = entity_load_single('userlist', $key);
      $nid = $entity_userlist->nid;
      $node = node_load($nid);
      $title = $node->title;
      if (!empty($title)) {
        $userlists[$key] = $title;
      }
    }
    asort($userlists);
  }
 */

  $variables['userlists'] = $userlists;
  $variables['organisations'] = $organisations;
  $variables['groups'] = $groups;
  $variables['public'] = $public;
  $variables['extranet'] = $extranet;
  $variables['requested_groups'] = implode(' ', $requested_groups);

  $options = array(
    'popup_variables' => array(
      'container_id' => 'popup_block_' . $user->uid,
      'container_class' => NULL,
      'title' => t('Select groups to join', array(), array('context' => 'gofast:gofast_user')),
      'link_text' => $variables['og_button_join'],
      'link_class' => 'editable-click btn btn-info',
      'type' => 'button',
      'placement' => "right",
      'js_callback' => "callback_update_user_group_list",
      'context' => 'user',
      'content' => htmlentities($og_block_output),
    )
  );

  //$variables['og_button_join'] = theme('popup_content', $options);
  $variables['og_button_join'] = "";

  if ($self) {
    // X-EDITABLE
    $field_birthdate = array(
      'pk' => $account->uid,
      'name' => 'field_birthdate',
      'value' => $formatted_birthdate,
      'type' => 'datetime',
      'datetimepicker' => array(
        'startDate' => $formatted_minDate,
        'endDate' => $formatted_maxDate,
        'language' =>  $account->language !== 'fr' ? 'en' : 'fr', //
        'minView' => 2,
        'bootcssVer' => 3,
      ),
      'title' => t('Birthday', array(), array('context' => 'gofast:gofast_user')),
      'format' => dateformat_PHP_to_bootstrapDatePicker($format),
      'emptytext' => $date_default,
      'placement' => 'right',
      'showbuttons' => 'bottom',
      'mode' => 'popup',
      'wrapper_class' => array()
    );
    $variables['profile_birthdate'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_birthdate));

    // X-EDITABLE
    $field_managers = array(
      'pk' => $account->uid,
      'name' => 'ldap_user_manager',
      'escape' => false,
      'value' => $variables['manager_default'],
      'source' => !empty($xeditable_managers) ? $xeditable_managers : null,
      'title' => t('Manager', array(), array('context' => 'gofast:gofast_user')),
      'type' => 'select2',
      'emptytext' => t('Select a manager', array(), array('context' => 'gofast')),
      'placement' => 'right',
      'showbuttons' => 'bottom',
      'mode' => 'popup',
      'inputclass' => 'input-large',
      'wrapper_class' => array(
        'select2-template-image',
      ),
    );
    $variables['manager_default'] = theme('x-editable_field', gofast_xeditable_enrich_values($field_managers));
  }

  $path = drupal_get_path('module', 'gofast_user');
  $variables['account'] = $account;
  $variables['self'] = $self;
  $variables['is_adm'] = $is_adm;
  $variables['is_manager'] = $is_space_adm; // rename template variable.
  $variables['javascript'] = isset($js) ? $js : NULL;
  $variables['stylesheet_src'] = "/{$path}/css/profile.css";

  drupal_add_css(drupal_get_path('module', 'gofast_user') . "/css/profile.css");

  // Contextual actions

  $account_request_actions = array();
  foreach (gofast_user_get_request_actions($account) as $action) {
    $account_request_actions[]['themed'] = $action;
  }

  $user_contextual_actions = array();

  if (!empty($account_request_actions)) {
    $user_contextual_actions[] = array(
      'id' => 'account-dropdown',
      'title' => 'Contextual actions',
      'button-text' => '',
      'icon-class' => 'fa fa-bars',
      'children' => $account_request_actions
    );
  }

  $variables['contextual_actions'] = theme('contextual_links', array('buttons' => $user_contextual_actions));

  $timer_stop = microtime(true);
  watchdog('gofast_user', '%name() END - [execution time = %time s]',array('%name' => __FUNCTION__,  '%time' => ($timer_stop - $timer_start) ), WATCHDOG_INFO);

}

function gofast_user_get_request_actions($account) {
  $actions = array();
  global $user;
  $user_between_account_relationships = user_relationships_load(array('between' => array($user->uid, array($account->uid))));

  if($account->uid !== $user->uid) {
    //Check if we are administrator
    if ($user->roles['3'] === 'administrator'){
        if (gofast_user_is_left($account)){ //The user has left the org
            $actions[] = theme('gofast_unleave_user', array('uid' => $account->uid));
        }else if ($account->status == 0){ //The isuer is blocked due to a technical action
            $actions[] = theme('gofast_unblock_user', array('uid' => $account->uid));
        }else{ // The isuer isn't blocked
            $actions[] = theme('gofast_leave_user', array('uid' => $account->uid));
        }

      // DELETE User system link -- if logged user is an admin and the user that we will delete never connecte
      if ($account->access == 0) { // the user never connect
        $actions[] = theme('gofast_link_delete_user', array('uid' => $account->uid));
      }
    }
    if (empty($user_between_account_relationships)) {
      $actions[] = theme('gofast_link_add_relationship', array('uid' => $account->uid));
    }
    else {
      if (reset($user_between_account_relationships)->requestee_id === $user->uid) {
        if (reset($user_between_account_relationships)->approved == 1) {
          $actions[] = theme('gofast_user_relationships_remove_link', array('uid' => reset($user_between_account_relationships)->requester_id, 'rid' => reset($user_between_account_relationships)->rid));
        }
        else {
          $actions[] = theme('gofast_user_relationships_pending_request_approve_link', array('uid' => reset($user_between_account_relationships)->requestee_id, 'rid' => reset($user_between_account_relationships)->rid));
          $actions[] = theme('gofast_user_relationships_pending_request_disapprove_link', array('uid' => reset($user_between_account_relationships)->requestee_id, 'rid' => reset($user_between_account_relationships)->rid));
        }
      }
      else if (reset($user_between_account_relationships)->requester_id === $user->uid) {
        if (reset($user_between_account_relationships)->approved == 1) {
          $actions[] = theme('gofast_user_relationships_remove_link', array('uid' => reset($user_between_account_relationships)->requester_id, 'rid' => reset($user_between_account_relationships)->rid));
        }
        else {
          $actions[] = theme('gofast_user_relationships_pending_request_cancel_link', array('uid' => reset($user_between_account_relationships)->requester_id, 'rid' => reset($user_between_account_relationships)->rid));
        }
      }
    }
    if(module_exists('gofast_subscription_ui')){ //Subscription system link for users
       $actions[] = flag_create_link('subscribe_user', $account->uid);
    }
  }
  return $actions;
}

/**
 * Implements hook_block_info()
 */
function gofast_user_block_info() {
  // Common (per page) visiblity restriction for users' blocks.
  $pages = 'user
user/*
users/*';

  // Relies on ldap_user_description field.
  $blocks['about_me'] = array(
    'info' => t('About me', array(), array('context' => 'gofast:gofast_user')),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => -47,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => $pages
  );

  // Users having the "manager" role are provided with a themed list of users
  // (those who have set their manager's field in the profile form), so called
  // "team".
  $blocks['my_team'] = array(
    'info' => t('My team', array(), array('context' => 'gofast:gofast_user')),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => -45,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => $pages // visibility should be restricted by role "manager". @see admin interface or block_role table
  );

  // A block that diplays user's approved relationships.
  $blocks['my_relationships'] = array(
    'info' => t('My relationships', array(), array('context' => 'gofast:gofast_user')),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'weight' => -44,
    'status' => 1,
    'region' => 'sidebar_second',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => $pages
  );

  $blocks['gofast_user_directory_filters'] = array(
      'info' => t('User Directory filters', array(), array('context' => 'gofast:gofast_views')),
      'cache' => DRUPAL_CACHE_PER_USER,
      'weight' => -36,
      'status' => 1,
      'region' => 'sidebar_second',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'user_listing_tab',
  );

  $blocks['gofast_user_inactive_filters'] = array(
      'info' => t('User inactive filters', array(), array('context' => 'gofast:gofast_views')),
      'cache' => DRUPAL_CACHE_PER_USER,
      'weight' => -37,
      'status' => 1,
      'region' => 'sidebar_second',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'inactive_users',
  );

  $blocks['gofast_user_active_filters'] = array(
      'info' => t('User contributor filters', array(), array('context' => 'gofast:gofast_views')),
      'cache' => DRUPAL_CACHE_PER_USER,
      'weight' => -37,
      'status' => 1,
      'region' => 'sidebar_second',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'user_listing_grid_contrib',
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function gofast_user_block_view($delta = '', $uid = NULL) {
  global $user;
  $block = array();
  if( user_is_logged_in()){
  // Get the appropriate user id.
  if(is_numeric(arg(1)) && arg(2) == FALSE){
    $uid = arg(1);
  }else if ($uid === NULL) {
    $uid = $user->uid;
  }
  // Load visited profile data, abort on failure.
  if (!$account = user_load($uid))
    return FALSE;

  $check_access_account = gofast_user_view_access($account);
  $self = $account->uid == $user->uid;

  switch ($delta) {

    case 'about_me' :
      if ($self) {
        $subject = t('About me', array(), array('context' => 'gofast:gofast_user'));
      }
      else {

        if( $check_access_account ){
            $str = t('About @name', array('@name' => $name = gofast_user_display_name($account)), array('context' => 'gofast:gofast_user'));
            $subject = _t_($str, $name, $account->language);
        }
      }

      // Make the block editable fo users with enough privileges.
      $editable = $self || $user->uid == GOFAST_USER_ADMINISTRATOR_ID || $user->uid == 1;
      $about_me = count($account->ldap_user_description) > 0 ? $account->ldap_user_description[LANGUAGE_NONE][0]['value'] : null;

      if ($editable) {
        // X-EDITABLE
        $field_user_description = array(
          'pk' => $user->uid,
          'name' => 'ldap_user_description',
          'value' => $about_me,
          'title' => t('About me', array(), array('context' => 'gofast:gofast_user')),
          'type' => 'textarea',
          'emptytext' => t('Enter description', array(), array('context' => 'gofast:gofast_user')),
          'placement' => 'bottom',
          'showbuttons' => 'bottom',
          'mode' => 'popup',
          'wrapper_class' => array(
            'profile-about-me',
          ),
          'container' => '.region-sidebar-second'
        );
        $content = theme('x-editable_field', gofast_xeditable_enrich_values($field_user_description));
      }
      else {

        if( $check_access_account ){
            $user_description = $about_me !== null ? $about_me : t('Empty', array(), array('context' => 'gofast'));
            $content = "<i style='color:#999;'>{$user_description}</i>";
        }
      }

      break;

    case 'my_team' :
      $team = gofast_user_team_member($account);
      $subject = $team['subject'];
      $content = $team['content'];
      break;

    case 'my_relationships' :
      if ($self) {
        $subject = t('My relationships', array(), array('context' => 'gofast:gofast_user'));
      }
      else {
          if( $check_access_account ){
            $str = t('@name\'s relationships', array('@name' => $name = gofast_user_display_name($account)), array('context' => 'gofast:gofast_user'));
            $subject = _t_($str, $name, $account->language);
          }
      }
      $content = '';
      $user_relationships = gofast_user_load_relationships($account->uid, TRUE);
      $user_pending_relationships = gofast_user_load_relationships($account->uid, TRUE, FALSE);
      if(empty($user_relationships)) {
        if ($self) {
          $content .= t('You have no relationships', array(), array('context' => 'gofast:gofast_user'));
        } else {
          if( $check_access_account ){
            $content .= t('@name have no relationships', array('@name' => gofast_user_display_name($account)), array('context' => 'gofast:gofast_user'));
          }
        }
      } else {

          if( $check_access_account ){
              $uids = array_keys($user_relationships);
              foreach (user_load_multiple($uids) as $rel_uid => $rel_account) {
                $content .= theme('user_picture', array('account' => $rel_account));
              }
          }
      }

      if($self && !empty($user_pending_relationships)){
        $content .= '<p style="font-weight:700;font-size: 12px; margin-top:20px;">'. t('Awaiting relationships', array(), array('context' => 'gofast:gofast_user')) .'</p>';
        $pending_uids = array_keys($user_pending_relationships);
        foreach (user_load_multiple($pending_uids) as $rel_uid => $rel_account) {
          $request_user_uid = $user_pending_relationships[$rel_account->uid][0]->rid;
          $content .= theme('user_picture', array('account' => $rel_account, 'popup' => FALSE, 'dimensions' => array('width' => '25px', 'height' => '25px')));
          $content .= '<a class="btn btn-xs btn-success ctools-use-modal ctools-modal-center" id="manage_request" href="/modal/nojs/user/'.$user->uid.'/relationships/requested/'. $request_user_uid .'/approve" alt="' . t('Approve', array(), array('context' => 'gofast')) . '"><span class="glyphicon glyphicon-ok" ></span> ' . t('Accept', array(), array('context' => 'gofast')) . '</a>';
          $content .= '<a class="btn btn-xs btn-danger ctools-use-modal ctools-modal-center" id="manage_request" href="/modal/nojs/user/'.$user->uid.'/relationships/requested/'. $request_user_uid .'/disapprove" alt="' . t('Disapprove', array(), array('context' => 'gofast')) . '" style="margin-left:3px;"><span class="glyphicon glyphicon-remove" ></span> ' . t('Decline', array(), array('context' => 'gofast')) . '</a>';
        }
      }

    case 'gofast_user_directory_filters':
      if(current_path() == "user_listing_tab"){
        $path = drupal_get_path('module', 'gofast_views');
        libraries_load('bootstrap-datetimepicker');
        libraries_load('bootstrap-datepicker');
        drupal_add_js($path . '/js/gofast_users_filters.js', 'file');
        drupal_add_css(' .gofast_names_filter, .gofast_orga_filter, gofast_public_filter, gofast_extranet_filter, .gofast_groupes_filter, .gofast_skills_filter { color:#636363; } .panel-group{margin-bottom:5px;} .panel-title>a.selected{font-weight:bold; color:#428bca;} .selected{font-weight:bold; color:#428bca;}', array('group' => CSS_THEME, 'type' => 'inline', 'weight' => 999));
      $subject = t('User directory filters', array(), array('context' => 'gofast'));
      $content_lastname = '<label for="lastname">'. t('Last  name') .'</label><input class="form-control form-text" type="text" id="edit-ldap-user-sn-value-sidebar" size="30" maxlength="128">';
      $content_firstname = '<label for="firstname">' . t('First name') . '</label><input class="form-control form-text" type="text" id="edit-ldap-user-givenname-value-sidebar" size="30" maxlength="128">';
      $content_lastlogin = '<label for="lastlogin">' . t('Last login between:') . '</label>
                              <div class="input-daterange input-group" id="user-last-login-date-filter">
                                <input id="edit-login-sidebar" type="text" class="input-sm form-control" name="start" />
                                <span class="input-group-addon">'. t('and') .' </span>
                                <input id="edit-login-end-sidebar" type="text" class="input-sm form-control" name="end" />
                              </div>
                              ';
      $content_created = '<label for="created">' . t('Created between:') . '</label>
                            <div class="input-daterange input-group" id="user-created-date-filter">
                              <input id="edit-created-sidebar" type="text" class="input-sm form-control" name="start" />
                              <span class="input-group-addon">'. t('and') .' </span>
                              <input id="edit-created-end-sidebar" type="text" class="input-sm form-control" name="end" />
                            </div>
                            ';
      $content_blocked = '<label for="created">' . t('Active') . '</label><select class="form-control form-select" id="edit-status-sidebar"><option value="All">' . t("-- Any --") . '</option><option value="1" selected="selected">' . t("Yes") . '</option><option value="0">' . t("No") . '</option></select>';
      $content_apply = '<button id="edit-submit-user-filters-sidebar" class="btn btn-sm btn-info form-submit">' . t('Apply') . '</button>';
        $content_reset = '<button id="edit-reset-user-filters-sidebar"  class="btn btn-sm btn-default form-submit">' . t('Reset') . '</button>';
        $content = $content_lastname . $content_firstname . $content_lastlogin . $content_created . $content_blocked . $content_apply . $content_reset;
        break;
      }
    case 'gofast_user_inactive_filters':
      if(current_path() == "inactive_users"){
        $path = drupal_get_path('module', 'gofast_views');
        drupal_add_js($path . '/js/gofast_users_filters.js', 'file');
        drupal_add_css(' .gofast_names_filter, .gofast_orga_filter, gofast_public_filter, gofast_extranet_filter, .gofast_groupes_filter, .gofast_skills_filter { color:#636363; } .panel-group{margin-bottom:5px;} .panel-title>a.selected{font-weight:bold; color:#428bca;} .selected{font-weight:bold; color:#428bca;}', array('group' => CSS_THEME, 'type' => 'inline', 'weight' => 999));
      $subject = t('User inactive filters', array(), array('context' => 'gofast'));
      $content_lastname = '<label for="lastname">'. t('Last  name') .'</label><input class="form-control form-text" type="text" id="edit-ldap-user-sn-value-sidebar" size="30" maxlength="128">';
      $content_firstname = '<label for="firstname">' . t('First name') . '</label><input class="form-control form-text" type="text" id="edit-ldap-user-givenname-value-sidebar" size="30" maxlength="128">';
      $content_lastlogin = '<label for="lastlogin">' . t('Last login') . '</label><input class="form-control form-text" type="text" id="edit-login-sidebar" size="30" maxlength="128">';
      $content_created = '<label for="created">' . t('Created') . '</label><input class="form-control form-text" type="text" id="edit-created-sidebar" size="30" maxlength="128">';
      $content_apply = '<button id="edit-submit-user-inactive-filters-sidebar" class="btn btn-sm btn-info form-submit">' . t('Apply') . '</button>';
        $content_reset = '<button id="edit-reset-user-inactive-filters-sidebar"  class="btn btn-sm btn-default form-submit">' . t('Reset') . '</button>';
        $content = $content_lastname . $content_firstname . $content_lastlogin . $content_created . $content_blocked . $content_apply . $content_reset;
        break;
      }
    case 'gofast_user_active_filters':
      if(current_path() == "user_listing_grid_contrib"){
        $path = drupal_get_path('module', 'gofast_views');
        drupal_add_js($path . '/js/gofast_users_filters.js', 'file');
        drupal_add_css(' .gofast_names_filter, .gofast_orga_filter, gofast_public_filter, gofast_extranet_filter, .gofast_groupes_filter, .gofast_skills_filter { color:#636363; } .panel-group{margin-bottom:5px;} .panel-title>a.selected{font-weight:bold; color:#428bca;} .selected{font-weight:bold; color:#428bca;}', array('group' => CSS_THEME, 'type' => 'inline', 'weight' => 999));
      $subject = t('User controntributor filters', array(), array('context' => 'gofast'));
      $content_lastname = '<label for="lastname">'. t('Last  name') .'</label><input class="form-control form-text" type="text" id="edit-ldap-user-sn-value-sidebar" size="30" maxlength="128">';
      $content_firstname = '<label for="firstname">' . t('First name') . '</label><input class="form-control form-text" type="text" id="edit-ldap-user-givenname-value-sidebar" size="30" maxlength="128">';
      $content_lastlogin = '<label for="lastlogin">' . t('Last login') . '</label><input class="form-control form-text" type="text" id="edit-login-sidebar" size="30" maxlength="128">';
      $content_created = '<label for="created">' . t('Created') . '</label><input class="form-control form-text" type="text" id="edit-created-sidebar" size="30" maxlength="128">';
      $content_apply = '<button id="edit-submit-user-active-filters-sidebar" class="btn btn-sm btn-info form-submit">' . t('Apply') . '</button>';
      $content_reset = '<button id="edit-reset-user-active-filters-sidebar"  class="btn btn-sm btn-default form-submit">' . t('Reset') . '</button>';
        $content = $content_lastname . $content_firstname . $content_lastlogin . $content_created . $content_blocked . $content_apply . $content_reset;
        break;
      }
  }


  $block['subject'] = $subject;
  $block['content'] = $content;

  }

  return $block;
}

/**
 * Given a manager $account, returns its team members.
 */
function gofast_user_team_member($account = NULL) {

  if (empty($account) || !isset($account->uid))
    return FALSE;

  global $user;
  $block = array();

  if ($account->uid != $user->uid) {
    $str = t("@name's Team", array('@name' => $name = gofast_user_display_name($account)), array('context' => 'gofast:gofast_user'));
    $block['subject'] = _t_($str, $name, $account->language);
  }
  else {
    $block['subject'] = t('My team', array(), array('context' => 'gofast:gofast_user'));
  }

  // Retrieve teams/managers relationships.
  $teams = gofast_get_field_values('ldap_user_manager', 'user');
  // Filter by manager ($account).
  $team_members = array_keys(array_filter($teams, function ($manager) use ($account) {
                    return $manager === "uid={$account->name}," . GOFAST_LDAP_INT_REALM_USERS;
                  }));
  // Load all accounts at once so we can theme output.
  $team_members = user_load_multiple($team_members);

  $block['content'] = '';
  $a = '';
  foreach ($team_members as $uid => $member) {
    $block['content'] .= $a = theme('user_picture', array('account' => $member));
  }

  return $block;
}

/**
 * Helper function that loads approved relationships of a given user.
 *
 * @param $uid
 *  A valid user id.
 * @param $keyed
 *  A boolean stating whether or not to key the array by user id instead of
 *  rid. Default to TRUE.
 * @param $approved
 *  The current status of the relationship we want to get. Default to TRUE
 * @return
 *  Array of user_relationships objects keyed by relationship id or user id,
 *  depending on $keyed parameter.
 */
function gofast_user_load_relationships($uid = NULL, $keyed = TRUE, $approved = TRUE) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  if($approved) {
    $params = array('user' => $uid, 'rtid' => GOFAST_USER_RTID, 'approved' => $approved);
    $options = $keyed === TRUE ? array('sort' => 'requestee_id') : array();
  } else {
    $params = array('requestee_id' => $uid, 'approved' => $approved);
    $options = $keyed === TRUE ? array('sort' => 'requester_id') : array();
  }
  return user_relationships_load($params, $options);
}

/**
 * Alter the theme registry information returned from hook_theme().
 * @param type $theme_registry
 */
function gofast_user_theme_registry_alter(&$theme_registry) {
  // Alter user-picture theme.
  $theme_registry['user_picture']['variables'] = array(
    'account' => NULL,
    'style' => 'gofast_thumbnail',
    'dimensions' => NULL,
    'popup' => TRUE,
    'link' => TRUE
  );

  // Replace preprocess function (avoid double processing per theme call).
  foreach ($theme_registry['user_picture']['preprocess functions'] as $key => &$preprocess) {
    if ($preprocess != 'template_preprocess_user_picture')
      continue;

    // We must avoid theme's HOOK string in the function naming (or this
    // function will be called twice).
    $preprocess = 'gofast_user_preprocess_picture';
    break;
  }

  // Alter "username" theme, merge in user_picture variables and add options.
  $theme_registry['username']['variables'] += $theme_registry['user_picture']['variables'] + array(
    'picture' => TRUE,
    'override_name' => TRUE,
    'menu' => FALSE
  );

  // Alter "image_style" theme so that we can override base style dimensions.
  $theme_registry['image_style']['variables']['override_base_dim'] = NULL;

  // Set dimensions defaults to prevent user_picture defaults fallback as it
  // intends to display bigger pics.
  $theme_registry['username']['variables']['dimensions'] = 24; // same as current node icons dim

  //Change theme accept relationship
  $theme_registry['user_relationships_pending_request_approve_link'] = array(
  'template' => 'sites/all/modules/gofast/gofast_views/theme/gofast-user-relationships-pending-request-approve-link',
      'arguments' => array(
        'uid' => NULL,
        'rid' => NULL,
      ),
       'type' => 'module',
       'theme path' => 'sites/all/modules/gofast/gofast_views',
       'preprocess functions' => array(
          '0' => 'template_preprocess',
          '1' => 'template_preprocess_gofast_user_relationships_pending_request_approve_link',
          '2' => 'contextual_preprocess'
       ),
       'process functions' => array(
          '0' => 'template_process',
          '1' => 'ctools_process',
          '2' => 'rdf_process',
       )

  );
  //Change theme decline relationship
  $theme_registry['user_relationships_pending_request_disapprove_link'] = array(
  'template' => 'sites/all/modules/gofast/gofast_views/theme/gofast-user-relationships-pending-request-disapprove-link',
      'arguments' => array(
        'uid' => NULL,
        'rid' => NULL,
      ),
       'type' => 'module',
       'theme path' => 'sites/all/modules/gofast/gofast_views',
       'preprocess functions' => array(
          '0' => 'template_preprocess',
          '1' => 'template_preprocess_gofast_user_relationships_pending_request_disapprove_link',
          '2' => 'contextual_preprocess'
       ),
       'process functions' => array(
          '0' => 'template_process',
          '1' => 'ctools_process',
          '2' => 'rdf_process',
       )

  );

//  print '<pre>'; print_r($theme_registry); exit;
}

/**
 * Preprocesses variables for theme_username().
 *
 * Integrates themed user picture and replaces user name with display name when
 * possible and if the options are set.
 *
 * @see template_preprocess_username()
 * @see template_process_username()
 */
function gofast_user_preprocess_username(&$variables) {
  $account = user_load($variables['account']->uid);

  if ($variables['picture'] === TRUE) {
    $variables['picture'] = theme('user_picture', array('link' => FALSE, 'wrapper' => 'username') + $variables);
  }

  // Protect $account information if user has no view access to this profile.
  // $variables['profile_access'] flags whether user has 'access user profiles'
  // permission, but it's not sufficient if user partitioning is enabled.
  if (!user_view_access($account)) {
    $variables['name'] = 'xxxxx';
    $variables['attributes_array'] = array(
      'title' => t("You don't have permission to view this profile.", array(), array('context' => 'gofast:gofast_user')),
      'data-toggle' => 'tooltip',
      'data-placement' => 'auto left'
    ) + $variables['attributes_array'];
    unset ($variables['link_path']);
    return;
  }

  if (!$variables['link']) {
    unset ($variables['link_path']);
  }

  if ($variables['override_name'] === TRUE) {
    $variables['name'] = '<span class="display_name">' . gofast_user_display_name($account). '</span>';
  }
  elseif (is_string($variables['override_name'])) {
    $variables['name'] = '<span class="display_name">' . $variables['override_name'] . '</span>';
  }

  if ($variables['menu']) {
    $variables['name'] .= '<span class="caret"></span>';
  }
}

/**
 * Process variables for user-picture.tpl.php.
 *
 * @override template_preprocess_user_picture()
 * @param $variables
 *  The $variables array contains the following arguments :
 *  - account : A user object with 'name', 'uid' and 'picture' fields.
 *  - style : Use it to everride default "Image Style" name (need image.module).
 *  - dimensions : (numeric/array) picture dimension in pixels (default to null).
 *    If set, "Image Style" effect won't be applied.
 *  - popup : (boolean) whether or not to popup profile data on mouse event.
 *
 * @see user.modiule
 * @see user-picture.tpl.php
 */
function gofast_user_preprocess_picture(&$variables) {
  $variables['user_picture'] = '';
  if (!variable_get('user_pictures', 0)) {
    return;
  }
  $account = user_load($variables['account']->uid);
  $wrapped = isset($variables['wrapper']) && $variables['wrapper'];
  // Check acces and show anon picture if user is denied access to this profile.
  $access = user_view_access($account);
  if ($access && !empty($account->picture)) {
    // @TODO: Ideally this function would only be passed file objects, but
    // since there's a lot of legacy code that JOINs the {users} table to a
    // {node} or {comments} and passes the results into this function, if we
    // get numeric value in the picture field we'll assume it's a file id
    // and load it for them. Once we've got user_load_multiple() and
    // comment_load_multiple() functions the user module will be able to load
    // the picture files in mass during the object's load process.
    if (is_numeric($account->picture)) {
      $account->picture = file_load($account->picture);
    }
    if (!empty($account->picture->uri)) {
      $filepath = $account->picture->uri;
    }
  }
  elseif (variable_get('user_picture_default', '')) {
    $filepath = variable_get('user_picture_default', '');
  }
  if (isset($filepath)) {
    // Set image dimensions.
    $dim = $variables['dimensions'];
    $dimensions = array();
    if (!empty($dim)) {
      if (is_numeric($dim)) {
        $dimensions = array('width' => $dim, 'height' => $dim);
      }
      elseif (isset($dim['width']) && isset($dim['height'])) {
        $dimensions = $dim;
      }
    }
    // Set alternative text and title.
    $alt = t("@user's picture", array('@user' => format_username($account)), array('context' => 'gofast:gofast_user'));
    $title = $wrapped ? '' : ($access ? $alt : t("You don't have permission to view this profile.", array(), array('context' => 'gofast:gofast_user')));
    // Use Bootstrap tooltip by default.

    if(isset($variables['attributes'])){
      $attributes = array_merge($variables['attributes'],array('data-toggle' => 'tooltip', 'data-placement' => 'auto left'));
    }else{
      $attributes = array('data-toggle' => 'tooltip', 'data-placement' => 'auto left');
    }

    // If the image does not have a valid Drupal scheme (for eg. HTTP), or if
    // style is not set, don't load image styles.
    $style = $variables['style'];
    if (module_exists('image') && file_valid_uri($filepath) && $style) {
      if (!empty($dimensions)) {
        // Tell image_style dimensions are set to actually override the base
        // style dimensions. This allows to request a Gofast thumbnail (40*40)
        // for example, but with overriden dimensions (it's up to you to
        // request only smaller dims to prevent pixelated images).
        $dimensions += array('override_base_dim' => TRUE);
      }
      $variables['user_picture'] = theme('image_style', $dimensions + array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $title, 'attributes' => $attributes));
    }
    else {
      $variables['user_picture'] = theme('image', $dimensions + array('path' => $filepath, 'alt' => $alt, 'title' => $title, 'attributes' => $attributes));
    }

    if ($variables['link'] && !empty($account->uid) && $access) {
      $variables['user_picture'] = l($variables['user_picture'], "user/{$account->uid}", array('html' => TRUE, 'attributes' => $attributes));
    }
  }
  // Javascript mouse events (popup small profile on mouse events).
  if ($access && $variables['popup'] === TRUE) {
    $variables['classes_array'][] = 'profile-to-popup';
  }
}

/**
 * Ajax callback. Return user's mini profile delivery.
 */
function gofast_user_profile_popup($uid = 0) {
  $output = '';

  if (!user_view_access($uid)) {
    return $output;
  }

  $name = 'gofast_user_directory';
  $display_id = 'gofast_single_profile';

  $view = views_get_view($name);
  if ($view && $view->access($display_id)) {
    $output = trim($view->preview($display_id, array($uid)));
  }

  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter()
 *  Alter views' exposed filters' forms.
 */
function gofast_user_form_views_exposed_form_alter(&$form, &$form_state) {
  switch ($form['#id']) {
    case 'views-exposed-form-gofast-user-directory-page' :
      // Prevent useless loading of views filters. This can happen when a user
      // hover on a user picture, triggering an ajax request that will always
      // output a single result, regardless of the views filters.
      if (preg_match('/^profile\/popup\/([0-9]+)$/', current_path())) {
        // Run through each filter element to make it unaccessible. This will
        // bypass form processing and rendering.
        foreach ($form['#info'] as $filter => $info) {
          $fieldname = substr($filter, 7); // 7 as output of strlen('filter-').
          $form[$fieldname]['#access'] = FALSE;
        }
      }
      break;
  }
}

/**
 * Page callback for the current logged in user private space.
 */
function gofast_user_private_space_page() {
  $space = gofast_og_get_user_private_space();
  // This is a workaround to add the actual node to the page vars.
  $_GET['q'] = 'node/' . $space->nid;
  return node_page_view($space);
}

function gofast_user_preprocess_page(&$variables) {
  global $user;

  // If the user just switched language, propose him to save changes as a
  // profile preference.
  $params = drupal_get_query_parameters();
  if (isset($params['language']) && $user->language !== $params['language']) {
    $path = 'profile/save-language/'.$params['language'];
    $save = l(t('Save'), $path, array('attributes' => array('class' => array('gofast-button', 'gofast-save-lang'))));
    $msg = t('Save this language as your preferred language ?', array(), array('context' => 'gofast')) .' '. $save;
    drupal_set_message($msg, 'status', FALSE);
  }

  // Add global user related styles on every page.
  drupal_add_css(drupal_get_path('module', 'gofast_user') . "/css/gofast_user.css");
}

/**
 * Ajax callback for user quick saving his prefered language.
 */
function gofast_user_save_lang($lang, $account = NULL) {
  global $user;

  $account = user_load(isset($account->uid) ? $account->uid : $user->uid);
  $languages = language_list();

  if (!$lang || !in_array($lang, array_keys($languages)) || !$account->language) {
    return;
  }

  $account->language = $lang;

  if (user_save($account)) {
    drupal_set_message(t('Profile saved.'), 'status', FALSE);
  }
  else {
    drupal_set_message(t('An error occured.'), 'error', FALSE);
  }

  return theme('status_messages');
}

/**
 * Returns whether a user should be considered as an extranet user or not. Be
 * warned that this is independant from membership to Extranet space since a
 * user (such as 'adm') may be a member of 'Extranet' but not an extranet user.
 *
 * @param object $account [optional]
 *  A fully loaded drupal user object. Do not rely on global $user since fields
 *  are not systematically attached. Defaults to the current user.
 *
 * @return boolean
 */
function gofast_user_is_extranet($account = NULL) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }
  if (!isset($account->is_extranet)) {
    $account = user_load($account->uid);
    if (!isset($account->is_extranet)) {
        watchdog('Gofast User', 'Unexpected user object.', array(), WATCHDOG_ERROR);
        return;
    }
  }
  return isset($account->is_extranet[LANGUAGE_NONE][0]['value']) && $account->is_extranet[LANGUAGE_NONE][0]['value'];
}

/**
 * Returns whether a user is restricted to private comments and annotations.
 *
 * @param object $account [optional]
 *  A fully loaded drupal user object. Do not rely on global $user since fields
 *  are not systematically attached. Defaults to the current user.
 *
 * @return boolean
 */
function gofast_user_is_comment_restricted($account = NULL) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }
  if (!isset($account->field_is_comment_restricted)) {
    $account = user_load($account->uid);
    if (!isset($account->field_is_comment_restricted)) {
        watchdog('Gofast User', 'Unexpected user object.', array(), WATCHDOG_ERROR);
        return;
    }
  }
  return isset($account->field_is_comment_restricted[LANGUAGE_NONE][0]['value']) && $account->field_is_comment_restricted[LANGUAGE_NONE][0]['value'];
}

/**
 * Autocomplete callback for user lookups.
 */
function gofast_user_autocomplete($str) {
  $matches = gofast_ac_query($str, 'user');
  drupal_json_output($matches);
}

/**
 * Autocomplete callback for user lookups.
 */
function gofast_user_space_autocomplete($str) {
  $matches = array_merge(gofast_ac_query($str, 'user'), gofast_ac_query($str, 'node', array('bundle' => array('group', 'organisation', 'extranet', 'public'))));
  drupal_json_output($matches);
}

/**
 * Returns a node or a node id that corresponds to the main organisation of a
 * given user. Use gofast_ldap_ou_title() to get a main organisation's title.
 *
 * @param object|null $account [optional]
 *  A user account, defaults to the current user.
 *
 * @param boolean $full
 *  Whether to return a full node object or a node ID, defaults to TRUE.
 *
 * @return mixed
 *  A node object or a nid if user's main organisation is set, FALSE otherwise.
 */
function gofast_user_get_main_org($account = NULL, $full = FALSE) {
  $account = $account ? $account : user_load($GLOBALS['user']->uid);
  if (isset($account->ldap_user_ou[LANGUAGE_NONE][0]['value'])) {
    // Fake a rdn using gofast_ldap_space_cn() pattern.
    $ou = 'cn=' . $account->ldap_user_ou[LANGUAGE_NONE][0]['value'];
    $nid = gofast_ldap_gid_from_dn($ou);
    return $full ? node_load($nid) : $nid;
  }
  return FALSE;
}

/**
 * Helper returning available options/labels for user partitioning (whether or
 * not users who don't share at least 1 space can see each other).
 */
function gofast_user_partitioning_options() {
  return array(
    GOFAST_USER_PARTITIONING_OFF => t('Users can see each other.', array(), array('context' => 'gofast')),
    GOFAST_USER_PARTITIONING_ON => t('All users cannot see each other.', array(), array('context' => 'gofast')),
    GOFAST_USER_PARTITIONING_ON_ONLY_EXTRANET => t('Extranet cannot see each other.', array(), array('context' => 'gofast'))
  );
}

/**
 * Returns available options for extranet user access restriction (whether or
 * not extranet users are able to access non-extranet spaces).
 */
function gofast_user_extranet_restriction_options() {
  return array(
    GOFAST_USER_EXTRANET_RESTRICTION_OFF => t('No restriction : Extranet users are able to access organisations.', array(), array('context' => 'gofast:gofast_user')),
    GOFAST_USER_EXTRANET_RESTRICTION_ON => t('Restricted access : Extranet users cannot access organisations.', array(), array('context' => 'gofast:gofast_user'))
  );
}

/**
 * Implements hook_form_formID_alter()
 *
 *  Adds user related configs to the form.
 */
function gofast_user_form_gofast_admin_settings_alter(&$form, &$form_state) {
  // Adds user partitioning setting.
  $form['visibility']['user_partitioning'] = array(
    '#type' => 'select',
    '#title' => t('User Visibility', array(), array('context' => 'gofast')),
    '#options' => gofast_user_partitioning_options(),
    '#default_value' => variable_get('gofast_user_partitioning', GOFAST_USER_PARTITIONING_DEFAULT),
    '#description' => t('Choose whether or not to let users view each others if they don\'t share at least one space in common.', array(), array('context' => 'gofast:gofast_user'))
  );
  // Adds a specific access policy setting for extranet users.
  $form['visibility']['user_extranet_restriction'] = array(
    '#type' => 'radios',
    '#title' => t('Access policy for Extranet users', array(), array('context' => 'gofast:gofast_user')),
    '#options' => gofast_user_extranet_restriction_options(),
    '#default_value' => variable_get('gofast_user_extranet_restriction', GOFAST_USER_EXTRANET_RESTRICTION_DEFAULT),
    '#description' => t('Choose whether or not to let extranet users access non-extranet spaces.', array(), array('context' => 'gofast:gofast_user'))
  );

  $form['#submit'][] = 'gofast_user_form_gofast_admin_settings_submit';
}


/**
 *
 * @param type $ajax
 * Ajax callback for editing avatar
 */
function gofast_user_edit_avatar($ajax, $uid) {
  if ($ajax) {
    ctools_include('modal');
    ctools_include('ajax');

    $user = user_load($uid);
    if (is_numeric($user->picture)) {
      $user->picture = file_load($user->picture);
    }

    $avatar = (!is_null($user->picture) ? '/sites/default/files/pictures/'. $user->picture->filename : null);
    $output = theme('gofast_user_avatar_crop', array(
      'avatar' => $avatar,
      'uid'    => $uid
    ));

    ctools_modal_render(t('Cropping avatar', array(), array('context' => 'gofast')), $output);
  }
  else {
    return $output;
  }
}

function gofast_user_theme() {
  return array(
    'gofast_user_avatar_crop' => array(
      'template'  => 'tpl/avatar_crop',
      'variables' => array(
        'avatar' => NULL,
        'uid'    => NULL
      )
    ),
    'gofast-account-creation-body' => array(
        'template' => 'tpl/gofast-account-creation-body'
    ),
     'gofast-account-creation-sasl-body' => array(
        'template' => 'tpl/gofast-account-creation-sasl-body'
    ),
    'gofast-user-approve-resquest-relationship' => array(
        'template' => 'tpl/gofast-user-approve-resquest-relationship'
    ),
    'gofast-user-decline-resquest-relationship' => array(
        'template' => 'tpl/gofast-user-decline-resquest-relationship'
    ),
    'gofast-user-delete-relationship' => array(
        'template' => 'tpl/gofast-user-delete-relationship'
    ),
    'gofast-user-user-password-reset' => array(
        'template' => 'tpl/gofast-user-user-password-reset'
    ),
    'gofast-user-user-email-connect' => array(
      'template' => 'tpl/gofast-user-user-email-connect'
    ),
    'gofast_user_add_request_relationship' => array(
        'template' => 'tpl/gofast_user_add_request_relationship'
    ),
    'gofast_user_cancel_request_relationship' => array(
        'template' => 'tpl/gofast_user_cancel_request_relationship'
    ),
    'gofast_user_notify_allAdm_to_user_blocked' => array(
        'template' => 'tpl/gofast_user_notify_all_adm_to_blocked_user'
    ),
    'gofast_user_profile_groups' => array(
        'template' => 'tpl/gofast-user-profile-groups'
    ),
  );
}

/**
 * Creates a drupal user account.
 *
 * This function prepares a form_state array according to passed in parameters,
 * then populates, processes & submits user profile form ('user_register_form').
 * The return value states whether errors were raised or not, you can get error
 * details by calling form_get_errors().
 *
 * @param string $name
 *  A drupal username.
 *
 * @param string $role_name
 *  A unique GOFAST role name.
 *
 * @param array $options
 *  Any additional properties and fields goes here.
 *
 * @return boolean
 *  Whether error(s) occured or not.
 */
function gofast_user_create($name, $role_name = GOFAST_ROLE_CONTRIBUTOR, array $options = array(), $sasl = TRUE) {
  $domain = str_replace(array('dc=', ','), array('', '.'), GOFAST_LDAP_INT_BASE_DN);
  $options['name'] = $name;

  // Merge in default options.
  $options += array(
    'pass' => $name,
    'mail' => "{$name}@{$domain}",
    'init' => "{$name}@{$domain}",
    'timezone' => drupal_get_user_timezone(),
    'language' => language_default('language'),
    'status' => 1,
    'is_new' => 1,
    'is_extranet' => 0,
    'is_broadcaster' => 0,
    'notify' => TRUE
  );

  // LDAP fields are mandatory because we use them to generate [cn] attribute
  // token for ldap provisioning. Either LDAP module or openLDAP's inetOrgPerson
  // objectClass require cn to be set.
  $field_defaults = array(
    'ldap_user_sn' => $name,
    'ldap_user_givenname' => $name,
    // ... add only single-valued field here (cardinality 1-1), these are not
    // mandatory but setting a default here ensures we can use shortcut pattern
    // to pass options (key => value).
    'ldap_user_displayname' => $name,
    'ldap_user_manager' => array(),
    'ldap_user_ou' => array(), // gid, won't replace GOFAST_OG_USER_MEMBERSHIP_FIELD
    'ldap_user_title' => array(),
    'ldap_user_o' => array(),
    'ldap_user_telephonenumber' => array(),
    'ldap_user_mobile' => array(),
    'ldap_user_departmentnumber' => array(),
    'ldap_user_description' => array(),
    'ldap_user_mobile' => array()
  );

  $options += $field_defaults;
  foreach ($field_defaults as $fieldname => $default) {
    !empty($options[$fieldname]) && is_scalar($options[$fieldname])
    && ($options[$fieldname] = array(LANGUAGE_NONE => array(array('value' => $options[$fieldname]))));
  }

  // Register user in its ou if needed.
  if (!empty($options['ldap_user_ou'][LANGUAGE_NONE][0]['value'])) {
    $og = array(GOFAST_OG_USER_MEMBERSHIP_FIELD => array(LANGUAGE_NONE => array(
      array('target_id' => $options['ldap_user_ou'][LANGUAGE_NONE][0]['value'])
    )));
    $options = array_merge_recursive($options, $og);
    // Seems we also have to omit #value_key for this field, or is this the case
    // for all single select fields ??
    $options['ldap_user_ou'][LANGUAGE_NONE][0] = $options['ldap_user_ou'][LANGUAGE_NONE][0]['value'];
  }

  // Assign given roles. Fallback to GOFAST_ROLE_READ_ONLY.
  $options['administer_users'] = TRUE;
  $role = in_array($role_name, gofast_user_roles()) ? user_role_load_by_name($role_name) : user_role_load_by_name(GOFAST_ROLE_READ_ONLY);
  $options['roles'] = array($role->rid => $role->rid);

  // Password.
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  $options['pass'] = array('pass1' => $options['pass'], 'pass2' => $options['pass']);

  // Let submit handlers know what to do.
  $options['op'] = t('Create new account', array(), array('context' => 'gofast:gofast_user'));

  //Enable SASL if asked
  if($sasl){
    $options['sasl_auth'][LANGUAGE_NONE][0]['value'] = TRUE;
  }

  // Retrieves, populates, and processes the form.
  $form_state = array('values' => $options);
  drupal_form_submit('user_register_form', $form_state);

  if ($errors = form_get_errors()) {
    // Generic error log msg, caller may display error message.
    watchdog('Gofast User', 'User :username creation failed.', array(':username' => $name), WATCHDOG_ERROR);
    return FALSE;
  }
  else {
    watchdog('Gofast User', 'User :username created successfully', array(':username' => $options['name']), WATCHDOG_INFO);
    return TRUE;
  }
}

function gofast_user_library() {
  $lib = 'sites/all/libraries/cropper';
  $path = drupal_get_path('module', 'gofast_user');
  $libraries = array();
  $libraries['cropper'] = array(
    'title' => 'Cropper library',
    'version' => '1.0',
    'js' => array(
      $lib . '/dist/cropper.js' => array(
        'group' => JS_DEFAULT
      ),
      $path . '/js/gofast_crop.js' => array(
        'group' => JS_DEFAULT
      )
    ),
    'css' => array(
      $lib . '/dist/cropper.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 1
      ),
      $path . '/css/gofast_crop.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME,
        'weight' => 1
      )
    )
  );
  $libraries['user_directories'] = array(
    'title' => 'Directories libraries',
    'version' => '1.0',
    'css' => array(
      $path . '/css/gofast_directories.css' => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_THEME + 1,
        'weight' => 5
      )
    )
  );
  return $libraries;
}

function gofast_crop_save_avatar_ajax() {
  $output = ['status' => 0];

  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    $data = base64_decode($_POST['data']);
    $uid = $_POST['uid'];
    $account = user_load($uid);
    $ext = !empty($_POST['ext']) ? strtolower($_POST['ext']) : '';

    if (is_numeric($user->picture)) {
      $user->picture = file_load($user->picture);
      if (file_exists($user->picture)) {
        file_delete($user->picture);
      }
    }

    $tmp_filename = 'sites/default/files/pictures/tempfile' . $uid;

    /** WebP/m support is fine but image_style_url() fails to create thumbnails
     * so we leave it as unsupported for now.
    if (in_array($ext, ['webm', 'webp'])) {
      // Function imagecreatefromstring does not support WebP.
      file_put_contents($tmp_filename, $data);
      $image = imagecreatefromwebp($tmp_filename);
    }
    else {
      $image = imagecreatefromstring($data);
    } */

    $image = imagecreatefromstring($data);
    $func = $ext === 'jpg' ? 'imagejpeg' : 'image' . $ext;

    if ($image === FALSE) {
      $msg = t('Image type is unsupported (.!ext): data is not in a recognised '
        . 'format, or the image is corrupt and cannot be loaded.', ['!ext' => $ext]);
      watchdog('gofast_user', $msg, [], WATCHDOG_ERROR);
      $http_status = '500 Internal Server Error';
      $output['errorMsg'] = $msg;
    }
    elseif (!function_exists($func)) {
      $msg = t('Function !func does not exist!', ['!func' => $func]);
      watchdog('gofast_user', $msg, [], WATCHDOG_ERROR);
      $http_status = '500 Internal Server Error';
      $output['errorMsg'] = $msg;
    }
    else {
      $func($image, $tmp_filename);
      $data = file_get_contents('sites/default/files/pictures/tempfile' . $uid);
      $account->picture = file_save_data($data, 'public://pictures/picture-'.$uid.'-'.time().'.'.$ext, FILE_EXISTS_REPLACE);

      // This line below is the most important, Drupal generates the thumbnail via the HTTP request
      $thumbnail_url = image_style_url('gofast_thumbnail', $account->picture->uri);
      drupal_http_request($thumbnail_url);

      user_save($account);
      drupal_unlink('sites/default/files/pictures/tempfile'.$uid);

      $http_status = '200 OK';
      $output = [
        'status' => 1,
        'pictureUrl' => file_create_url($account->picture->uri),
        'thumbnailUrl' => $thumbnail_url
      ];
    }
  }

  if ($http_status) {
    header('Status: ' . $http_status);
  }

  header('Content-Type: application/json');
  $response = json_encode($output);

  return $response;
}

/**
 * This is a helper function that returns an account is broadcaster or not.
 * @global type $user
 * @param type $account a specified account, using current if none is given.
 * @return boolean true if the user is broadcaster, false otherwise.
 */
function gofast_user_is_broadcaster($account = NULL) {
  if ($account === NULL) {
    global $user;
    $account = user_load($user->uid);
  }else{
      $account = user_load($account->uid);
  }
  if(!isset($account->{'is_broadcaster'}[LANGUAGE_NONE][0]['value'])){
      return FALSE;
  }else{
      if($account->{'is_broadcaster'}[LANGUAGE_NONE][0]['value'] == 1){
          return TRUE;
      }else{
          return FALSE;
      }
  }
}

/* this function unblock users */
function gofast_user_unblockAndRefresh($uid){

    gofast_user_unblock($uid);

    $myView = views_embed_view('gofast_user_directory','page_3');

    print $myView;
    exit();
}

function gofast_user_unblock_profile($uid){

    gofast_user_unblock($uid);

    $user_profile = user_view(user_load($uid));
    $profile_view = drupal_render($user_profile);

    print $profile_view;
    exit();
}

function gofast_user_unblock($uid){
  // 3 steps for unblock the user
  $my_user = user_load($uid);
  $edit = array('status' => 1);

  //is the user is also disabled, re-enable it
  if(gofast_user_is_left($my_user)){
      gofast_user_unleave_user($uid);
  }else{
      user_save($my_user, $edit);
      //audit
      global $user;
        $event = array('mod_author' => $user->uid, 'mod_timestamp' => time(), 'event' => 'user_unblocked','uid_to_block' => $uid);
        $event = serialize($event);
        $last_event_serialized = rawurlencode($event);

        $last_event_unserialized["mod_timestamp"] = time();
        $last_event_unserialized["mod_author"] = $user->uid;

        //Insert inton audit
        gofast_audit_insert_line_audit(0, 'user_unblocked', $last_event_serialized, $last_event_unserialized); //The value 0 is define in order to not render node in the audit

  }
  db_truncate('flood')->execute();
  db_truncate('login_security_track')->execute();

}

function gofast_user_block_profile($uid){

    gofast_user_block($uid);

    $user_profile = user_view(user_load($uid));
    $profile_view = drupal_render($user_profile);

    print $profile_view;
    exit();
}

function gofast_user_block($uid){
  // 3 steps for unblock the user
  $my_user = user_load($uid);
  $edit = array('status' => 0);
  user_save($my_user, $edit);

  db_truncate('flood')->execute();
  db_truncate('login_security_track')->execute();

}

function gofast_user_form_alter(&$form, &$form_state) {
  if($form['#form_id'] === 'user_pass') {
     $form["#validate"] = array('gofast_user_reset_password_validate');
  }
  if($form['#form_id'] === 'gofast_blocked_user_form'){
      $form['actions']['submit']['#attributes']['class'][] = 'btn-danger btn-sm';
      $form['actions']['submit']['#value']= '<i class="fa fa-lock"></i>   '. t('Block', array(), array('context' => 'gofast'));
  }
  if($form['#form_id'] === 'gofast_unblocked_user_form'){
      $form['actions']['submit']['#attributes']['class'][] = 'btn-success btn-sm';
      $form['actions']['submit']['#value']= '<i class="fa fa-unlock"></i>   '.t('Unblock', array(), array('context' => 'gofast'));
  }
}

function gofast_user_reset_password_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }

  drupal_set_message(t('A password recovery email has just been sent to you in the event that your information is valid or authentication delegation is not activated on your account.'));

  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
   if($account->sasl_auth[LANGUAGE_NONE][0]['value'] == 1){
       $l = array('langcode' => $account->language, 'context' => 'gofast');
       form_set_error("", "");
       drupal_goto("node");
   }
  }
  else {
    form_set_error("", "");
     drupal_goto("node");
  }

}

function gofast_user_alter_comments(&$form, &$form_alter){
    if(gofast_user_is_comment_restricted()){
        $form['field_comment_is_private'][LANGUAGE_NONE]['#default_value'] = 1;
        $form['field_comment_is_private'][LANGUAGE_NONE]['#disabled'] = TRUE;
    }
}


/*
 * Implements gofast_api_RESSOURCE_ACTION
 * @ressource login
 * @action token
 * @methods GET
 */
function gofast_api_login_token($params){
    if($params['method'] != "GET"){
        gofast_api_not_implemented("This method");
    }

    if($_SERVER['REMOTE_ADDR'] !== "127.0.0.1" && $_SERVER['REMOTE_ADDR'] !== "localhost" && $_SERVER['REMOTE_ADDR'] !== "::1"){
        gofast_api_forbidden("External access to this action is forbidden.");
    }

    //Retrieve name param
    $name = $params['name'];
    if(!isset($name) && empty($name)){
        gofast_api_mandatory_parameter('name');
    }

    //Retrieve corresponding user
    $user = user_load_by_name($name);
    if($user === false){
        gofast_api_not_found("User " . $name . " not found");
    }

    //Generate token
    $uuid = gofast_generate_uuid();
    $token = base64_encode($uuid);

    //Generate end timestamp
    $timestamp = time() + 180;

    //Store the token
    db_insert("gofast_token")
        ->fields(array(
            'uid' => $user->uid,
            'token' => $token,
            'timestamp' => $timestamp
        ))->execute();

    $output = array('token' => $token);

    gofast_api_success($output);
}



/*
 * Implements gofast_api_RESSOURCE_ACTION
 * @ressource user
 * @action autocomplete
 * @methods GET
 */
function gofast_api_user_picture($params){
    switch($params['method']){
        case 'GET':
            gofast_api_get_user_picture($params);
            break;
        default:
            gofast_api_not_implemented("This method");
            break;
    }
}

function gofast_api_get_user_picture($params){
    //Check authentication
    global $user;
    if($user->uid == 0){
       //gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Check if we have a str param
    if(isset($params['username'])){
        $username = $params['username'];
    }else if(isset($params['uid'])){
        $uid = $params['uid'];
    }else{
        gofast_api_mandatory_parameter("username/uid");
    }

    //Check if we have to return the name of the user
    if(isset($params['with_name'])){
        $with_name = $params['with_name'];
    }

    if(isset($params['uid'])){
        $myuser = user_load($uid);

        usurp(1);
        $html_content = theme('user_picture', array('account' => $myuser, 'dimensions' => 20));
        $html_content = "<span onclick='event.preventDefault();window.parent.parent.Gofast.processAjax(\"/user/" . $uid . "\")'>". $html_content ."</span>";

    }else if(isset($params['actor'])){
        usurp(1);
       $html_content =  gofast_workflows_get_actor_members_list($username);
       $html_content = str_replace("width='16px'", 'width="40px"', $html_content);
       $html_content = str_replace("height='16px'", 'height="40px"', $html_content);
    }else{
        $myuser = user_load_by_name($username);
        if(!isset($myuser->uid)){
            //maybe we received a bonita_id
            $uid = gofast_workflows_get_drupalid_from_bonitaid($username);
            $myuser = user_load($uid);
             if(!isset($myuser->uid)){
                gofast_api_internal_server_error("Unable to load user with username : " . $username);
             }
        }else{
            $uid = $myuser->uid;
        }
        usurp(1);
        $html_content = theme('user_picture', array('account' => $myuser, 'dimensions' => 20));

        if($with_name){
            $html_content .= "<span style='padding-right: 10px;'>" . gofast_user_get_display_name_sql($uid) . "</span>";
        }

        $html_content = "<span onclick='event.preventDefault();window.parent.parent.Gofast.processAjax(\"/user/" . $uid . "\")'>". $html_content ."</span>";
    }
    $output = array(
        'content' => $html_content
    );

    gofast_api_success($output);
}


/*
 * Implements gofast_api_RESSOURCE_ACTION
 * @ressource user
 * @action autocomplete
 * @methods GET
 */
function gofast_api_user_autocomplete($params){
    switch($params['method']){
        case 'GET':
            gofast_api_get_user_autocomplete($params);
            break;
        default:
            gofast_api_not_implemented("This method");
            break;
    }
}

function gofast_api_get_user_autocomplete($params){
    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Check if we have a str param
    if(isset($params['str'])){
        $str = $params['str'];
    }else{
        gofast_api_mandatory_parameter("str");
    }

    if(strlen($str) < 1){
        gofast_api_success(array());
    }

    $options_ac_user = array(
      'format_key_callback' => 'gofast_user_api_autocomplete_format_key',
      'format_value_callback' => 'gofast_user_api_autocomplete_format_value'
    );

    $output = gofast_ac_query($str, 'user', $options_ac_user);

    gofast_api_success($output);
}

function gofast_user_api_autocomplete_format_key($entity_type, $entity) {
    return $entity->uid;
}

function gofast_user_api_autocomplete_format_value($entity_type, $entity) {
    $displayname = gofast_user_display_name($entity);
    $user_icon = str_replace('<span>', '<span style="display:none;">', theme('user_picture', array('account' => $entity)));
    $user_icon = "<img" . preg_replace('/(.*)<img(.*)\/>(.*)/sm', '\2', $user_icon) . "/>";
    return array('login' => $entity->name, 'mail' => $entity->mail, 'uid' => $entity->uid, 'displayname' => $displayname, 'icon' => $user_icon);
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function gofast_user_form_user_login_block_alter(&$form, &$form_state) {
  global $cookie_domain;

  $count = 'COUNT(*)';
  $idp_configured = db_query("select COUNT(*) from saml_sp_idps")->fetchAll()[0]->${count};
  $login_form_disabled = variable_get("gofast_disable_login_form", FALSE);

  if($idp_configured){
    //Change redirect URL of SSO authentication link and format it as a button
    if(isset($form['saml_sp_drupal_login_links'])){
        $form['saml_sp_drupal_login_links']['#value'] = "<i class='fa fa-user-circle-o'></i> " . str_replace("error/403", $_SERVER['REQUEST_URI'], $form['saml_sp_drupal_login_links']['#items'][0]['data']);
        unset($form['saml_sp_drupal_login_links']['#theme']);
        unset($form['saml_sp_drupal_login_links']['#items'][0]['data']);
        $form['saml_sp_drupal_login_links']['#type'] = "button";
        $form['saml_sp_drupal_login_links']['#attributes'] = array('onclick' => 'Gofast.gofast_saml_sp_drupal(event, "'. $cookie_domain.'");');
        $form['saml_sp_drupal_login_links']['#executes_submit_callback'] = FALSE;
        $form['saml_sp_drupal_login_links']['#weight'] = -1;
        $form['saml_sp_drupal_login_links']['#prefix'] = "<center><div class='login-spacer'></div>";
        if(!$login_form_disabled){
        $form['saml_sp_drupal_login_links']['#suffix'] = "<div class='login-spacer'></div><div><hr /><h3 class='login-or'>" . t("OR", array(), array('context' => 'gofast:gofast_user')) . "</h3></div></center>"
                . "<script>jQuery('#edit-saml-sp-drupal-login-links').attr('type', 'button');</script>";
        }
    }
  }else{
      //The IDP is not configured, remove reference to SAML authentication
      unset($form['saml_sp_drupal_login_links']['#theme']);
      unset($form['saml_sp_drupal_login_links']['#items'][0]['data']);
  }

  $form['actions']["simplified_login"] = array(
      '#type' => 'select',
      '#default_value' => isset($_COOKIE["gofast_version_login_selected"]) ? $_COOKIE["gofast_version_login_selected"] : variable_get('gofast_admin_interface', GOFAST_COMPLETE_VERSION),
      '#theme_wrappers' => array(),
      '#options' => [1 => t("GoFAST Plus", array(), array('gofast')),2 => t("GoFAST Essential", array(), array('gofast'))],
  );

  //Set ask new password link as a button
  $form['actions']["forgot_password"] = array(
      '#type' => 'button',
      "#value" => "<i class='fa fa-question-circle-o'></i> " . str_replace("<<", "", str_replace("ul>","", str_replace("li>", "", $form['links']['#markup']))), //Remove ul/li tags
      '#attributes' => array('onclick' => 'if(event.target.tagName != "A"){jQuery("#edit-forgot-password > a").click();event.preventDefault()}'),
      "#executes_submit_callback" => FALSE
  );

  if($login_form_disabled){
      $form['name']['#attributes']['class'][] = 'gofast_display_none';
      $form['name']['#title'] = '';

      $form['pass']['#attributes']['class'][] = 'gofast_display_none';
      $form['pass']['#title'] = '';
     
      $form['actions']["submit"]['#attributes']['class'][] = 'gofast_display_none';
  }

  unset($form['links']['#markup']);

  $form['#submit'][] = 'gofast_ajax_login_version_submit_callback';
  $form['#validate'][] = 'gofast_user_login_form_validation';

  $form['actions']["submit"]['#attributes']['class'][] = 'col-xs-4';
  $form['actions']["submit"]['#attributes']['style'][] = 'margin-right: 10px;width: 48%;margin-bottom: 10px;';
  $form['actions']["simplified_login"]['#attributes']['style'][] = 'width: 48%;margin-bottom: 10px;';
  $form['actions']["forgot_password"]['#attributes']['style'][] = 'width: 100%;';
}


function gofast_user_leave_user($account_uid){
    $account = user_load($account_uid);
    global $user;
    if(isset($account->uid)){
       $account->field_left[LANGUAGE_NONE][0]["value"] = 1;
       $account->status = 0;
       user_save($account);

      //remove from search index
      $env_id = GOFAST_SEARCH_ENV_ID;
      $entity_type = "user";
      $entity_id = $account_uid;
      $indexer_table = apachesolr_get_indexer_table($entity_type);
      if (apachesolr_index_delete_entity_from_index($env_id, $entity_type, $entity_id)) {

      }
      else {
        // Set status 0 so we try to delete from the index again in the future.
        db_update($indexer_table)
          ->condition('entity_id', $entity_id)
          ->fields(array('changed' => REQUEST_TIME, 'status' => 0))
          ->execute();
      }

        //audit
       $event = array('mod_author' => $user->uid, 'mod_timestamp' => time(), 'event' => 'user_leave','uid_to_block' => $account_uid);
       $event = serialize($event);
       $last_event_serialized = rawurlencode($event);

       $last_event_unserialized["mod_timestamp"] = time();
       $last_event_unserialized["mod_author"] = $user->uid;

       //Insert inton audit
       gofast_audit_insert_line_audit(0, 'user_leave', $last_event_serialized, $last_event_unserialized); //The value 0 is define in order to not render node in the audit

       //implement hook to allow custom module to add custom actions when a user leave
        foreach(module_implements('gofast_user_leave') as $module){
          call_user_func_array($module . '_gofast_user_leave', array(&$account));
        }
    }
}

function gofast_user_unleave_user($account_uid){
    $account = user_load($account_uid);
    if(isset($account->uid)){
       $account->field_left[LANGUAGE_NONE][0]["value"] = 0;
       $account->status = 1;
       user_save($account);
        //audit
        global $user;
       $event = array('mod_author' => $user->uid, 'mod_timestamp' => time(), 'event' => 'user_unleave','uid_to_block' => $account_uid);
       $event = serialize($event);
       $last_event_serialized = rawurlencode($event);

       $last_event_unserialized["mod_timestamp"] = time();
       $last_event_unserialized["mod_author"] = $user->uid;

       //Insert inton audit
       gofast_audit_insert_line_audit(0, 'user_unleave', $last_event_serialized, $last_event_unserialized); //The value 0 is define in order to not render node in the audit
    }
}

//return true id the user has left the plateforme, else return false
function gofast_user_is_left($account){
    if($account->field_left[LANGUAGE_NONE][0]["value"] == 1){
        return true;
    }else{
        return false;
    }
}

function gofast_user_current_can_see_left_user(){
    global $user;

    if(gofast_user_is_adm($user)){
        return true;
    }
    return false;
}

function gofast_user_get_groups_async($account_uid){

  $account = user_load($account_uid);

  global $user;
  // Is the current user theme administrator ?
  $is_adm = gofast_user_is_adm($user);

  // Is the current user visiting his own profile (note : let su manage other
  // profiles as its own).
  $self = $user->uid == 1 || $user->uid == $account->uid;

  $organisations = $groups = $public = $extranet = $user_all_groups = $visitor_all_groups = array();

  $groups_user_gids = gofast_og_get_spaces_by_user($account);

  $groups_user = node_load_multiple($groups_user_gids);
  $nodes_groups_path = gofast_cmis_space_get_drupal_path_multiple_nodes($groups_user_gids);

  foreach($groups_user as $group){
    if(node_access('view', $group)){
      switch ($group->type) {
        case 'private_space':
          break;
        case 'organisation':
          $organisations['path'][$group->nid] = $nodes_groups_path[$group->nid];
          break;
        case 'group':
          $groups['path'][$group->nid] = $nodes_groups_path[$group->nid];
          break;
        case 'public':
          $public['path'][$group->nid] = $nodes_groups_path[$group->nid];
          break;
        case 'extranet':
          $extranet['path'][$group->nid]= $nodes_groups_path[$group->nid];
        default:
          break;
      }
    }
  }
  asort($groups['path']);
  asort($public['path']);
  asort($organisations['path']);
  asort($extranet['path']);

  // Requested groups
  $requested_groups_ids = gofast_og_get_user_pending_spaces($account);
  $requested_groups = array();

  if(count($requested_groups_ids) > 0 ){
    $query_og_info = db_select('node', 'n');
    $query_og_info->fields('n', array('nid', 'title', 'type'));
    $query_og_info->condition('n.nid', array_values($requested_groups_ids), 'IN');

    $results = $query_og_info->execute();

    if ($results->rowCount() > 0) {
      while($og = $results->fetchObject()){
        $gid = $og->nid;
        $og_link = l($og->title . ' (' . t("Pending", array(), array('context' => 'gofast')) . ')', "node/{$gid}", array('attributes' => array('class' => 'ajax-navigate', 'nid' => $gid, 'title' => $og->title)));
        $requested_groups[] = $og_link;
      }
    }
  }

  ## get userlists

  $userlists = array();
  $userlists_ids = gofast_userlist_get_userlists_by_user($account);
  if (!empty($userlists_ids)) {
    foreach ($userlists_ids as $key => $ulid) {
      $entity_userlist = entity_load_single('userlist', $key);
      $nid = $entity_userlist->nid;
      $node = node_load($nid);
      $title = $node->title;
      if (!empty($title)) {
        $userlists[$key] = $title;
      }
    }
    asort($userlists);
  }

  $variables['userlists'] = $userlists;
  $variables['organisations'] = $organisations;
  $variables['groups'] = $groups;
  $variables['public'] = $public;
  $variables['extranet'] = $extranet;
  $variables['requested_groups'] = implode(' ', $requested_groups);



  echo theme('gofast_user_profile_groups', array(
        'userlists'=> $userlists,
        'groups' => $groups,
        'requested_groups' => implode(' ', $requested_groups),
        'organisations' => $organisations,
        'extranet' => $extranet,
        'public' => $public,
        'account' => $account,
        'self' => $self,
        'is_adm' => $is_adm) );

  exit();
}

function gofast_user_groups_get_block_myteam_async($account_uid){
  $output ='';
  $block = gofast_user_block_view('my_team', $account_uid);
  $output .= '<section id="block-gofast-user-my-team" class="block block-gofast-user contextual-links-region clearfix">';
  $output .= '<h2 class="block-title">'.$block['subject'].'</h2>';
  $output .= $block['content'] ;
  $output .= '</section>' ;

  print $output;
  exit;

}


function gofast_user_import_from_excel($filepath){
    $decoded_data = gofast_user_import_file_decode($filepath);

    if(count($decoded_data) > 0){
        foreach($decoded_data as $data_user){
            //first, create the user
            $options = array();
            $options['mail'] = $data_user["mail"];
            $options['ldap_user_givenname'] = $data_user["firstname"];
            $options['ldap_user_sn'] = $data_user["lastname"];
            $options['ldap_user_sn'] = $data_user["lastname"];
            $options['ldap_user_title'] = $data_user["title"];

            gofast_user_create($data_user["login"], GOFAST_ROLE_CONTRIBUTOR, $options, TRUE);

            //then load the previously created user
            $my_user = user_load_by_name($data_user["login"]);

            //add this user into userlists and spaces
            if(count($data_user["userlists"]) > 0){
                foreach($data_user["userlists"] as $userlist){
                    gofast_userlist_add_members($userlist, array($my_user->uid));
                }
            }
            if(count($data_user["spaces"]) > 0){
                 foreach($data_user["spaces"] as $nid){
                     $space_node = node_load($nid);
                     $roles_query = og_roles('node', $space_node->type, $nid, FALSE, FALSE);
                     foreach($roles_query as $rkey => $roles){ //We get the role IDs associated to the space
                          if($roles == GOFAST_OG_ROLE_ADMIN){
                            $admin_rid = $rkey;
                          }
                          if($roles == GOFAST_OG_ROLE_READ_ONLY){
                            $readonly_rid = $rkey;
                          }
                          if($roles == GOFAST_OG_ROLE_STANDARD){
                            $contributor_rid = $rkey;
                          }
                     }

                      //The user is subscribed without any role
                      gofast_og_subscribe_user($nid, $my_user->uid);
                      //We grant the user contributor role in the space
                      og_role_grant('node', $nid, $my_user->uid, $contributor_rid);

                }
            }


        }
    }
}

function gofast_user_import_file_decode($filepath){
    set_time_limit(3000);

    require_once libraries_get_path('excel_reader').'/Classes/PHPExcel/IOFactory.php';
    $file_path = file_stream_wrapper_get_instance_by_uri('public://')->realpath();
    $objPHPExcel = PHPExcel_IOFactory::load($filepath);
    $sheet = $objPHPExcel->getSheet(0);

    $data = array();


    //mapping between column number and information inside.
    //if the file structure change, just update this array
    $array_map_column_info = array();
    $array_map_column_info["login"] = 0;
    $array_map_column_info["lastname"] = 1;
    $array_map_column_info["firstname"] = 2;
    $array_map_column_info["mail"] = 3;
    $array_map_column_info["title"] = 4;
    $array_map_column_info["userlists"] = 5;
    $array_map_column_info["spaces"] = 6;
     $i = 0;
      $data_converted = array();
    foreach($sheet->getRowIterator() as $key_row=>$row) {
       if($i == 0){
            $i++;
           continue;
       }
        $spaces = array();
        $userlists = array();
        $login = "";
        $lastname = "";
        $firstname = "";
        $mail = "";
        $title = "";
        foreach ($row->getCellIterator() as $key_cell=>$cell) {
                 switch($key_cell){
                    case $array_map_column_info["login"]:
                        $login = $cell->getValue();
                    break;
                    case $array_map_column_info["lastname"]:
                        $lastname = $cell->getValue();
                    break;
                    case $array_map_column_info["firstname"]:
                        $firstname = $cell->getValue();
                    break;
                    case $array_map_column_info["mail"]:
                        $mail = $cell->getValue();
                    break;
                    case $array_map_column_info["title"]:
                        $title = $cell->getValue();
                    break;
                    case $array_map_column_info["userlists"]:
                        $string_userlists = $cell->getValue();
                        $userlists = explode(";", $string_userlists);
                    break;
                    case $array_map_column_info["spaces"]:
                        $string_spaces = $cell->getValue();
                        $spaces = explode(";", $string_spaces);
                    break;

                }
        }


        $data_converted[$i]["login"] = $login;
        $data_converted[$i]["lastname"] = $lastname;
        $data_converted[$i]["firstname"] = $firstname;
        $data_converted[$i]["mail"] = $mail;
        $data_converted[$i]["title"] = $title;
        $data_converted[$i]["userlists"] = $userlists;
        $data_converted[$i]["spaces"] = $spaces;

        $i++;
    }

    return $data_converted;
}

/**
 * "whoami" endpoint for front-end to be able to quickly check if the current
 * user is still logged-in (async).
 *
 * Sends json representation of ['uid' => $user->uid] to client.
 */
function gofast_user_whoami() {
  global $user;
  drupal_json_output(array('uid' => $user->uid));
  exit();
}


function gofast_user_user_logout($account) {
  drupal_add_js(array('gofast' => array('user' => ['uid' => 0])), 'setting');
}

/**
 * Implements hook_user_login
 */
function gofast_user_user_login(&$edit, $account) {
    global $user;

    //Generate token
    $uuid = gofast_generate_uuid();
    $tokenGofast = base64_encode($uuid);

    //Generate end timestamp
    $timestamp = time() + 60;

    //Store the token
    db_merge('gofast_token')
        ->insertFields(array(
            'uid' => $user->uid,
            'token' => $tokenGofast,
            'timestamp' => $timestamp,
        ))
        ->updateFields(array(
          'token' => $tokenGofast,
          'timestamp' => $timestamp,
        ))
        ->key(array('uid' => $user->uid))
        ->execute();

  variable_set("gofast_token_user_login", $tokenGofast);
}

/**
 * Implements hook_drupal_goto_alter
 */
function gofast_user_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // or str_ends_with() with PHP8
  if(preg_match('/node\/?$/', $path)) {
    $path = "activity";
  }
  if (isset($_SESSION['login_path']) && !empty($_SESSION['login_path'])) {
    $options['query']['path'] = $_SESSION['login_path'];
    unset($_SESSION['login_path']);
  }
}

function gofast_ajax_login_version_submit_callback(&$form, &$form_state)
{
  global $user;
  global $cookie_domain;
  global $mobile_url;

  $standard_prefix_url = variable_get_value('base_url_standard');
  $user = user_load($form_state['uid']);
  $selectVersion = $form_state['values']['simplified_login'];

  setcookie('gofast_version_login_selected', $selectVersion, strtotime('+1 year'), '/', $cookie_domain, true); // set the chosen version cookie ininite

  if (gofast_mobile_is_mobile_domain() && $selectVersion == GOFAST_COMPLETE_VERSION) {
    gofast_user_handle_redirect_login_to('standard', $user->uid, $mobile_url, $standard_prefix_url);
  }elseif(!gofast_mobile_is_mobile_domain() && $selectVersion == GOFAST_SIMPLE_VERSION){
    gofast_user_handle_redirect_login_to('mobile', $user->uid, $mobile_url, $standard_prefix_url);
  } else {
    $form_state['redirect'] = 'user/' . $user->uid;
  }
}

function gofast_user_handle_redirect_login_to($goToDomain, $uid, $mobile_url, $standard_prefix_url)
{

  $token = variable_get("gofast_token_user_login");
  $request_uri = str_replace($_SERVER['REQUEST_SCHEME'] . "://" . $_SERVER['SERVER_NAME'], "", $_SERVER['HTTP_REFERER']);

  if ($goToDomain == "mobile") {
    header('Location: ' . $mobile_url . '/gofast/user/login/redirect/' . $token . '/' .$uid . "?request_uri=" . urlencode($request_uri));
  } elseif ($goToDomain == "standard") {
    header('Location: ' . $standard_prefix_url . '/gofast/user/login/redirect/' . $token . '/' .$uid . "?request_uri=" . urlencode($request_uri));
  }
  exit;
}

function gofast_user_login_and_redirect_to_mobile()
{
  global $user;
  global $mobile_url;
  $token = variable_get("gofast_token_user_login");

  header('Location: ' . $mobile_url . '/gofast/user/login/redirect/' . $token . '/' . $user->uid);
  exit;
}

function gofast_user_login_and_redirect_to_standard()
{
  global $user;
  $standard_prefix_url = variable_get_value('base_url_standard');
  $token = variable_get("gofast_token_user_login");

  header('Location: ' . $standard_prefix_url . '/gofast/user/login/redirect/' . $token . '/' . $user->uid);
  exit;
}

function gofast_user_login_with_token($token,$uid)
{
  global $user;
  global $base_url;
  global $mobile_url;
  global $cookie_domain;

  $timestamp = db_query('SELECT timestamp FROM {gofast_token} WHERE token = :token AND uid = :uid', array(':token' => $token, ':uid' => $uid))->fetchCol();

 // check timestamp
 if(!empty($timestamp)){
    $tokenDate = date('m/d/Y H:i:s', $timestamp[0]);
    $DateNow = date('m/d/Y H:i:s');
    if ($tokenDate > $DateNow) {
      $user = user_load($uid);
      drupal_session_regenerate();
    }
 }

  $standard_prefix_url = variable_get_value('base_url_standard');

  if ($base_url == $mobile_url) {
    setcookie('gofast_mobile_login_sid', session_id(), strtotime('+1 year'), '/', $cookie_domain, true); // set the mobile version sid cookie
  } elseif ($base_url == $standard_prefix_url) {
    setcookie('gofast_complete_login_sid', session_id(), strtotime('+1 year'), '/', $cookie_domain, true); // set the complete version sid cookie
  }

 header("Location: https://".$_SERVER['HTTP_HOST'].$_GET['request_uri']);

}


function gofast_user_login_form_validation($form, &$form_state)
{
  $errors = form_get_errors();
  if (isset($errors['login'])) {
    gofast_form_unset_error('name');
  }
}

