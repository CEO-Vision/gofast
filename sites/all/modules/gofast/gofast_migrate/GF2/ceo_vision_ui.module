<?php

/*
 *
 */
require_once(drupal_get_path('module', 'ceo_vision_ui') .'/ceo_vision_ui.inc');
require_once(drupal_get_path('module', 'ceo_vision_ui') .'/ceo_vision_ui_views_default.inc');
require_once(drupal_get_path('module', 'ceo_vision_ui') .'/ceo_vision_ui_1.inc');

require_once(drupal_get_path('module', 'cmis') .'/cmis_common/lib/cmis_repository_wrapper.php');
require_once(drupal_get_path('module', 'userpoints') .'/userpoints_service.module');


/**
 * Define the name of Tika jar
 */
define('GOFAST_TIKA_JAR', 'tika-app-1.10.jar');

/**
 * Define the language code for Undefined language
 */
define('GOFAST_UNDEFINED_LANG_CODE', 'un');



module_load_include('module', 'fivestar', 'fivestar');


function ceov_fivestar_static($content_type, $content_id, $tag = 'vote', $node_type = NULL) {
 global $user;
  $tag = 'vote';
  $criteria = array(
    'content_type' => $content_type,
    'content_id' => $content_id,
    'value_type' => 'percent',
    'tag' => 'vote',
  );

  $votes = fivestar_get_votes($content_type, $content_id, $tag);

  if ($content_type == 'node') {
    // Content type should always be passed to avoid this node load.
    if (!isset($node_type)) {
      $node = node_load($content_id);
      $node_type = $node->type;
    }

    $star_display = variable_get('fivestar_style_'. $node_type, 'average');

    $stars = variable_get('fivestar_stars_'. $node_type, 5);
    switch ($star_display) {
      case 'average':
      case 'dual':
        $star_value = $votes['average']['value'];
        $title = $title_display ? t('Average') : NULL;
        break;
      case 'user':
        $star_value = $votes['user']['value'];
        $title = $title_display ? t('Your rating') : NULL;
        break;
      case 'smart':
        $star_value = $votes['user']['value'] ? $votes['user']['value'] : $votes['average']['value'];
        $title = $title_display ? $votes['user']['value'] ? t('Your rating') : t('Average') : NULL;
        break;
    }

  }
  // Possibly add other content types here (comment, user, etc).
  else {
    $stars = 5;
    $star_value = $votes['average']['value'];
    $user_value = $votes['user']['value'];
    $average_value = $votes['average']['value'];
    $count_value = $votes['count']['value'];
  }

  $star_display = theme('fivestar_static', $star_value, $stars);
  //$text_display = $text_display == 'none' ? NULL : theme('fivestar_summary', $user_value, $average_value, $count_value, $stars, FALSE);

  return theme('ceov_fivestar_static_element', $star_display);
}






/**
 * Implementation of hook_theme().
 */
function ceo_vision_ui_theme() {
  return array(
    'search_radioactivity' => array(
      'arguments' => array('doc' => NULL),
    ),
    'ceov_fivestar_static_element' => array(
      'arguments' => array('value' => NULL),
    ),

    'apachesolr_search_snippets_views' => array(
      'arguments' => array('value' => NULL),
    ),

    'toc_books_display' => array(
      'arguments' => array(
        'tree' => NULL,
        'trail' => NULL,
      ),
    ),

    'email_node_form' => array(
      'arguments' => array('form' => NULL),
      //'file' => 'alfresco.theme.inc',
       'template' => 'alfresco_item_node_form',
    ),

    'book_navigation' => array(
   'arguments' => array('book_link' => NULL),

  ),
      
    'uprofile_node_form' => array(
      'arguments' => array('form' => NULL),
       'template' => 'uprofile_node_form',
    ),
      
    'orga_node_form' => array(
      'arguments' => array('form' => NULL),
      //'file' => 'alfresco.theme.inc',
       'template' => 'orga_node_form',
    ),
     'group_node_node_form' => array(
      'arguments' => array('form' => NULL),
      //'file' => 'alfresco.theme.inc',
       'template' => 'group_node_node_form',
    ),
      'ceo_vision_ui_recently_read_item' => array(
      'arguments' => array('item' => NULL)
     ),
   'comment_form' => array(
       'arguments' => array('form' => NULL),
      //'file' => 'alfresco.theme.inc',
     ),
    'my_content' => array(
    'arguments' => array(),
      //'file' => 'alfresco.theme.inc',
      'template' => 'node-og-group',
      'path' => path_to_theme(),
    ),
    'public_space' => array(
    'arguments' => array(),
      //'file' => 'alfresco.theme.inc',
      'template' => 'node-og-group-public',
      'path' => path_to_theme(),
    ),
     'carousel_tutoriel' => array(
      'arguments' => array("auto" => false),
      //'file' => 'alfresco.theme.inc',
       'template' => 'carousel_tutoriel',
    ),
      
     'activity_tab' => array(
      'arguments' => array("nid" => false),
      //'file' => 'alfresco.theme.inc',
       'template' => 'activity_tab',
    ),
    'activity_tab_public' => array(
      'arguments' => array(),
      //'file' => 'alfresco.theme.inc',
       'template' => 'activity_tab_public',
    ),
      
    'ceo_vision_manage_bulk_members_form' => array(
      'arguments' => array('form' => NULL),
    ),

      
  );
}

function theme_book_navigation($book_link) {
    return ;
}

/**
 * Theme the highlighted snippet text for a search entry.
 *
 * @param object $doc
 * @param array $snippets
 *
 */
function theme_apachesolr_search_snippets_views($doc, $snippets = array()) {
  watchdog('DEBUG', 'SNIP');
    $result = '';
  if (isset($snippets['body'])) {
   //$result .= utf8_encode(htmlspecialchars_decode(htmlspecialchars_decode($snippets['body'])));
   $result .= $snippets['body'];
    unset($snippets['body']);
  }
  if (isset($snippets['teaser'])) {
    $result .= (strlen($result) > 0) ? ' ... ' : '';
    $result .= html_entity_decode($snippets['teaser']);
    unset($snippets['teaser']);
  }
  if (isset($snippets['content_doc'])) {
    $result .= (strlen($result) > 0) ? ' ... ' : '';
    $result .= html_entity_decode($snippets['content_doc']);
    unset($snippets['content_doc']);
  }
  if (isset($snippets['sm_vid_Etiquettes'])) {
    $result .= (strlen($result) > 0) ? ' ... ' : '';
    $result .= t("....Etiquette").": ".html_entity_decode(substr($snippets['sm_vid_Etiquettes'],4)); //l'utilisation de substr est pour enlever les "...." au debut du snippet
    unset($snippets['sm_vid_Etiquettes']);
  }
  $result .= (strlen($result) > 0) ? ' ... ' : '';

  $output = $result . implode(' ... ', $snippets) . ' ...';
  
  $output = ceo_vision_ui_clean_snippet($output);

  //return $result . implode(' ...<br /> ', $snippets) . ' ...';
 return $output;

}


function theme_search_radioactivity($doc) {
   $result=db_result(db_query('SELECT energy FROM {radioactivity} WHERE id = %d', $doc->nid));
   return substr($result,0,5);
}

/**
 * Display a static fivestar value as stars with a title and description.
 */

function theme_ceov_fivestar_static_element($value) {
  $output = '<div style="float:left;margin-left:10px">';
  $output .= $value;
  $output .= "</div><div style='clear:both;'></div>";
  return $output;
}


function gofast_ldapprov_create_ztree_element_validate($form, &$form_state){
  
  $ztree_post = json_decode($_POST['zTree']);
  foreach($ztree_post->ztree_o as $key=>$val) {
      $form_state['values']['og_orga'][strval($key)] = strval($val);
   }
  foreach($ztree_post->ztree_g as $key=>$val) {
      $form_state['values']['og_groups'][strval($key)] =strval($val);
   }
   
}

/*
 * modifie le formulaire de crétion de groupe
 * Ajoute les membres dans og et dans ldap
 */


function ceo_vision_ui_form_alter(&$form, $form_state, $form_id) {
     
  if($form_id == 'gofast_image_form'){
    array_unshift($form['#validate'], 'gofast_image_form_validate');
  }
  
  //on cache le lien de demande de nouveau mot de passe si le sasl est activé
  if($form_id == "user_login_block"){
       if (!$sasl = variable_get('sasl_delegated_authentication', false)) {
        unset($form['links']);
        $form['links'] = array('#type'=>'markup',
                               '#value'=> '<div>' . t("If your account has been blocked, please contact the support") . '</div>',
                               '#weight' => 20);
       }
  }
   
  $types_nodes = node_get_types();
  
  if($form_id=="orga_node_form" || $form_id=="group_node_node_form" ) {
      ceo_vision_resynchro_all_groups_folder_field();
      global $user;
      //verification de droits
       if(!is_manager($user->uid)){
                    $groups_i_am_admin = ceo_vision_is_admin_at_least_one_group($user, "group_node");
                    $orgas_i_am_admin = ceo_vision_is_admin_at_least_one_group($user, "orga");
                    $orgasgroups_i_am_admin = $orgas_i_am_admin + $groups_i_am_admin;
                    if(count($orgasgroups_i_am_admin) == 0 && $user->uid !== "1"){
                          //le user n'est ni manager, ni admin d'au moins un groupe/orga donc forbidden 
                           drupal_access_denied();
                           module_invoke_all('exit');
                           exit();
                    }
       }      
      
      //on surcharge la description du body
      $form["body_field"]["body"]["#title"] = t("Fill this field to create a home page for this group");
      
     //unset($form['#after_build'], $form['#post_render'], $form["body_field"]['#after_build'], $form['buttons']['preview'], $form["body_field"]['teaser_js'], $form["body_field"]['teaser_include']);
     unset($form['body_field']['teaser_include'], $form['body_field']['teaser_js'], $form['#attributes']['enctype']);
     
     // Modifier la hauteur du textarea (CKEditor)
     $form["body_field"]["body"]["#rows"]= 5;

     $node=$form['#node'];
     $nid=$node->nid;
     $title=$node->title;
     $type=$node->type;
     $description=$node->og_description;


     //regénére le groupe s'il a été supprimée dans ldap
     //Recrée le folder du groupe sur alfresco s'il a été supprimée
     if(!is_null($node->title)){
            regenere_group($node);
     }


    //GROUPE ORGA CLOSED GROUP_NODE MODERATED
    if($node->type=='group_node') {
       $node->og_selective=1;
       $form["og_selective"]['#default_value']=1;
    }
    if($node->type=='orga') {
       $node->og_selective=3;
       $form["og_selective"]['#default_value']=3;
    }
   
    
    //Les données du Node à l'affichage du formulaire
     variable_set('node_group',$node);
     variable_set('node_title',$title);
     variable_set('node_description',$description);
     variable_set('form_group',$form_state);

     
  }

  if($form_id=="uprofile_node_form"){    
     unset($form['field_name']);
     unset($form['field_about_me']);
     unset($form['field_birthdate']);
     unset($form["og_nodeapi"]["private_info"]);
     unset($form["og_nodeapi"]["private"]);
     unset($form["og_nodeapi"]["public"]);
  }

  if($form_id == "profile_form_profile"){
      $my_user = user_load($form["#parameters"][1]["uid"]);
      if(!user_view_access($my_user)){
          drupal_access_denied();
           module_invoke_all('exit');
                     exit();
      }
     
      $form['#after_build'][] = 'ceo_vision_ui_profile_form_after_build'; //Calls function
      $form['Données d\'Annuaire']['profile_title']["#required"]= 0;     
  }

  if ($form_id=='ldapprov_create') {
//        debug_page($form); exit;
      //Recupère l'organisation principale du manager dans ldap
       $ldapinfos=get_ldap_infos();
       $dc1=$ldapinfos['dc1'];
       $dc2=$ldapinfos['dc2'];
       $uid_manager=$GLOBALS['user']->name;
       $dn='uid='.$uid_manager.',ou=people,'. $dc1.','. $dc2.'';
       $_ldapdata_ldap=$ldapinfos['ldapdata_ldap'];
       $infos_manager = $_ldapdata_ldap->retrieveAttributes($dn);
       $orga_manager=$infos_manager['ou'];
      // Là je recupère les admin dans ldap
       $ids=array();
       if ($orga_manager!==null){
         foreach ($orga_manager as $key=>$value){
           if ($key!=='count') {
              $organizations[$value]=$value;
              //get orga id
              $result=db_query("select nid from node where title='$value'");
              $row= db_fetch_object($result);
              $id=$row->nid;
              array_push($ids, $id);
           }
         }
       }
       //Recupère les organisations du manager
       $user=$GLOBALS['user'];
       $og_groups=$user->og_groups;
       $depts=array();
       $json_orga_data = array();
       $cid = null;
       $gofast_og_data = array();
       //on créer le tableau $depts qui contient les orga formatté en prenant compte des sous-orga et classé par ordre alphabetique
       
       //on recupere $groups_i_am_adminles groupes/orga dont on est administrateur
       $groups_i_am_admin = ceo_vision_is_admin_at_least_one_group($user);
       foreach ($og_groups as $k1=>$v1){
           if (ceo_vision_has_permission_access_group($k1) && isset($groups_i_am_admin[$k1])){
             if($v1['type'] == 'orga'){
                 $context_node = node_load($k1);
                 $parents = og_subgroups_get_group_parents($context_node);
                 //$parents= array_reverse($parents, true);
                 if(count($parents) != 0){

                     foreach ($parents as $key=>$parent) {
                         $parent_node = node_load($key);
                         if ($cid != $k1) array_push($json_orga_data, array('id'=>$k1, 'pId'=>$parent_node->nid, 'name'=>$v1['title'], 'nocheck'=>false));
                         $v1['title'] = $parent_node->title." / ".$v1['title'];
                         $cid = $k1;
                     }
                 }
                 else array_push($json_orga_data, array('id'=>$k1, 'pId'=>0, 'name'=>$v1['title'], 'nocheck'=>false));
                 
                 if (in_array('manager', array_values($user->roles))){
                     $depts[$k1]=$v1['title'];
                  }
                  else{
                     if(isset($groups_i_am_admin[$k1])){
                         $depts[$k1]=$v1['title'];
                     } 
                  }
             }
         }
       }
       natcasesort($depts);

       $gofast_og_data['orga'] = $json_orga_data;
       $json_orga_data = json_encode($json_orga_data);

       //on modifie le tableau des groupes pour contenir les groupes formatté en prenant compte des sous-groupes et classé par ordre alphabetique
       $mygroups = $form['options']["og"]["og_groups"]["#options"];

//       reset($mygroups);
//      $key = key($mygroups);
//      unset($mygroups[$key]);

       $formatted_groups = array();
       $json_groups_data = array();
       $cid = null;
       if (count($mygroups) > 0){
             foreach ($mygroups as $k2=>$v2){
                 if (ceo_vision_has_permission_access_group($k2)){
                     $context_node = node_load($k2);
                     $parents = og_subgroups_get_group_parents($context_node);
                     //$parents= array_reverse($parents, true);
                     if(count($parents) != 0){

                         foreach ($parents as $key=>$parent) {
                             $parent_node = node_load($key);
                             if ($cid != $k2) array_push($json_groups_data, array('id'=>$k2, 'pId'=>$parent_node->nid, 'name'=>$v2));
                             $v2 = $parent_node->title." / ".$v2;
                             $cid = $k2;
                         }
                     }
                     else array_push($json_groups_data, array('id'=>$k2, 'pId'=>0, 'name'=>$v2));
                     $formatted_groups[$k2]=$v2;  
              }
            }
       }
       natcasesort($formatted_groups);

       drupal_add_js(drupal_get_path('module', 'ceo_vision_ui'). '/ceo_vision_ztree_og.js');
       $ztree_container = "<div id='gofast_ztree_og'><div id='gofast_ztree_o_container' style='float:left;'><label>" . t('Organisations') . " : </label><div id='gofast_ztree_o' class='ztree'></div></div><div id='gofast_ztree_g_container' style='float:left;'><label>" . t('Groups') . " : </label><div id='gofast_ztree_g' class='ztree'></div></div>";
       $form['options']["og"]["og_groups"]["#options"] = null;
       $form['options']["og"]["og_groups"]["#title"] = '';
       $form['options']["og"]["og_groups"]["#description"] = '';
       $form['options']["og"]["og_groups"]["#prefix"] = $ztree_container;       
       $form['options']['og']['#weight'] = 30;
//variable_set('aaatest', $form);

       $gofast_og_data['groups'] = $json_groups_data;
       $json_groups_data = json_encode($json_groups_data);

       $settings = array('orga_data' => $json_orga_data, 'group_data' => $json_groups_data);

       drupal_add_js(array('gofast_ztree_og' => $settings), 'setting');
       $form['options']['zTree'] = array('#type' => 'hidden', '#value' => NULL);
          

        // On eneleve le role admin
        unset ($form['ldapprov_roles']['roles']['#options'][6]);
        

        $form['options']['infosLdap']['donneesAnnuaire'] = array(
            '#type' => 'fieldset',
            '#title' => t('Profile data')
        );


       $form['options']['infosLdap']['donneesAnnuaire']['profile_title']=array(
            '#type' => 'textfield',
            '#title' => t('Title'),
            '#default_value' => '',
            '#size' => 60,
            '#maxlength' => 128,
            '#required' => FALSE,
        );

        $form['options']['infosLdap']['donneesAnnuaire']['profile_organisation_unit']=array(
            '#type' => 'select',
            '#title' => t('Organisation'),
            '#default_value' => array(),
            '#options' => $depts,
            '#default_value'=> array(),
            '#description' => t('Add user in an organisation.'),
            '#attributes'=>array('class' => 'the-orgas'),
        );

        $form['options']['infosLdap']['donneesAnnuaire']['profile_manager']=array(
            '#type' => 'select',
            '#title' => t('Manager'),
            '#default_value'=>array(),
            '#options' => getAllManagers(),
            '#description' => t('Choose the manager.'),
        );

        $form['options']['infosLdap']['donneesAnnuaire']['profile_phoneNumber']=array(
            '#type' => 'textfield',
            '#title' => t('Phone number'),
            '#default_value' => '',
            '#size' => 60,
            '#maxlength' => 16,
            '#required' => FALSE,
        );

        $form['options']['infosLdap']['donneesAnnuaire']['profile_mobile']= array (
            '#type' => 'textfield',
            '#title' => t('Mobile number'),
            '#default_value' => '',
            '#size' => 60,
            '#maxlength' => 16,
            '#required' => FALSE,
        );

        $form['options']['infosLdap']['donneesAnnuaire']['profile_organisation'] = array(
            '#type' => 'textfield',
            '#title' => 'Entreprise',
            '#default_value' => '',
            '#maxlength' => '255',
            '#description' => '',
            '#autocomplete_path' => 'profile/autocomplete/17',
        );

        $form['og_register']['og_register']["#prefix"] = "<div style='float:left;margin-left: 35px;'>";
        $form['og_register']['og_register']["#suffix"] = "</div>";
        $form['og_register']['og_register']['#title'] = t('Groupsss');
        $form['og_register']['og_register']['#size'] = 8;
        
        gofast_form_ldapprov_create_alter($form);
        
        $form["options"]["og"]["#collapsed"] = 0;
        
        $form["options"]['ldapprov_roles'] = $form['ldapprov_roles'];
        unset($form['ldapprov_roles']);
       
        $form['options']['infosLdap']['#weight'] = '4';
        
        
        
        
        $form["ldapprov_messages"]["#collapsible"] = 1;
        $form["ldapprov_messages"]["#collapsed"] = 1;
        $form["ldapprov_notes"]["#collapsible"] = 1;
        $form["ldapprov_notes"]["#collapsed"] = 1;
        $form["ldapprov_options"]["#collapsible"] = 1;
        $form["ldapprov_options"]["#collapsed"] = 1;
        array_unshift($form['#validate'], 'gofast_ldapprov_create_ztree_element_validate');
        array_unshift($form['#validate'], 'gofast_form_ldapprov_create_validate');
    }

   
   
   if($form_id== $form['#node']->type.'_node_form'){
       
       if(isset($form["field_document_author"])){
           $field_document_author_name = content_fields("field_document_author", "alfresco_item");
           $form["field_document_author"][0]["#title"] = t($field_document_author_name["widget"]["label"]);
           $form["field_document_author"][0]["#autocomplete_path"] = "ogmembers/user-name-autocomplete-free/0";
           
          // print_r($form["field_document_author"]);exit;
           $form["field_document_author"][0]["#weight"] = 0;
       }
       
       //on augmente la taille maxi du champs de taxo keywords
       $form['taxonomy']['tags'][8]['#maxlength'] = 2048;
      
       //$form['#attributes'] = array('onsubmit' => 'return false');
       if(ceo_vision_is_read_only_node($form['#node']) && $form['#node']->nid != ""){
            //drupal_access_denied();
            //module_invoke_all('exit');
            //exit();
       }
       //variable_set("debug_alfresco_emplacement", $form);
       unset($form["flag"]);
       //on enleve le label title en mode edition
       $node=$form['#node'];
       $nid=$node->nid;
       if($nid != ""){
        $form['title']["#title"]= "";
       }
        //on remplace le bouton supprimer par un bouton annuler
       unset($form["buttons"]["delete"]);
       $title = t("Cancel");
       $ht = url("node/".$form['#node']->nid,  array('absolute' => TRUE));
       $form["buttons"]["cancel"] = array(
            '#type'=>'markup',
            '#value'=> '<span class="form-button">' . l($title, $ht, array('html' => TRUE)) . '</span>',
            '#weight' => 20,
       );
       
       /* print_r("<pre>");
        print_r($form);
        print_r("</pre>");
*/

         if (!empty($node->revision) || user_access('administer revision') && $form['#node']->type != "group_node" && $form['#node']->type != "orga") {

             $form['revision_information'] = array(
                   '#type' => 'fieldset',
                   '#title' => t('Revision information'),
                   '#collapsible' => TRUE,
                   // Collapsed by default when "Create new revision" is unchecked
                    '#collapsed' => !$form['#node']->revision,
                    '#weight' => 20,
                   '#attributes' => array('id' => 'fieldset_revisions'),
             );
             $form['revision_information']['revision'] = array(
                  '#access' => user_access('administer revision'),
                  '#type' => 'checkbox',
                  '#title' => t('Create new revision'),
                  '#default_value' => $form['#node']->revision,
             );
             $form['revision_information']['log'] = array(
                  '#type' => 'textarea',
                  '#title' => t('Log message'),
                  '#default_value' => (isset($form['#node']->log) ? $form['#node']->log : ''),
                 '#rows' => 2,
                 '#description' => t('An explanation of the additions or updates being made to help other authors understand your motivations.'),
             );

             //on ajoute une checkbox pour tager une version majeur du noeud
            $form['revision_information']['majeur'] =
                 array(
                    '#type'=>'checkbox',
                    '#title' => t('Tag this document as major version'),
                    '#weight' => 1,
                   );
            $form['revision_information']['log']['#weight'] = 2;
            $form['revision_information']['#collapsed'] = 0;
            $form['revision_information']['#title'] = t("Revisions management");
        }

        if(isset($form["book"]["plid"]) && isset($form['#node']->nid) && $form["book"]["plid"]["#value"] != -1 && user_access("administer book outlines") === TRUE){
            $ht = url("node/".$form['#node']->nid."/outline/remove",  array('absolute' => TRUE));
            //$title="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/delete.png ' width='16px' height='16px' alt='French' title='".t("Remove from the book")."' >";
             $title = "<i class='icon-trash icon-large' title='".t("Remove from the book")."'></i>";
            $form["book"]["button_delete"] =
                array(
                '#type'=>'markup',
                '#value'=>l($title, $ht,array('attributes' => array("class" => "popups-form-reload"), 'html' => TRUE)),
               // '#prefix'=>'<div id="div_refresh_list">',
                //'#suffix'=>'</div>',
                '#weight' => 10,);
        }

        $form["body_field"]["#title"] = t("You can press Ctrl+ right click on a word to access the dictionnary");
        //si le noeud est un document, on restreint la liste des livres pour garder une cohérence dans les groupes
        if($form['#node']->type == "alfresco_item"){
           foreach($form['book']['bid']['#options'] as $key=>$book){
               if($key !== 0){
                   $node_book = node_load($key);
                   $groupe_commun = ceo_vision_get_groupe_commun($form['#node'], $node_book);
                    if(count($groupe_commun) == 0){
                        //unset($form['book']['bid']['#options'][$key]);
                    }
               }
           }
           
//            /* Bugfix : Duplicate Teaser/Body */
//            // Replace carriage return to compare properly teaser against body
//            $form_text = $form['body_field']['body']['#default_value'] = str_replace("\r", '', $form['body_field']['body']['#default_value']);
//            $teaser = str_replace("\r", '',$form['#node']->teaser);
//            $body = str_replace("\r",'',$form['#node']->body);
//            // Compare strings
//            if($form_text == $body.$body) {
//              // Found duplicate. Reset textfield value.
//              $form['body_field']['body']['#default_value'] = $body;
//            }
            
            // Ajouter une fonction de validation pour les documents
            $form['#validate'][] = 'ceo_vision_alfresco_item_validation';
            // array_unshift($form['#validate'], 'ceo_vision_alfresco_item_validation');
            
            //on theme un peu differement le champs file
            //$prefix .= "<div style='float:right;margin-top:20px;width:250px;'>"; 
            //$suffix = "</div>";
            
           $form['document']['reference2']["#prefix"] = ceo_vision_return_html_help_hidden($file_help_html_title, $file_help_html, "top", "edit-reference-wrapper", "-80", "10", "absolute", "middle"); 
            
           $description_emplacement  = "<div style='font-size:85%; margin-top:-5px; margin-left:40%; padding:0 5px 5px;'>" . t("You can drag&drop a file from your computer directly on a folder") . '. ';
           $description_emplacement .= t("Or you can select a file, then double-click on a folder to select it.") . ' ';
           $description_emplacement .= $form['document']['reference2']['#description'] . ".</div>";
           $form['document']['reference2']["#suffix"] = $description_emplacement;
           $form['document']['reference2']['#attributes']['style'] .= ' float:left;';
           unset($form['document']['reference2']['#description']);
           
            //on créer un fieldset (pour regrouper les champs)
            $form['resume']=array(
            '#type' => 'fieldset',
            '#title' => t("Summary"),
            //'#description' => t('Create document'),
            '#collapsible' => true,
            '#collapsed' => false,
            '#attributes' => array('class' => 'resume-fieldset-form'),
            '#prefix'=>'<span id="fieldset_resume" style="display:none">',
             '#suffix'=>'</span>',
            );
            
            $form['resume']["body_field"] = $form['body_field'];
              
            unset($form['body_field']);
            
        }
        
        
        // WebForm / Form Builder
        if($form['#node']->type == 'webform'){
            // New webform ?
            if(empty($form['nid']['#value'])){
            
                $form['buttons']['submit']['#value'] = t('Next step');
                // Se souvenir que c'est une création (Steps) -> callback
                $form['#validate'][] = 'ceo_vision_webform_new';
            }else{
            }
        }

        //on cache le champs number_version
        $form['field_number_version']['#prefix'] ='<span style="display:none;">';
        $form['field_number_version']['#suffix'] ='</span>';

        

        //gestion des liens entre noeuds
        $form["group_links"]["field_target_link"]["#title"] = t("Links");
        $form["group_links"]["field_target_link"]["#description"] = t("Create links from this content to other");

         //gestion des liens externes
        $form["group_links"]["field_target_link_url"]["#title"] = t("External Links");
        $form["group_links"]["field_target_link_url"]["#description"] = t("Create links from this content to external web pages");
        
        
        
        //si présence dans l'url d'une deadline, je remplis le champs
        if(isset($_GET["deadline"])){
            $deadline = $_GET["deadline"];
            $form["field_date"][0]["#default_value"]["value"] = $deadline; 
        }
        
        
        
        
   }

   
//   //Modification du formulaire de gestion des abonnements
//   if($form_id == 'notifications_manage_user_subscriptions'){
//       
//       if(count($form['admin']['description']) != 0){
//         foreach($form['admin']['description'] as $key=>$description){
//            foreach($form['#parameters'][2]->og_groups as $group){              
//                //si dans la description de l'abonnement, on retrouve le nom d'un groupe auquel le user appartient, suivit d'une virgule
//                if(strstr($description['#value'],$group['title'].',') != FALSE && $form['admin']['type'][$key]['#value'] == 'Groupe'){
//                    //on enleve le nom du groupe et la virgule pour ne garder que le type de document
//                    $new_description = str_replace($group['title'], "", $description['#value']);
//                    $new_description = str_replace(",", "", $new_description);
//                    //on ajoute un s a la fin
//                    $new_description = $new_description."s";
//                    //on remet le nom du groupe a la fin
//                    $new_description = t("All the")." ".$new_description." ".t("in the group")." ".$group['title'];
//                    //on remplace la description par la nouvelle
//                    $form['admin']['description'][$key]['#value'] = $new_description;
//
//                }
//
//            }
//            
//         }
//       }   
//       
//        //on remplace les actions par des icones
//       if(count($form['admin']['operations']) != 0){
//        foreach($form['admin']['operations'] as $key=>$operation){
//            if(strstr($operation['#value'],'abandonner') != FALSE){
//               $title = t('unsubscribe');
//               $title2=t('edit');
//               if($form['admin']['type'][$key]['#value'] == "Author" || $form['admin']['type'][$key]['#value'] == "Auteur"){
//                   $src = "/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/unsubscribe_user.png";
//               }else{
//                   $src = "/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/unsubscribe.png";   
//               }
//               $src2 = "/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/edit.png";
//               $new_operation = str_replace('abandonner', "<img src='".$src."' width='16px' height='16px' alt='supprimer' title=\"$title\" >", $operation['#value']);
//               $new_operation = str_replace('Modifier', "<img src='".$src2."' width='16px' height='16px' alt='edit' title=\"$title2\" >", $new_operation);
//               $new_operation = str_replace('<a ', "<a class='popups-form' ", $new_operation);
//               $form['admin']['operations'][$key]['#value'] = $new_operation;
//            }
//            if(strstr($operation['#value'],'drop') != FALSE){
//               $title = t('unsubscribe');
//               $title2=t('edit');
//               if($form['admin']['type'][$key]['#value'] == "Author" || $form['admin']['type'][$key]['#value'] == "Auteur"){
//                   $src = "/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/unsubscribe_user.png";
//               }else{
//                   $src = "/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/unsubscribe.png";
//               }
//               $src = "/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/unsubscribe.png";
//               $src2 = "/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/edit.png";
//               $new_operation = str_replace('drop', "<img src='".$src."' width='16px' height='16px' alt='supprimer' title=\"$title\" >", $operation['#value']);
//               $new_operation = str_replace('edit</a>', "<img src='".$src2."' width='16px' height='16px' alt='edit' title=\"$title2\" ></a>", $new_operation);
//               $new_operation = str_replace('<a ', "<a class='popups-form' on-popups-options=\"{hijackDestination: false}\" ", $new_operation);
//               $form['admin']['operations'][$key]['#value'] = $new_operation;
//            }
//        }
//
//      }
//       
//   }

   //Modification du formulaire de gestion des Result biasing de solr

   if($form_id == 'apachesolr_search_bias_form'){

       //$form['biasing']['apachesolr_search_changed_boost']['#description'] = t('This setting will change the result scoring so that nodes with the most recent comments (or most recent updates to the node itself) and a higher popularity may appear before those with higher keyword matching.');
       //$form['biasing']['apachesolr_search_changed_boost']['#title'] = t("More recent comments and popularity");
       $form["result_bias"]["apachesolr_search_changed_boost"]['#description'] = t('This setting will change the result scoring so that nodes with the most recent comments (or most recent updates to the node itself) and a higher popularity may appear before those with higher keyword matching.');
       $form["result_bias"]["apachesolr_search_changed_boost"]['#title'] = t("More recent comments and popularity");
      
   }

   // Fil d'activité
   if($form_id == 'views_exposed_form' && $form["#id"] == "views-exposed-form-og-tracker-ceo-vision-block-3"){
      // Persistance : if cookie is set, pre-fill form field :
      form_init_from_cookie($form, $_COOKIE['contentsActivity_formState']);
   }
   
    if($form_id == "views_exposed_form" &&  $form["#id"] == "views-exposed-form-ceov-og-members-block-block-1"){

         $form["uid_1"]["#autocomplete_path"] = "ogmembers/user-name-autocomplete/0";
         $form['#attributes'] = array('onsubmit' => 'return false');
//                 print_r("<pre>");
//        print_r($form);
//        print_r("</pre>");exit;
    }
   
 /*  
  if ($form_id== 'apachesolr_search_custom_page_search_form') {
     
    $form['#prefix'] = '<div class="container-inline">';
    $form['#suffix'] = '</div>';
            
    //on recupere les champs serialisés dans le cookie
    $cookie_search_parameters = $_COOKIE["searchparameters_formState"];
//    print_r('<pre>');
//    print_r($cookie_search_parameters);
//    print_r('</pre>');
//    EXIT;
    $cookie_array = explode("&",$cookie_search_parameters);
    //si le champs restrict vaut 1, on met la valeur par defaut du champs
    $default_value = "0";

    foreach ($cookie_array as $key => $cookie_value) {
        if ($cookie_value == "restrict=1") {
            $default_value = "1";
        }
    }
    $form["basic"]["inline"]["restrict"] = array (
      "#type" => "radios",
      "#weight" => "5",
      "#prefix" => "<span style='vertical-align:middle;'>",
      "#suffix" => "</span>",
      "#title" => "",
      "#default_value" => $default_value,
      "#options" => array("0" => t("Search in all content"), "1" => t("Only in title")),
    );
    
    $form["basic"]["keys"]['#title'] = '';
    $form["basic"]["keys"]["#attributes"]['title'] = t('Append "*" to a keyword to match every terms beginning with this keyword. Prepend "+" to keyword to make it mandatory.'); //"* en fin de mot incomplet, + pour les mots obligatoires";
    $form["basic"]["keys"]["#size"] = '50';
  }
  */   
   
   if($form_id == "form_builder_webform_save_form"){
       //on enleve le bouton annuler
       unset($form["actions"]["cancel"]);
       
       $node = node_load($form["nid"]["#value"]);
       
       $form["actions"]["save2"] = $form["actions"]["save"];
       $form["actions"]["save2"]["#value"] = t("Submit");
       $form["actions"]["save2"]["#submit"]= array(0 => "ceo_vision_form_builder_webform_finalise");
       //on renomme le bouton enregistrer et on ne l'affiche que si le formulaire n'est pas encore publié
       if($node->webform["status"] == 0){
          
           //variable_set("debug_webform_form", $form_state);
            $form["actions"]["save"]["#value"] = t("Save draft");
            if(!isset($form_state["post"]["op"])){
                //si le formulaire n'est pas ouvert je met un message pour alerter la personne qui est en train de le modifier
                drupal_set_message(t('Your form is closed. Click to "Submit" to save and open it'), 'error');
            }
       }else{
            unset($form["actions"]["save"]);
       }
       
       /*print_r("<br /><br /><br /><br /><br /><br /><br /><pre>");
       print_r($node->webform["status"]);
       print_r("</pre>");*/
   }
   
   if($form_id == "webform_configure_form"){
       //on met l'état fermé par défault lors de la creation
       //unset($form["actions"]["cancel"]);
       /*$form["submission"]["status"]["#default_value"] = 0 ;
       print_r("<br /><br /><br /><br /><br /><br /><br /><pre>");
       print_r($form);
       print_r("</pre>");*/
   }
   
   return $form;
 }


/**
 * Implements hook_nodeapi()
 * Création ou modification des groupes ldap à partir du formulaire création de groupe
 * Ajout,suppression de membres et de managers
 */



function ceo_vision_ui_nodeapi(&$node, $op) {

   require_once(drupal_get_path('module', 'ldapdata') .'/includes/LDAPInterface.inc');
   if($node->type=='group_node'||$node->type=='orga') {
      if($op != "load"){
            //Paramètres ldap
            $res=db_query("select sid from ldapauth");
            $row=db_fetch_object($res);
            ldapdata_init();
            $_ldapdata_ldap= _ldapdata_init($row->sid);
            $server=$_ldapdata_ldap->server;
            $ch_basedn=$_ldapdata_ldap->basedn;
            $ch_basedn=split(",", $ch_basedn);
            $dc1=$ch_basedn[1];
            $dc2=$ch_basedn[2];
            $bind_infos=_ldapdata_edition($row->sid);
            $ldaprdn=$bind_infos['dn'];
            $ldappass = $bind_infos['pass'];
            $ldapconn= $_ldapdata_ldap->connectAndBind($ldaprdn, $ldappass);

            $dn='uid='.$node->name.',ou=people,'.$dc1.','.$dc2.'';

            $userPassword=$_ldapdata_ldap->retrieveAttribute($dn,'userPassword');

            try{
                //Paramètre Alfresco
                $repositoryId=alfresco_getRepository();
                $parentPath = get_folder_path_alfresco($node->title,true,$node->type);

                $repo=cmisapi_getObjectByPath($repositoryId, $parentPath);
                $folderId=$repo->id;
            } catch (CMISException $e) {

            }

      }

     switch ($op) {

       case 'insert':
            //on ajoute le user "adm" en tant que manager du groupe, quoi qu'il arrive
             og_save_subscription($node->nid, ceo_vision_ui_get_id_subadmin(), array('is_active' => 1, 'is_admin' => 1));

           //on rajoute l'auteur comme membre (pour contourner un bug qui ne le créer pas dans ldap)
             og_save_subscription($node->nid, $node->uid, array('is_active' => 1, 'is_admin' => 1));

             $groupe_name = get_group_title_from_id($node->nid);
             /*$dn='cn='.$groupe_name.',';

              if(get_node_type_from_id($node->nid) == 'orga'){
                 $dn.= 'ou=orga,';
              }
              
              $dn.='ou=groups,'. $dc1.','. $dc2.'';*/
              
              $dn = ceo_vision_get_ldap_dn($node,$dc1,$dc2);

              //on recupere la liste des membres actuels pour créer la liste des membres sur ldap
              $members=get_members_group($node->nid);

              foreach($members as $member){
                  //on le rajoute a la nouvelle liste sur ldap
                  $attributes['member'][]='uid='.$member.',ou=people,'.$dc1.','.$dc2;
                  
                  //on construit le tableau des administrateurs de ce groupe
                  $member_account =  user_load(array('name' => trim($member)));
                  if(og_is_group_admin($node, $member_account)){
                     $attributes_admin['member'][]='uid='.$member.',ou=people,'.$dc1.','.$dc2; 
                  }
              }        

             //on enregistre la nouvelle liste de membres dans le groupe ldap
              $_ldapdata_ldap->writeAttributes($dn,$attributes);
              
              //CEO-VISION READONLY
              //on construit le dn du sous groupe STANDARD
              $infos_standard = ceo_vision_get_ldap_infos_standard($node, $dn);
              $infos_admin = ceo_vision_get_ldap_infos_admin($node, $dn);
              
               $valeurs['objectClass'][0]="groupOfNames";
               $valeurs['objectClass'][1]="top";
               $valeurs['description']=$infos_standard["description"] ;
               $valeurs['cn']=$infos_standard["titre"];
               $valeurs['member']='uid=admin,ou=people,'.$dc1.','.$dc2.'';
               $_ldapdata_ldap->create_entry($infos_standard["dn"], $valeurs);
               
                       
               $valeurs['objectClass'][0]="groupOfNames";
               $valeurs['objectClass'][1]="top";
               $valeurs['description']=$infos_admin["description"] ;
               $valeurs['cn']=$infos_admin["titre"];
               $valeurs['member']='uid=admin,ou=people,'.$dc1.','.$dc2.'';
               $_ldapdata_ldap->create_entry($infos_admin["dn"], $valeurs);
                
              $_ldapdata_ldap->writeAttributes($infos_standard["dn"],$attributes);
              $_ldapdata_ldap->writeAttributes($infos_admin["dn"],$attributes_admin);
              
              

       break;
       case 'presave':
           //on force sa taxonomie format
            $node = ceo_vision_force_taxonomy_format($node);
           
           //si son champs folder_reference est vide, on le remplit
           if($node->field_folder_reference[0]["value"] == "" &&  $node->integrity !== true){
                $path = get_folder_path_alfresco($node->title,false,$node->type, $node, true);
                 //variable_set("cmis_sudo_admin", true);
                global $cmis_sudo_admin;
                $cmis_sudo_admin = true;
                $obj_fold=cmisapi_getObjectByPath($repositoryId, $path);
                 //variable_set("cmis_sudo_admin", false);
                $cmis_sudo_admin = false;
                $node->field_folder_reference[0]["value"] = $obj_fold->id;
           }
            //si update d'un noeud
           if(isset($node->nid) &&  $node->integrity !== true){
                //on remet le groupe ou orga dans la bonne hierarchie sur ldap
               $old_node = node_load($node->nid);
               $ldap_moved = ceo_vision_move_ldap_object_hierarchy($node, $old_node);
               //si la hierarchie ldap a été modifié, il doit en etre de même pour l'arborescence alfresco
               if($ldap_moved === true){
                   ceo_vision_move_subgroup_folder_hierarchy($node, $old_node, true);
               }
               
               
           }
           
           if( $node->integrity == true){
               unset( $node->integrity);
           }
       break;  
       case 'update':
          //s le groupe qui vient d'etre modifié a été mis dans un nouveau parent, on rajoute dans ce parent (on remonte jusqu'en haut de la hierarchie) les membres qui n'existaient pas encore
           ceo_vision_propagate_members_update_group($node);
       break;
       case 'validate':
            //avant toute chose on verifie si le nom du groupe ne contient aucun caractere indesirable
            if(preg_match('/^([a-zA-Z0-9ÁÀÂÄÉÈÊËÍÌÎÏÓÒÔÖÚÙÛÜáàâäéèêëíìîïóòôöúùûüÇç_\s\-\.&]*)$/', $node->title) === 0){
                form_set_error("title", t("Only letters, numbers, spaces, and symbols -&_. are allowed"));
                return;
            }
            
            //on verifie la presence d'un eventuel espace a la fin
            if(substr($node->title, -1) === " "){
                form_set_error("title", t("The title cannot end by space"));
                return;
            }     
            
            //on verifie si le nom du groupe commence par un . Si oui on ne valide pas car bug ALfresco
            if($node->title[0] == "."){
               form_set_error("title", t("The name cannot start by ."));
               return; 
            }
              
            if(ceo_vision_has_nomenclature_subgroup_title($node->title)){
                form_set_error("title", t("You can't name this group with the same identifier caractere than subspaces"));
                return;
            }
            
            
            //on verifie si un autre groupe/orga existe deja avec ce même nom. Si oui je l'empeche
            $already_exists = ceo_vision_group_already_exist($node);
            
            if($already_exists == true){
                form_set_error("title", t("An other group or organisation already exists with this name"));
                return;
            }
            
              //on ajoute le user "adm" en tant que manager du groupe, quoi qu'il arrive
            // og_save_subscription($node->nid, ceo_vision_ui_get_id_subadmin(), array('is_active' => 1, 'is_admin' => 1));
              
            //Ancienne données du node
             $old_node=variable_get('node_group','');
             variable_del('node_group');
             $old_group_name= variable_get('node_title','');

             $old_description=variable_get('node_description','');
             $old_valuesForm= variable_get('form_group','');
             variable_del('form_group');
             $deja_membres=get_members_group($node->nid);
             $deja_managers=getAdminsById($node->nid);

             //Les membres à rajouter
             $new_users=$_POST['les_membres2'];
             
             //Les Managers à rajouter
             $les_managers=$_POST['les_managers'];
             //Les Membres à supprimer
             $msupprimes=$_POST['add_users_2'];

             $new_group_name=$node->title;
             $new_description=$node->og_description;
             //Renommer le groupe dans alfresco

             //on verifie si l'utilisateur a changé le nom du gorupe/orga. Si oui, je verifie si ce groupe/orga possède des sous groupes/orgas. Si oui je l'interdit
            //(car pour l'instant problème ldap on ne peut pas renommer un element avec des enfants)
             if($new_group_name != $old_group_name && $old_group_name !=''){
                 //on verifie si ce groupe/orga possède des enfants. Si oui je ne valide pas le formulaire
                 //on recupere l'arborescence du groupe
                  $children = og_subgroups_get_group_children($node, FALSE);
                  if(count($children) != 0){
                       //form_set_error("title", t("You can't rename a group or orgnaisation which have children"));
                       //return;
                  }
             }
             
               if($node->type=='group_node') {

                   if($new_group_name!==$old_group_name || $new_description!==$old_description) {
                    //C'est un nouveau groupe
                     if($old_group_name=='') {

                       //créer le groupe dans Alfresco
                       //  create_group_alfresco($node->title,$node->og_description,$server);

                       //créer le groupe dans ldap
                       //$dn_new='cn='.$node->title.', ou=groups,'. $dc1.','. $dc2.'';
                       $dn = ceo_vision_get_ldap_dn($node,$dc1,$dc2,true);
                     
                       $valeurs['objectClass'][0]="groupOfNames";
                       $valeurs['objectClass'][1]="top";
                       $valeurs['description']=$node->og_description ;
                       $valeurs['cn']=$node->title;
                       $valeurs['member']='uid=admin,ou=people,'.$dc1.','.$dc2.'';
                       $_ldapdata_ldap->create_entry($dn, $valeurs);

                       if($node->title && $node->og_description) {
                       //Créer le folder du groupe
                      ceo_vision_create_alfresco_folder($node);

                             header('Location:/node/'.$node->nid);
                       }else {break;}


                   }elseif(($new_group_name!==$old_group_name && $new_group_name!=='') || ($new_description!==$old_description && $old_description!=='')) {
                          
                          $path=get_folder_path_alfresco($old_group_name,false,$node->type, $node);
                          
                       
                          //og_update_group($node);

                          //Renommer le folder sur Alfresco
                          //update_name($old_group_name,$node->title,$repositoryId,$folderId);

                          try
                          {  
                            $obj_fold=cmisapi_getObjectByPath($repositoryId, $path);
                          }
                          catch (CMISException $e) {
                              
                                $query = "SELECT * FROM cmis:folder where cmis:name = '".$old_group_name."'";
                                $query_result = cmisapi_query($repositoryId, $query);
                                foreach($query_result->objectList as $result)
                                {
                                    
                                        if($result->properties['cmis:path'] === $path)
                                        {
                                                $obj_fold= cmisapi_getObject($repository->repositoryId, $result->properties['cmis:objectId']);
                                        }
                                 }
                          }
                  
                            //si le dossier n'existe pas (problème lors de la création?) on le créer avec le nouveau nom
                            if(isset($obj_fold->id)){
                                $objectId=$obj_fold->id;
                                if(isset($node->og_parent) && $node->og_parent != "0"){
                                    $subgroup = true;
                                     $new_group_name_with_nomenclature = ceo_vision_add_nomenclature_subgroup_title($new_group_name);
                                }else{
                                    $new_group_name_with_nomenclature = $new_group_name;
                                }
                                $properties=array('cmis:name'=>$new_group_name_with_nomenclature);
                                //variable_set("cmis_sudo_admin", true);
                                global $cmis_sudo_admin;
                                $cmis_sudo_admin = true;
                                cmisapi_updateProperties($repositoryId, $objectId, $properties);
                                //variable_set("cmis_sudo_admin", false);
                                $cmis_sudo_admin = false;
                            }else{
                                    //Créer le folder du groupe
                                    //variable_set("cmis_sudo_admin", true);
                                    //global $cmis_sudo_admin;
                                    //$cmis_sudo_admin = true;
                                    //cmisapi_createFolder($repositoryId, $folderId, $node->title);
                                    //variable_set("cmis_sudo_admin", false);
                                    //$cmis_sudo_admin = false;
                                    //Créer le folder du groupe
                                   ceo_vision_create_alfresco_folder($node);
                            }
                          //Supprimer le groupe correspondant sur alfresco sinon double replication par ldap
                          delete_group_alfresco($old_group_name,$server);
                          
                          //Renommer sur Ldap
                          //$OLDdn='cn='.$old_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                          $OLDdn=ceo_vision_get_ldap_dn($old_node,$dc1,$dc2);
                          $NEWRdn = 'cn='.$new_group_name.'';
                          
                          //$NEWParent = 'ou=groups,'. $dc1.','. $dc2.'';
                          $NEWParent = ceo_vision_get_parent_ldap_dn($node,$dc1,$dc2);
                          //$dn='cn='.$new_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                          $dn = ceo_vision_get_ldap_dn($node,$dc1,$dc2);
                          //Voir si le groupe existe bien dans ldap
                          $gldap=$_ldapdata_ldap->retrieveAttributes($OLDdn);

                          if(is_null($gldap)) {
                               //Mettre à jour le folder Alfresco
                                //$obj_fold=cmisapi_getObjectByPath($repositoryId, '/Sites/'.$old_group_name);
                                $objectId=$obj_fold->id;
                                $properties=array('cmis:name'=>$new_group_name);
                                global $cmis_sudo_admin;
                                $cmis_sudo_admin = true;
                                cmisapi_updateProperties($repositoryId, $objectId, $properties);
                                $cmis_sudo_admin = false;

                                create_group_notExistInLdap($_ldapdata_ldap,$node,$dn,$dc1,$dc2);
                                drupal_set_message(t('This group doesn\'t exist in LDAP'));
                                break;
                         }else{
                                if($new_group_name!==$old_group_name && $new_group_name_without_nomenclature!==''){
                                    //ldap_rename($ldapconn, $olddn, $newRdn, $newParent, true);
                                }
                                if($new_description!==$old_description && $old_description!==''){
                                    $valeurs['description']=$node->og_description ;
                                    ldap_modify($ldapconn, $OLDdn, $valeurs);
                                    if($subgroup == true){
                                        $id_folder = $objectId;
                                        exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/subfolder/permission/?folder=".$id_folder."&username=username'");
                                    }
                                }
                                //ldap_rename($ldapconn, $OLDdn, $NEWRdn,$NEWParent, true);

                          }
                          /*
                          //ajouter de nouveaux membres
                          if(count($new_users)>0) {

                               if(in_array($new_users[0],$deja_managers)) {
                                      //Suppression de managers
                                      delete_manager($node,$new_users,$deja_managers);
                                      header('Location:/node/'.$node->nid);
                               }else {

                                      insert_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn,$new_users,$deja_membres,$deja_managers);

                                      header('Location:/node/'.$node->nid);

                                }

                            }

                            //Suppression membres
                            if(count($msupprimes)>0) {
                                    del_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn,$msupprimes);
                                    header('Location:/node/'.$node->nid);
                             }
                             //Ajout de managers
                             if(count($les_managers)>0) {
                                    promote_manager($node,$les_managers);
                                   header('Location:/node/'.$node->nid);
                              }
                              */
                     }elseif($new_description!==$old_description && $old_description!=='') {
                       //Le cas ou seule la description change
                         $OLDdn='cn='.$old_group_name.',ou=groups,'. $dc1.','. $dc2.'';
                         $dn_new='cn='.$node->title.',ou=groups,'. $dc1.','. $dc2.'';
                         $valeurs['description']=$node->og_description ;

                       //Voir si le groupe existe bien dans ldap
                        $gldap=$_ldapdata_ldap->retrieveAttributes($OLDdn);

                        if(is_null($gldap)) {
                                create_group_notExistInLdap($_ldapdata_ldap,$node,$dn_new,$dc1,$dc2);
                                drupal_set_message(t('This group doesn\'t exist in LDAP'));
                                break;
                        }else {
                               ldap_modify($ldapconn, $dn_new, $valeurs);
                        }
                        /*
                          //ajouter de nouveaux membres
                       if(count($new_users)>0) {

                           if(in_array($new_users[0],$deja_managers)) {
                             //Suppression de managers
                               delete_manager($node,$new_users,$deja_managers);
                               header('Location:/node/'.$node->nid);
                            }else {

                              insert_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn_new,$new_users,$deja_membres,$deja_managers);
                              header('Location:/node/'.$node->nid);
                            }

                         }

                           //Suppression membres
                          if(count($msupprimes)>0) {
                              del_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn_new,$msupprimes);
                              header('Location:/node/'.$node->nid);
                          }
                          //Ajout de managers
                          if(count($les_managers)>0) {
                            promote_manager($node,$les_managers);
                            header('Location:/node/'.$node->nid);
                          }
                          */
                     }elseif($new_group_name!==$old_group_name && $new_description!==$old_description && $new_group_name!=='' && $new_description!==''){
                             //Le Nom du groupe et la desciption ont changé

                           //Renommer dans Alfresco
                           $path=get_folder_path_alfresco($old_group_name,false,$node->type, $node);


                             //Supprimer le groupe correspondant sur alfresco sinon double replication par ldap
                             delete_group_alfresco($old_group_name,$server);

                            //Renommer le folder sur Alfresco

                            $obj_fold=cmisapi_getObjectByPath($repositoryId, $path);
                            $objectId=$obj_fold->id;
                            $properties=array('cmis:name'=>$new_group_name);
                            global $cmis_sudo_admin;
                            $cmis_sudo_admin = true;
                            cmisapi_updateProperties($repositoryId, $objectId, $properties);
                            $cmis_sudo_admin = false;


                            //renommer le nom dans ldap
                            $OLDdn1='cn='.$old_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                            $dn_new='cn='.$node->title.',ou=groups,'. $dc1.','. $dc2.'';
                            $NEWRdn1 = 'cn='.$new_group_name.'';
                            $NEWParent = 'ou=groups,'. $dc1.','. $dc2.'';

                            //Voir si le groupe existe bien dans ldap
                            $gldap=$_ldapdata_ldap->retrieveAttributes($OLDdn1);

                            if(is_null($gldap)) {
                                   create_group_notExistInLdap($_ldapdata_ldap,$node,$dn_new,$dc1,$dc2);
                                   drupal_set_message(t('This group doesn\'t exist in LDAP'));
                                   break;
                            }else{

                                   ldap_rename($ldapconn, $OLDdn1, $NEWRdn1,$NEWParent, true);

                                   //Modifier la description du groupe dans ldap

                                   $valeurs1['description']=$node->og_description ;
                                   ldap_modify($ldapconn, $dn_new, $valeurs1);
                                   
                                   
                            }
                            /*
                              //ajouter de nouveaux membres
                            if(count($new_users)>0) {

                                   if(in_array($new_users[0],$deja_managers)) {
                                   //Suppression de managers
                                          delete_manager($node,$new_users,$deja_managers);
                                          header('Location:/node/'.$node->nid);
                                   }else {

                                          insert_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn_new,$new_users,$deja_membres,$deja_managers);
                                          header('Location:/node/'.$node->nid);
                                  }

                           }


                           //Suppression membres
                          if(count($msupprimes)>0) {
                                 del_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn_new,$msupprimes);
                                 header('Location:/node/'.$node->nid);
                          }
                          //Ajout de managers
                          if(count($les_managers)>0) {
                                promote_manager($node,$les_managers);
                                header('Location:/node/'.$node->nid);
                          }
                          */
                        }
                        
                   }//ENDIF CHANGEMENT
                   else {

                        //$OLDdn='cn='.$old_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                          $OLDdn=ceo_vision_get_ldap_dn($old_node,$dc1,$dc2);
                          $dn = ceo_vision_get_ldap_dn($node,$dc1,$dc2);
                          
                          //Ni le titre ni la description n'a changé il
                          //faut tester s'il y'a ajout ou suppression de membres ou de managers
                          //$dn='cn='.$old_group_name.',ou=groups,'. $dc1.','. $dc2.'';
                          //$OLDdn='cn='.$old_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                         
                         //Voir si le groupe existe bien dans ldap
                         $gldap=$_ldapdata_ldap->retrieveAttributes($OLDdn);

                        if(is_null($gldap)) {
                                 create_group_notExistInLdap($_ldapdata_ldap,$node,$dn,$dc1,$dc2);
                                 drupal_set_message(t('This group doesn\'t exist in LDAP'));
                                 break;
                        }
                        /*
                          //ajouter de nouveaux membres
                       if(count($new_users)>0) {

                           if(in_array($new_users[0],$deja_managers)) {
                             //Suppression de managers
                               delete_manager($node,$new_users,$deja_managers);
                               header('Location:/node/'.$node->nid);
                            }else {

                              insert_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn,$new_users,$deja_membres,$deja_managers);
                              header('Location:/node/'.$node->nid);

                            }

                         }


                          //Suppression membres
                          if(count($msupprimes)>0) {
                              del_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn,$msupprimes);
                             header('Location:/node/'.$node->nid);
                          }
                          //Ajout de managers
                          if(count($les_managers)>0) {
                            promote_manager($node,$les_managers);
                            header('Location:/node/'.$node->nid);
                          }
                         * 
                         */
               }

               }//ENDIF GROUP NODE

               elseif($node->type=='orga') {
                    $path=get_folder_path_alfresco($old_group_name,false,$node->type, $node);
                     if($new_group_name!==$old_group_name || $new_description!==$old_description) {

                         if($old_group_name=='') {
                         // un nouveau groupe orga

                         //créer le groupe dans Alfresco
                        // create_group_alfresco($node->title,$node->og_description,$server);

                         //créer le groupe dans ldap
                         //$dn_new='cn='.$node->title.',ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                         $dn = ceo_vision_get_ldap_dn($node,$dc1,$dc2,true);
                         $valeurs['objectClass'][0]="groupOfNames";
                         $valeurs['objectClass'][1]="top";
                         $valeurs['description']=$node->og_description ;
                         $valeurs['cn']=$node->title;
                         $valeurs['member']= 'uid=admin,ou=people,'.$dc1.','.$dc2.'';
                         $_ldapdata_ldap->create_entry($dn, $valeurs);
                         if($node->title && $node->og_description) {
                         //créer le folder du groupe dans Alfresco
                         
                     ceo_vision_create_alfresco_folder($node);
//                         variable_set("cmis_sudo_admin", true);
//                         cmisapi_createFolder($repositoryId, $folderId, $node->title);
//                         variable_set("cmis_sudo_admin", false);
                             header('Location:/node/'.$node->nid);
                         }else {break;}


                      }elseif(($new_group_name!==$old_group_name && $new_group_name!=='') || ($new_description!==$old_description && $old_description!=='')) {
                       
                          

                        //Supprimer le groupe correspondant sur alfresco sinon double replication par ldap
                         delete_group_alfresco($old_group_name,$server);

                        //Renommer le folder sur Alfresco
                         
                        $obj_fold=cmisapi_getObjectByPath($repositoryId, $path);
                        $objectId=$obj_fold->id;
                        
                        if(isset($old_node->og_parent) && $old_node->og_parent != "0"){
                            $subgroup = true;
                             $new_group_name_with_nomenclature = ceo_vision_add_nomenclature_subgroup_title($new_group_name);
                        }else{
                            $new_group_name_with_nomenclature = $new_group_name;
                        }
                        $properties=array('cmis:name'=>$new_group_name_with_nomenclature);
                        global $cmis_sudo_admin;
                        $cmis_sudo_admin = true;
                        cmisapi_updateProperties($repositoryId, $objectId, $properties);
                        $cmis_sudo_admin = false;
                        

                        //Renommer dans ldap
                        //$OLDdn='cn='.$old_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                          $olddn=ceo_vision_get_ldap_dn($old_node,$dc1,$dc2);
                          $newRdn = 'cn='.$new_group_name.'';
                          
                          //$NEWParent = 'ou=groups,'. $dc1.','. $dc2.'';
                          $newParent = ceo_vision_get_parent_ldap_dn($node,$dc1,$dc2);
                          //$dn='cn='.$new_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                          $dn = ceo_vision_get_ldap_dn($node,$dc1,$dc2);
                        
                         //$olddn='cn='.$old_group_name.', ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                         //$dn='cn='.$new_group_name.', ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                         //$newRdn = 'cn='.$new_group_name.'';
                         //$newParent = 'ou=orga,ou=groups,'. $dc1.','. $dc2.'';

                         //Voir si le groupe existe bien dans ldap
                         $gldap=$_ldapdata_ldap->retrieveAttributes($olddn);

                        if(is_null($gldap)) {
                                create_group_notExistInLdap($_ldapdata_ldap,$node,$dn,$dc1,$dc2);
                                drupal_set_message(t('This group doesn\'t exist in LDAP'));
                                break;
                        }else {
                                if($new_group_name!==$old_group_name && $new_group_name_without_nomenclature!==''){
                                  
                                    //ldap_rename($ldapconn, $olddn, $newRdn, $newParent, true);
                                }
                                if($new_description!==$old_description && $old_description!==''){
                                    $valeurs['description']=$node->og_description ;
                                    ldap_modify($ldapconn, $olddn, $valeurs);
                                    if($subgroup == true){
                                        $id_folder = $objectId;
                                        exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/subfolder/permission/?folder=".$id_folder."&username=username'");
                                    }
                                }
                        }
                        
                        
                        // Récupérer membres de l'orga et mettre à jour le champs 
                        // 'ou' des membres concernés dans ldap
                        ceo_update_ldap_members_ou($ldapconn, $old_group_name, $new_group_name);
                        
                        
                        //$_ldapdata_ldap->search($base)

                        /*
                          //ajouter de nouveaux membres
                       if(count($new_users)>0) {

                           if(in_array($new_users[0],$deja_managers)) {
                             //Suppression de managers
                               delete_manager($node,$new_users,$deja_managers);
                               header('Location:/node/'.$node->nid);
                            }else {

                              insert_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn,$new_users,$deja_membres,$deja_managers);
                              header('Location:/node/'.$node->nid);
                            }

                         }
                          //Suppression membres
                          if(count($msupprimes)>0) {
                              del_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn,$msupprimes);
                              header('Location:/node/'.$node->nid);
                          }
                          //Ajout de managers
                          if(count($les_managers)>0) {
                            promote_manager($node,$les_managers);
                           header('Location:/node/'.$node->nid);
                          }

                          */
                      }elseif($new_description!==$old_description && $old_description!=='') {
                       //Le cas ou seule la description change
                             $olddn='cn='.$old_group_name.', ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                             $dn_new='cn='.$node->title.',ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                             
                             $valeurs['description']=$node->og_description ;

                             //Voir si le groupe existe bien dans ldap
                             $gldap=$_ldapdata_ldap->retrieveAttributes($olddn);

                            if(is_null($gldap)) {
                                create_group_notExistInLdap($_ldapdata_ldap,$node,$dn_new,$dc1,$dc2);
                                drupal_set_message(t('This group doesn\'t exist in LDAP'));
                                break;
                            }else{

                                 ldap_modify($ldapconn, $dn_new, $valeurs);
                            }
                            /*
                       //ajouter de nouveaux membres
                       if(count($new_users)>0) {

                           if(in_array($new_users[0],$deja_managers)) {
                             //Suppression de managers
                               delete_manager($node,$new_users,$deja_managers);
                               header('Location:/node/'.$node->nid);
                            }else {

                              insert_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn_new,$new_users,$deja_membres,$deja_managers);
                              header('Location:/node/'.$node->nid);
                            }

                         }
                          //Suppression membres
                          if(count($msupprimes)>0) {
                              del_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn_new,$msupprimes);
                              header('Location:/node/'.$node->nid);
                          }
                          //Ajout de managers
                          if(count($les_managers)>0) {
                            promote_manager($node,$les_managers);
                            header('Location:/node/'.$node->nid);
                          }
                             *
                             */
                       }elseif($new_group_name!==$old_group_name && $new_description!==$old_description && $new_group_name!=='' && $new_description!==''){
                              //Le Nom du groupe et la desciption ont changé

                               //Renommer dans Alfresco


                               //Supprimer le groupe correspondant sur alfresco sinon double replication par ldap
                                delete_group_alfresco($old_group_name,$server);

                                //Renommer le folder sur Alfresco

                                 $obj_fold=cmisapi_getObjectByPath($repositoryId, $path);
                                 $objectId=$obj_fold->id;
                                 $properties=array('cmis:name'=>$new_group_name);
                                 global $cmis_sudo_admin;
                                 $cmis_sudo_admin = true;
                                 cmisapi_updateProperties($repositoryId, $objectId, $properties);
                                 $cmis_sudo_admin = false;

                             //renommer le nom dans ldap
                              /*$OLDdn2='cn='.$old_group_name.', ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                              $dn_new2='cn='.$node->title.',ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                              $newRdn2 = 'cn='.$new_group_name.'';
                              $newParent2 = 'ou=orga,ou=groups,'. $dc1.','. $dc2.'';*/
                                 
                              //Renommer dans ldap
                            //$OLDdn='cn='.$old_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                              $olddn=ceo_vision_get_ldap_dn($old_node,$dc1,$dc2);
                              $newRdn = 'cn='.$new_group_name.'';

                              //$NEWParent = 'ou=groups,'. $dc1.','. $dc2.'';
                              $newParent = ceo_vision_get_parent_ldap_dn($node,$dc1,$dc2);
                              //$dn='cn='.$new_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                              $dn = ceo_vision_get_ldap_dn($node,$dc1,$dc2);


                             //Voir si le groupe existe bien dans ldap
                             $gldap=$_ldapdata_ldap->retrieveAttributes($olddn);

                            if(is_null($gldap)) {
                                  create_group_notExistInLdap($_ldapdata_ldap,$node,$dn,$dc1,$dc2);
                                  drupal_set_message(t('This group doesn\'t exist in LDAP'));
                                  break;
                            }else{

                                 ldap_rename($ldapconn, $olddn, $newRdn, $newParent, true);

                                 $valeurs2['description']=$node->og_description ;

                                 ldap_modify($ldapconn, $dn_new2, $valeurs2);
                            }
                            /*
                             //ajouter de nouveaux membres
                             if(count($new_users)>0) {

                                if(in_array($new_users[0],$deja_managers)) {
                                //Suppression de managers
                                   delete_manager($node,$new_users,$deja_managers);
                                   header('Location:/node/'.$node->nid);
                                }else {

                                   insert_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn_new2,$new_users,$deja_membres,$deja_managers);
                                   header('Location:/node/'.$node->nid);
                                }

                             }
                          //Suppression membres
                          if(count($msupprimes)>0) {
                              del_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn_new2,$msupprimes);
                              header('Location:/node/'.$node->nid);
                          }
                          //Ajout de managers
                          if(count($les_managers)>0) {
                            promote_manager($node,$les_managers);
                            header('Location:/node/'.$node->nid);

                          }
                          */
                        }
                     }//ENDIF CHANGEMENT
                     else {
                           //Ni le titre ni la description n'a changé
                           //faut tester s'il y'a ajout ou suppression de membres ou de managers
                         
                         //$OLDdn='cn='.$old_group_name.', ou=groups,'. $dc1.','. $dc2.'';
                          $OLDdn=ceo_vision_get_ldap_dn($old_node,$dc1,$dc2);
                          $dn = ceo_vision_get_ldap_dn($node,$dc1,$dc2);
                         
                         
                           //$dn='cn='.$old_group_name.', ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                           //$OLDdn='cn='.$old_group_name.', ou=orga,ou=groups,'. $dc1.','. $dc2.'';
                          //Voir si le groupe existe bien dans ldap
                          $gldap=$_ldapdata_ldap->retrieveAttributes($OLDdn);

                         if(is_null($gldap)) {
                                 create_group_notExistInLdap($_ldapdata_ldap,$node,$dn,$dc1,$dc2);
                                 drupal_set_message(t('This group doesn\'t exist in LDAP'));
                                 break;
                         }
                          //ajouter de nouveaux membres
                          if(count($new_users)>0) {

                             if(in_array($new_users[0],$deja_managers)) {
                               //Suppression de managers
                                delete_manager($node,$new_users,$deja_managers);
                                header('Location:/node/'.$node->nid);
                            }else {

                              insert_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn,$new_users,$deja_membres,$deja_managers);
                              header('Location:/node/'.$node->nid);
                            }

                         }
                         /*
                          //Suppression membres
                          if(count($msupprimes)>0) {
                              del_in_og_ldap($node,$_ldapdata_ldap,$dc1,$dc2,$dn,$msupprimes);
                             header('Location:/node/'.$node->nid);
                          }
                          //Ajout de managers
                          if(count($les_managers)>0) {
                            promote_manager($node,$les_managers);
                            header('Location:/node/'.$node->nid);
                          }
                          *
                          */

                   }
                 }//END GROUP ORGA
                 
                 
                break;
                case 'delete':
                // if($_POST['op']=='Supprimer') {
                    //$path=get_folder_path_alfresco($node->title,false,$node->type);
                    //$dn_del = ceo_vision_get_ldap_dn($node,$dc1,$dc2);
                    
//                   if($node->type=='group_node') {
//                     $dn_del='cn='.$node->title.', ou=groups, '. $dc1.','. $dc2.'';
//                   }elseif($node->type=='orga') {
//
//                     $dn_del='cn='.$node->title.', ou=orga,ou=groups,'. $dc1.','. $dc2.'';
//                   }
                    //$parents = og_subgroups_get_group_parents($node);
                    //$parents = og_subgroups_get_group_parents($node);
//                    if(count($parents) == 0){
//                       $dn_del = ceo_vision_get_ldap_dn($node,$dc1,$dc2); 
//                    }else{
//                        $first_parent = array_shift($parents);
//                        $first_parent_node = node_load($first_parent->nid);
//                        $first_parent_dn = ceo_vision_get_ldap_dn($first_parent_node,$dc1,$dc2);
//                        $dn_del = "cn=".$node->title.",".$first_parent_dn;
//                    }
//                    $mynode = node_load($node->nid);
//                    $dn_del = ceo_vision_get_ldap_dn($mynode,$dc1,$dc2, true);
//                    $dn_admin = ceo_vision_get_ldap_infos_admin($mynode, $dn_del);
//                    $dn_standard = ceo_vision_get_ldap_infos_standard($mynode, $dn_del);  

//                    
//                    $_ldapdata_ldap->delete_entry($dn_admin["dn"]);
//                    $_ldapdata_ldap->delete_entry($dn_standard["dn"]);
//                    $_ldapdata_ldap->delete_entry($dn_del);

                  //suppression du groupe alfresco
                  //delete_group_alfresco($node->title,$server);
                  //suppression du folderAlfresco
                   //$objet=cmisapi_getObjectByPath($repositoryId, $path);
                   //$objectId=$objet->id;
                   //cmisapi_deleteObject($repositoryId, $objectId);

                   //header('Location:/og');
                 //}
                break;
     }
     //dans le cas d'un noeud de type document, si son type de document vaut autre, il y a  surement eu un probleme lors de la creation, donc on retente de recuperer le type
   }elseif($node->type=='alfresco_item'){
       if($op == "view"){
           if(count($node->taxonomy) > 0){
               foreach($node->taxonomy as $key=>$taxo){
                   if($taxo->vid == 13 && $taxo->name == "Autre"){
                       //on recupere le type en cmis
                        try{

                              $repository = cmisapi_getRepositoryInfo();

                              $repositoryInfo=$repository->repositoryInfo;

                        } catch (CMISException $e) {

                        }
   
                        $cmisobject=cmisapi_getObject($repositoryInfo['cmis:repositoryId'],$node->reference);
                        $mime=$cmisobject->properties['cmis:contentStreamMimeType'];
                       
                        $filetitle = $cmisobject->properties['cmis:name'];
                        $type = get_taxo_id_from_string($mime,$filetitle, $cmisobject);

                       if($type != 280){
                           $node->taxonomy[$key]->tid = $type;

                           $time = $node->changed;
                           //avant de sauver le noeud, je recupere le uid de son dernier modifieur, pour le remettre ensuite
                           $last_modified_by = $node->revision_uid;
                           //pour eviter l'envoi de notifications lors du node_save
                           $node->notifications_content_disable = 1;
                           node_save($node);
                           //db_query("UPDATE {apachesolr_search_node} SET changed= %d WHERE nid = %d", $time,$node->nid);
                           db_query("UPDATE {apachesolr_index_entities_node} SET changed= %d WHERE entity_id = %d", $time,$node->nid);
                           //on empeche la date de modif d'etre modifiée
                           ceo_vision_replace_modified_timestamp($time,$node->nid);
                           $last_modifier = user_load($last_modified_by);
                           ceo_vision_replace_revision_uid($last_modifier->name,$node);
                       }
                   }
               }
           }
        }elseif($op == "validate"){
            //we validate if the field is correctly fill with a correct user (firstname lastname)         
           $document_author = $node->field_document_author[0]["value"];
           if($document_author != ""){
            $myuser = ceo_vision_search_user_ldap($document_author);
            if($myuser == null){
                form_set_error("document_author", t('This is not a valid user'));
                return;
            }else{             
                 $node->field_document_author[0]["value"] = $myuser->profile_firstname." ".$myuser->profile_lastname;
            }
           } 
            
            
            
            //on verifie les contenus liés.Si c'est lié a un contenu dépublié ou supprimé, je l'enleve de la liste, pour éviter une erreur de validation du coeur
           
                    
           //on verifie les erreurs actuelles. S'il n'y a que l'erreur du target_link je l'annule
           $errors = form_get_errors();
            
           if(count($errors) == 1 && (isset($errors["field_target_link][0][nid][nid"]) || isset($errors["field_target_link][1][nid][nid"]) || isset($errors["field_target_link][2][nid][nid"])
                   || isset($errors["field_target_link][3][nid][nid"]) || isset($errors["field_target_link]4][nid][nid"]))){
               watchdog("debug remove error", "remove error");
               form_set_error(NULL, '', TRUE);
           }
            
            foreach($node->field_target_link as $key=>$target_link){
                if($target_link["nid"] != ""){
                    //on verifie l'état du doc lié. S'il n'existe pas ou n'est pas publié, je l'enleve
                        $results=db_query("select * from {node} where nid= %d", $target_link["nid"]);
                        while ($res = db_fetch_object($results)) {
                            $status = $res->status;
                        }
                        if($status == 0){
                            $node->field_target_link[$key]["nid"] = "";
                            unset($node->field_target_link[$key]);
                            form_set_error(NULL, '', TRUE);
                        }
                }
            }

            
              if($node->book['bid']!= 0){
                 //on charge le noeud du livre, sauf si le noeudque l'on modifie est un livre de premier niveau
                if($node->book['bid'] != $node->nid){
                    $node_book =node_load(array("nid" => $node->book['bid']));
                    //on charge le noeud tel qu'il était avant sa modif,pour recuperer ses groupes d'origine
                    $node_before_save = node_load($node->nid);
                    $groupe_commun = ceo_vision_get_groupe_commun($node_before_save, $node_book);
                   
                    if(count($groupe_commun) == 0){
                        //si ils n'ont pas de groupe en commun , j'annule l'enregistrement
                        form_set_error("book][bid", t("you can't add this document to this book because of group's integrity"));
                        return;

                    }else{                      
                        $node->og_groups = $node_book->og_groups;
                    }
                    
                }
              }
                //si le noeud est dans un livre, on invalide le cache de l'arborescence des livres
               if($node->book['bid']!= 0){
                   cache_clear_all("abb_tree_","cache",TRUE);
               } 
               
            
         //WORKFLOW
         $is_workflow = ceo_vision_is_node_in_workflow($node);
          if($is_workflow){
            //avant la sauvegard, si le champs état vaut "A valider" on verifie que le champs "validators" soit remplit. Si non on reviens sur formulaire
             $etat = taxonomy_get_term($node->taxonomy[12]);
            if($etat->name == "A valider"){  
                   $count_validators = 0;
                   foreach($node->field_validators as $keyvalidator=>$validator){
                       if($validator['uid'] != ""){
                           $count_validators++;
                       }

                   }

                   if($count_validators == 0){
                       form_set_error("field_validators", t("You must choose at least one validator1"));
                       return;
                   }
            }
          }
        //avant de sauvegarder le noeud, on verifie si il est dans un groupe/orga de workflow
        //$is_workflow = ceo_vision_is_node_in_workflow($node);
        //TEMPORAIRE
        //$is_workflow = true;
        //si oui je recupere son champs "état" et je verifie si il correspond a l'emplacement du document
//        if($is_workflow){
//            $array_workflow_assoc = array("A Valider" => "A valider", "Validé" => "Validé", "Rejeté" => "Rejeté"); 
//            
//            //$etat = taxonomy_node_get_terms_by_vocabulary($node, "12");
//            //$etat = array_shift(array_values($etat));
//           
//            $etat = taxonomy_get_term($node->taxonomy[12]);
//             
//            $groups = $node->og_groups;
//            $group_node = node_load(array_shift(array_values($groups)));
//            
//            
//            if($array_workflow_assoc[$group_node->title] != $etat->name && $etat->name != ""){            
//                //je déplace le doc dans le bon sous groupe du workflow
//                //je recupere le groupe/orga dans lequel il faut le déplacer
//                
//                $good_group = node_load(array('title' => $etat->name,'type' => 'orga'));
//                
//                //si le user est readonly du groupe de destination, je ne fais rien
//                if(ceo_vision_is_read_only_group($good_group->nid) || $good_group->nid == ""){
//                      form_set_error("taxonomy", t("you can't edit this document status"));
//                      return;
//                }
//                
//            }
//            
//        } 
               
            
      }elseif($op == "insert"){
              //on supprime la variable qui indique que le noeud était en train d'etre crée, et qui empachait la règle de réplication de créer le noeud avant
              variable_del("cmis_creating_".$node->reference);
              global $user;
              //variable_del($user->name."_file_form_populate");
              
              if(isset($node->workflow_etat)){
                ceo_vision_create_comment_workflow($node, $node->workflow_etat, $user);
                 foreach($node->field_validators as $keyvalidator => $validator){
                       gofast_send_immediate_notifications($validator['uid'], $node->workflow_subject, $node->workflow_content, $node->workflow_context);                                         
                  }
             } 
             $mynode = node_load($node->nid, null, TRUE);
              
      }elseif($op == "load"){
             return db_fetch_array(db_query("SELECT last_comment_timestamp, last_comment_name, last_comment_uid, comment_count FROM {node_comment_statistics} WHERE nid = %d", $node->nid));
      }elseif($op == "update"){
             
      }elseif($op == "presave"){
            //we alter the value of document_author just before the save, to be sure to always have same mask for this field (firstname lastname)
           //the existance validation of the user inside this field has already be done on the validate op
           $document_author = $node->field_document_author[0]["value"]; 
           if($document_author != ""){
            $myuser = ceo_vision_search_user_ldap($document_author);

            if($myuser == null){

            }else{                
                $node->field_document_author[0]["value"] = $myuser->profile_firstname." ".$myuser->profile_lastname;
            }
           }
          
          
          
          
          //je fais ici ce qui se faisait vant dans alfresco_update_index, a savoir que j'extrais le contenu du doc
          $node = ceo_vision_old_alfresco_index($node);
         
         $old_node = node_load($node->nid);
        
         if($old_node->book["bid"] == $old_node->nid && $node->book["bid"] !== $node->nid){
             db_query("DELETE FROM {adv_book_custom} WHERE bid= %d ", $old_node->book["bid"]);
         }
         
         if(isset($node->nid)){
            $diff = array_diff($old_node->og_groups, $node->og_groups);
            $diff2 = array_diff($node->og_groups, $old_node->og_groups);
            
            //on attribue 1 point a l'auteur de la modif
            //uniquement si le neoud a été modifié depuis plus de 2 minutes
              if(abs($node->changed - time()) > 120){
                 
                $params_userpoints = array('points' => 1, 'uid' => $node->revision_uid);
                $server_uri = $_SERVER["REQUEST_URI"];
                if($server_uri !== "//sites/all/modules/elysia_cron/cron.php"){
                    userpoints_userpointsapi($params_userpoints);
                }
              }
            
         }

          if($node->book['bid']!= 0){
             //on charge le noeud du livre, sauf si le noeudque l'on modifie est un livre de premier niveau
           if($node->book['bid'] != $node->nid){
               // $node_book =node_load(array("nid" => $node->book['bid']), null, TRUE);
               $node_book =node_load($node->book['bid'], null, TRUE);
                
                $node->og_groups = $node_book->og_groups;
           }
         }
            if(count($diff) == 0 && count($diff2) == 0){
                
            }else{
                //si le noeud possede des pièces jointes, on déplace le dossier des pices jointes
                   if(count(alfresco_get_attachments($node)) != 0){                 
                      //on recupere le parent du node alfresco
                      $repositoryId=alfresco_getRepository();
                      $parent = cmisapi_getFolderParent($repositoryId, $node->reference);
                      exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/multi/move/?reference=".$node_ref."&destination=".$parent->objectList[0]->properties['cmis:objectId']."'");

                      //on met les noeuds des pices jointes dans les memes groupes que le noeud du mail
                       foreach(alfresco_get_attachments($node) as $key=>$attach){

                           $attach_node = node_load($key);
                           if($attach_node->title != ""){
                              $attach_node->og_groups =  $node->og_groups;
                              $attach_node->notifications_content_disable = 1;
                              node_save($attach_node);
                           }

                       }
                   }
            }
             //WORKFLOW
           $is_workflow = ceo_vision_is_node_in_workflow($node);
          if($is_workflow){
          if(isset($node->taxonomy[12])){
            $etat = taxonomy_get_term($node->taxonomy[12]);
          }else{
               foreach($node->taxonomy as $key=>$mytaxo){
                    if($mytaxo->vid == "12"){
                       $etat = $mytaxo;        
                    }
                }
          }
         global $user;
            if(isset($node->nid)){
                  $old_node = node_load($node->nid);
                  if(isset($old_node->taxonomy[12])){
                    $old_etat = taxonomy_get_term($old_node->taxonomy[12]);
                  }else{
                       foreach($old_node->taxonomy as $key2=>$mytaxo2){
                            if($mytaxo2->vid == "12"){
                               $old_etat = $mytaxo2;        
                            }
                        }
                  }
                  
                  if($old_etat->name == $etat->name){
                     $must_send_mail = false; 
                  }else{
                      $must_send_mail = true;
                     
                  }
              }else{               
                 $must_send_mail = true; 
              }
              
              //empecher d'envoyer un mail si sauvegarde par admin
              if($user->uid == 1){
                  $must_send_mail = false;  
              }
          if($etat->name == "A valider"){
              //on charge le noeud avant sa sauvegarde pour savoir si son etat viens de passer a "A vlaider" ou pas. Si oui j'envoi un message prevenant les validateurs. Sinon rien
              
              if($must_send_mail == true){
                 
                   //je créer un commentaire sur le noeud pour une pseudo activité
                   //ceo_vision_create_comment_workflow($node, $etat, $user);
                   if(isset($node->nid)){
                        ceo_vision_create_comment_workflow($node, $etat, $user);
                   }else{
                       $node->workflow_etat = $etat;
                   }
                   
                   $subject = t("Validation")." : ".$node->title;
                   $content = 'workflow-notifications';
                   $context = array('nid' => $node, 'tokens' => array('workflow' => $etat->name));
                   
//                   foreach($node->field_validators as $keyvalidator => $validator){
//                       gofast_send_immediate_notifications($validator['uid'], $subject, $content, $context);                                          
//                   }

                     if(isset($node->nid)){                  
                        foreach($node->field_validators as $keyvalidator => $validator){
                                gofast_send_immediate_notifications($validator['uid'], $subject, $content, $context);                       
                      
                               }
                    }else{
                         $node->workflow_subject = $subject;
                         $node->workflow_content = $content;
                         $node->workflow_context = $context;
                    }      
              }
              
              //on appel le webscript qui mettra le doc en readonly (ce script est reentrant donc pas de problème si il est appelé plusieurs fois)
              //on recupere les validateurs sous forme de chaine
              $validators = "";
              $new_owner = "";
              if(count($node->field_validators) > 0){
                    foreach($node->field_validators as $keyvalidator=>$validator){
                         if($validator['uid'] != ""){                 
                             $myvalidator = user_load($validator['uid']);
                             $new_owner = $myvalidator->name;
                             if($validators == ""){
                                 $validators.= $myvalidator->name;
                             }else{
                                 $validators.= ';'.$myvalidator->name;
                             }
                         }

                     }
              }
              //je change les droits du document    
                watchdog("debug webservice", "http://localhost:8080/alfresco/service/set/node/workflow/permission/?reference=".$node->reference."&validators=".$validators."&inverse=false");
              exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/node/workflow/permission/?reference=".$node->reference."&validators=".$validators."&inverse=false'");
              //je change le owner du document pour ne pas que l'auteur puisse continuer de la modifier
              exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/owner/?user=".$new_owner."&reference=".$node->reference."'");                
              
              
          }elseif(($etat->name == "Rejeté" || $etat->name == "Validé" || $etat->name == "") && $user->uid != 1 && $node->nid){
            //je remet les droits normaux pour ce document
            exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/node/workflow/permission/?reference=".$node->reference."&validators=null&inverse=true'");         
            if($must_send_mail == true){
              ceo_vision_create_comment_workflow($node, $etat, $user);
              //j'envoi un mail pour prevenir
              $mynode = $node;
              $og = $mynode->og_groups;
              $subscribers = gofast_notifications_get_content_subscribers($mynode, $og);
              
              $subject = t("Workflow about ")." ".$mynode->title;
              $content = 'workflow-notifications';
              $context = array('nid' => $node, 'tokens' => array('workflow' => $etat->name));
              
              foreach($subscribers as $uid => $subscription){
                gofast_send_immediate_notifications($uid, $subject, $content, $context, $subscription->send_method);  
//                          
              }
            }    
          }
        }
        /* Archivage des documents individuels */           
         $id_archive = ceo_vision_archive_get_tid_state_archive();
          if(isset($node->taxonomy[12])){
            $etat = taxonomy_get_term($node->taxonomy[12]);
            $old_node = node_load($node->nid);
            if(isset($old_node->taxonomy[12])){
                    $old_etat = taxonomy_get_term($old_node->taxonomy[12]);
                  }else{
                      if(count($old_node->taxonomy) > 0){
                       foreach($old_node->taxonomy as $key2=>$mytaxo2){
                            if($mytaxo2->vid == "12"){
                               $old_etat = $mytaxo2;        
                            }
                        }
                      }
                  }
            //si le noeud viens juste de passer a l'état "Archivé", j'éxecute la fonction ceo_vision_archive_node
            if($etat->tid == $id_archive && $old_etat->tid != $id_archive){
                ceo_vision_archive_node($node, true);               
            }
            
            //si le noeud viens juste de quitter l'état "Archivé" j'appel la fonction qui remettra ses droits correctement
            if($etat->tid != $id_archive && $old_etat->tid == $id_archive){
                ceo_vision_unarchive_node($node);
            }
          
          }
       /* end archivage des documents individuels */
         
      }
    }else{        

       switch ($op) {

       case 'delete':
            //si le noeud est dans un livre, on invalide le cache de l'arborescence des livres 
           if($node->book['bid']!= 0){
               cache_clear_all("abb_tree_","cache",TRUE);
           }
          if ($node->nid == $node->book['bid'] && $node->book['bid']!= 0) {
            // Handle deletion of a top-level post.
              $result = db_query("SELECT b.nid FROM {book} b WHERE b.bid = %d", $node->book['bid']);
              while ($child = db_fetch_array($result)) {
                 if($child['nid'] != $node->nid){
                    node_delete($child['nid']);
                 }
              }
        }

       break;
       case 'insert':
           //si le noeud est dans un livre, on invalide le cache de l'arborescence des livres
           if($node->book['bid']!= 0){
               cache_clear_all("abb_tree_","cache",TRUE);
           }
           
            if(isset($node->workflow_etat)){
                global $user;
                ceo_vision_create_comment_workflow($node, $node->workflow_etat, $user);
                 foreach($node->field_validators as $keyvalidator => $validator){
                       gofast_send_immediate_notifications($validator['uid'], $node->workflow_subject, $node->workflow_content, $node->workflow_context);                                         
                  }
             }     
          $mynode = node_load($node->nid, null, TRUE);
       break;
       case 'view':
         
       break;
       case "update":
             //on attribue 1 point a l'auteur de la modif
             $params_userpoints = array('points' => 1, 'uid' => $node->revision_uid);           
             $server_uri = $_SERVER["REQUEST_URI"];         
             if($server_uri !== "//sites/all/modules/elysia_cron/cron.php"){
                userpoints_userpointsapi($params_userpoints);
             }
             
             //on verifie si une nouvelle version est crée. Si oui je créer un commentaire avec le commentaire de la version
            
                 global $user;
                 if($node->revision == 1){
                     $number_version = $node->field_number_version[0]["value"];
                     $comment = $node->log;
                     //on créer un commentaire sur le noeud avec le commentaire entré par l'utilisateur
                    $comment_fields = array();
                    $comment_fields['values']['author']    = $user->name;
                    $comment_fields['values']['subject']   =  t("Version")." ".$number_version;
                    $comment_fields['values']['comment']   = $comment;
                    $comment_fields['values']['op']        = t('Save');
                    $comment_fields['values']['nid']       = $node->nid;
                    //$forum_comment_fields['values']['date'] = $created;
                    comment_form_submit("comment_form", $comment_fields);
                 }
             
       break;
       case 'presave':

	 //WORKFLOW
           $is_workflow = ceo_vision_is_node_in_workflow($node);
          if($is_workflow){
          if(isset($node->taxonomy[12])){
            $etat = taxonomy_get_term($node->taxonomy[12]);
          }else{
               foreach($node->taxonomy as $key=>$mytaxo){
                    if($mytaxo->vid == "12"){
                       $etat = $mytaxo;
                    }
                }
          }
         global $user;
            if(isset($node->nid)){
                  $old_node = node_load($node->nid);
                  if(isset($old_node->taxonomy[12])){
                    $old_etat = taxonomy_get_term($old_node->taxonomy[12]);
                  }else{
                       foreach($old_node->taxonomy as $key2=>$mytaxo2){
                            if($mytaxo2->vid == "12"){
                               $old_etat = $mytaxo2;
                            }
                        }
                  }

                  if($old_etat->name == $etat->name){
                     $must_send_mail = false;
                  }else{
                      $must_send_mail = true;

                  }
              }else{
                 $must_send_mail = true;
              }

              //empecher d'envoyer un mail si sauvegarde par admin
              if($user->uid == 1){
                  $must_send_mail = false;
              }
	 if($etat->name == "A valider"){
              //on charge le noeud avant sa sauvegarde pour savoir si son etat viens de passer a "A vlaider" ou pas. Si oui j'envoi un message prevenant les validateurs. Sinon rien

              if($must_send_mail == true){
                   //je créer un commentaire sur le noeud pour une pseudo activité
                   if(isset($node->nid)){
                        ceo_vision_create_comment_workflow($node, $etat, $user);
                   }else{
                       $node->workflow_etat = $etat;
                   }
                    $subject = t("Validation")." : ".$node->title;
                    $content = 'workflow-notifications';
                    $context = array('nid' => $node, 'tokens' => array('workflow' => $etat->name));

                  //si pas de nid, on remplit l'object nid pour pouvoir faire les actions de workflow apres la sauvegarde du noeud en base
                 if(isset($node->nid)){
                     
                        foreach($node->field_validators as $keyvalidator => $validator){
                                gofast_send_immediate_notifications($validator['uid'], $subject, $content, $context);                       
                      
                               }
                 }else{
                      $node->workflow_subject = $subject;
                      $node->workflow_content = $content;
                      $node->workflow_context = $context;
                 }      
               }
              

              //on appel le webscript qui mettra le doc en readonly (ce script est reentrant donc pas de problème si il est appelé plusieurs fois)
              //on recupere les validateurs sous forme de chaine
              $validators = "";
              $new_owner = "";
               foreach($node->field_validators as $keyvalidator=>$validator){
                    if($validator['uid'] != ""){
                        $myvalidator = user_load($validator['uid']);
                        $new_owner = $myvalidator->name;
                        if($validators == ""){
                            $validators.= $myvalidator->name;
                        }else{
                            $validators.= ';'.$myvalidator->name;
                        }
                    }

                }
	 //je change les droits du document
            //    watchdog("debug webservice", "http://localhost:8080/alfresco/service/set/node/workflow/permission/?reference=".$node->reference."&validators=".$validators."&inverse=false");
             // exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/node/workflow/permission/?reference=".$node->reference."&validators=".$validators."&inverse=false'");
              //je change le owner du document pour ne pas que l'auteur puisse continuer de la modifier
             // exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/owner/?user=".$new_owner."&reference=".$node->reference."'");


          }elseif(($etat->name == "Rejeté" || $etat->name == "Validé") && $user->uid != 1 && $node->nid){
             //je remet les droits normaux pour ce document
             // exec("curl --user admin:".ceo_vision_get_admin_pwd()." 'http://localhost:8080/alfresco/service/set/node/workflow/permission/?reference=".$node->reference."&validators=null&inverse=true'");
             if($must_send_mail == true){
              ceo_vision_create_comment_workflow($node, $etat, $user);
              //j'envoi un mail pour prevenir
            $mynode = $node;
            $og = $mynode->og_groups;
            $subscribers = gofast_notifications_get_content_subscribers($mynode, $og);
            
            $subject = t("Workflow about ")." ".$mynode->title;
            $content = 'workflow-notifications';
            $context = array('nid' => $node, 'tokens' => array('workflow' => $etat->name));
              
            foreach($subscribers as $uid => $subscription){
                gofast_send_immediate_notifications($uid, $subject, $content, $context, $subscription->send_method);
//                $recipient = user_load($uid);
//                //if($uid == 5){
//                $header = "<div class='nText'><div class='sub_header'>".t("Hello")." <span class='green_user'>".$recipient->profile_firstname."</span>,</div>";
//                $ht = url('node/'. $mynode->nid,array('absolute' => TRUE));
//                if($etat->name == "Rejeté"){
//                    $event = t("The document ")." <a href='".$ht."'>".$mynode->title."</a>".t(" has been rejected");
//                }else{
//                    $event = t("The document ")." <a href='".$ht."'>".$mynode->title."</a>".t(" has been approved");
//                }
//                $ht_gofast = url('/node',array('absolute' => TRUE));
//                $footer = "<div style='border-top:solid 1px #c0c0c0; margin:40px 130px 5px;'></div><div style='color:#787878; font-size:10.8px; line-height:16px; text-align:center; padding:5px;'>Ceci est un message automatisé de <a style='color:#2874a2;' href='$ht_gofast'>GoFast</a></div>";
//                unset($message);
//                $message->subject = t("Workflow about ")." ".$mynode->title;
//                $message->body = array("header" => $header,
//                    "event" => $event,
//                    "footer" =>$footer
//                    );
//                messaging_message_send_user($recipient, $message);
//                //}
//                // messaging_message_send_user($recipient, $message, 'privatemsg');
            }
          }
          }
         }



         $old_node = node_load($node->nid);
           
         if($old_node->book["bid"] == $old_node->nid && $node->book["bid"] !== $node->nid){
             db_query("DELETE FROM {adv_book_custom} WHERE bid= %d ", $old_node->book["bid"]);
         }
         
        
        //gestion des numeros de version
        //si l'utilisateur souhaite créer une nouvelle revision ou si c'est un nouveau noeud, on remplit le champs number_version avec un numero de version compréhensible
        if($node->revision == 1 || $node->nid === NULL){

           if($node->nid !== NULL){
                //on charge le noeud tel qu'il est maintenant (avant sa modification)
               $node_last_revision = node_load($node->nid);
               //on recupere son numero de version
               $last_version_number = $node_last_revision->field_number_version[0]["value"];
               if($last_version_number == ""){
                   $last_version_number = "1.0";
               }else{
                   //on calcule son nouveau numero de version, selon si ce sera une version majeur ou non
                   if($node->majeur === 1){
                       //on récupere ce qui est avant le point, et on l'augmente de 1
                       $major_version_number = explode(".", $last_version_number);
                       $major_version_number = $major_version_number[0] + 1;
                       $last_version_number = $major_version_number.".0";
                   }else{
                       $array_version_number = explode(".", $last_version_number);
                       $minor_version_number = $array_version_number[1] + 1;
                       
                       $last_version_number = $array_version_number[0].".".$minor_version_number;
                       //on l'incrémente de 0.1
                       //$last_version_number = $last_version_number + 0.1;
                   }
               }

               
           }else{
                $last_version_number = "1.0";
           }

           $node->field_number_version[0] = array("value" => $last_version_number);
           //variable_set("debug_node_revision", $node);
        }
        
        //si le noeud n'a pas de numero de revision (problème lors de la création?) je lui en remet un
        $node_last_revision = node_load($node->nid);
        $last_version_number = $node_last_revision->field_number_version[0]["value"];
        if($last_version_number == ""){
            $last_version_number = "1.0";
            $node->field_number_version[0] = array("value" => $last_version_number);
        }
        
        //on force sa taxonomie format
        $node = ceo_vision_force_taxonomy_format($node);

        if($node->book['bid']!= 0){
             //on charge le noeud du livre, sauf si le noeudque l'on modifie est un livre de premier niveau
           if($node->book['bid'] != $node->nid){
               // $node_book =node_load(array("nid" => $node->book['bid']), null, TRUE);
               $node_book =node_load($node->book['bid'], null, TRUE);
                
                $node->og_groups = $node_book->og_groups;
           }
        }


       break;
       case 'validate':
          
             //on verifie les contenus liés.Si c'est lié a un contenu dépublié ou supprimé, je l'enleve de la liste, pour éviter une erreur de validation du coeur
        
           //on verifie les erreurs actuelles. S'il n'y a que l'erreur du target_link je l'annule
           $errors = form_get_errors();
            
           if(count($errors) == 1 && (isset($errors["field_target_link][0][nid][nid"]) || isset($errors["field_target_link][1][nid][nid"]) || isset($errors["field_target_link][2][nid][nid"])
                   || isset($errors["field_target_link][3][nid][nid"]) || isset($errors["field_target_link]4][nid][nid"]))){
               watchdog("debug remove error", "remove error");
               form_set_error(NULL, '', TRUE);
           }
           
         
         
            foreach($node->field_target_link as $key=>$target_link){
                if($target_link["nid"] != ""){
                    //on verifie l'état du doc lié. S'il n'existe pas ou n'est pas publié, je l'enleve
                        $results=db_query("select * from {node} where nid= %d", $target_link["nid"]);
                        while ($res = db_fetch_object($results)) {
                            $status = $res->status;
                        }
                        if($status == 0){
                            $node->field_target_link[$key]["nid"] = "";
                            unset($node->field_target_link[$key]);
                            form_set_error(NULL, '', TRUE);
                        }
                }
            }
           
           

	 //WORKFLOW
         $is_workflow = ceo_vision_is_node_in_workflow($node);
          if($is_workflow){
            //avant la sauvegard, si le champs état vaut "A valider" on verifie que le champs "validators" soit remplit. Si non on reviens sur formulaire
             $etat = taxonomy_get_term($node->taxonomy[12]);
            if($etat->name == "A valider"){
                   $count_validators = 0;
                   foreach($node->field_validators as $keyvalidator=>$validator){
                       if($validator['uid'] != ""){
                           $count_validators++;
                       }

                   }

                   if($count_validators == 0){
                       form_set_error("field_validators", t("You must choose at least one validator2"));
                       return;
                   }
            }
          }

 
       //si le noeud est privé, si il est dans un livre et si ce livre n'est pas privé et qu'il ne fait parti d'aucun groupe, on n'accepte pas la sauvegarde du noeud
       if($node->book['bid']!= 0 && $node->private == 1){
           //on charge le noeud du livre
           $node_book =node_load(array("nid" => $node->book['bid']));
           if(count($node_book->og_groups) === 0 && $node_book->private !== 1 && $node->book['bid'] != $node->nid){
               form_set_error("book", t("you can't create a private node in a public book"));
               return;

           }
       }

        //gestion des traductions. On change le(s) groupe(s) de son ou ses traductions si besoin (si ces groupes on changés)
        $transl=translation_node_get_translations($node->tnid);
        if($transl !== NULL){
             $node_before_save = node_load($node->nid);
             
             //on verifie si le noeud que l'on modifie est dans un livre ou non (car le traitement n'est pas le même)
             if($node->book['bid']!= 0){
                 //si le noeud est dans un livre et qu'il possède des traductions, je verifie si le livre de destination possède au moins un groupe en commun avec le noeud que l'on deplace
                 if($node_before_save->book['bid'] != 0){
                    $livre_origine = node_load($node_before_save->book['bid']);
                 }else{
                     //si le noeud avant sa modif ne fais pas parti d'un livre, on compare les groupes du noeud au lieu du livre
                     $livre_origine = $node_before_save;
                 }
                 $livre_destination = node_load($node->book['bid']);
                 $groupe_commun = ceo_vision_get_groupe_commun($livre_destination, $livre_origine);
                 if(count($groupe_commun) == 0){
                    //si le livre de destination n'a aucun groupe commun  avec le noeud avant sa modif, alors je gere l'erreur
                    form_set_error("book", t("Problems with translations"));
                    ceo_vision_ui_manage_translation_over_books_add_js($transl, get_nid_from_mlid($node->book['plid']));
                    return;
                 }
             }else{
                //si le noeud que l'on modifie possède des traductions, on verifie si ces groupes on changés. Si oui on met à jour les groupes des traductions
                if(count(array_diff($node_before_save->og_groups,$node->og_groups)) !== 0 || count(array_diff($node->og_groups,$node_before_save->og_groups)) !== 0){
                    foreach($transl as $translation){
                        if($translation->nid !== $node->nid){
                            $translation_node = node_load($translation->nid);
                            //pour toutes les autres traductions, je met a jour leur groupes
                            $time = $translation_node->changed;
                            //avant de sauver le noeud, je recupere le uid de son dernier modifieur, pour le remettre ensuite
                            $last_modified_by = $translation_node->revision_uid;
                            //pour eviter l'envoi de notifications lors du node_save
                            $translation_node->notifications_content_disable = 1;
                            $translation_node->og_groups = $node->og_groups;
                            node_save($translation_node);
                            //on empeche la date de modif d'etre modifiée
                            ceo_vision_replace_modified_timestamp($time,$translation_node->nid);
                            $last_modifier = user_load($last_modified_by);
                            ceo_vision_replace_revision_uid($last_modifier->name,$translation_node);
                        }
                    }
                }
            }
        }

         //si le noeud est dans un livre, on invalide le cache de l'arborescence des livres
       if($node->book['bid']!= 0){
           cache_clear_all("abb_tree_","cache",TRUE);
       }
    
       break;
       case 'load';
            return db_fetch_array(db_query("SELECT last_comment_timestamp, last_comment_name, last_comment_uid, comment_count FROM {node_comment_statistics} WHERE nid = %d", $node->nid));
       break;
       }

   }
}


function ceo_vision_ui_menu_alter(&$items) {

  // Removing certain local navigation tabs that are either undesired or need to be custom relocated.

  // Set these tabs to MENU_CALLBACK, so they still register the path, but just don't show the tab:
  $items['search/apachesolr_search/%menu_tail']['type'] = MENU_CALLBACK;
  $items['search/alfresco/%menu_tail']['type'] = MENU_CALLBACK;
  $items['search/user/%menu_tail']['type'] = MENU_CALLBACK;
  $items['node/%node/edit']['type'] = MENU_CALLBACK;
  $items['node/%node/outline']['type'] = MENU_CALLBACK;
  $items['node/%node/track']['type'] = MENU_CALLBACK;
  $items['node/%node/broadcast']['type'] = MENU_CALLBACK;
  $items['node/%node/devel']['type'] = MENU_CALLBACK;
  $items['node/%node']['type'] = MENU_CALLBACK;
  $items['node/%node/details']['type'] = MENU_CALLBACK;
  $items['node/%node/translate']['type'] = MENU_CALLBACK;
  $items['node/%node/revisions']['type'] = MENU_CALLBACK;
  $items['user/%user/notifications/overview']['type'] = MENU_CALLBACK;
  $items['user/%user/notifications/subscriptions']['type'] = MENU_CALLBACK;
  $items['user/%user/notifications/subscriptions/edit/%notifications_subscription']['type'] = MENU_CALLBACK;
  $items['user/%user/notifications/subscriptions/delete/%notifications_subscription']['type'] = MENU_CALLBACK;
  $items['user/%user/notifications/update/%']['type'] = MENU_CALLBACK;
  $items['messages']['type'] = MENU_CALLBACK;
  $items['messages/view/%privatemsg_thread']['type'] = MENU_CALLBACK;
  $items['messages/new']['type'] = MENU_CALLBACK;
  $items['node/%node/by_subject']['type'] = MENU_CALLBACK;

  //on autorise les gens a supprimer leur propre commentaires
  $items['comment/delete']['access arguments'] = array("post comments");
  
  $categories = profile_categories();
  foreach ($categories as $key => $category) {
    unset($items['user/%user_category/edit/'. $category['name']]);
  }
  
  
   $items['taxonomy/autocomplete']['page callback'] = 'ceo_vision_ui_i18ntaxonomy_autocomplete';
          
  
}



function ceo_vision_ui_user($op, &$edit, &$account, $category = NULL) {

       switch($op) {
               
              case 'form':
                  if ($category == 'account') {
                    $form = array();
                    // Grab all of the categories provided by the profile module
                    $categories = profile_categories();
                    foreach ($categories as $category) {
                      if (ceo_vision_ui_profile_check_access($account, $category)) {
                        $category_name = $category['name'];
                        $category_form = profile_form_profile($edit, $account, $category_name, FALSE);
                        if (module_exists('i18nprofile')) {
                          i18nprofile_form_translate_category($category_form, $category_name);
                        }

                        $form_state = array('storage' => NULL, 'submitted' => FALSE);
                        $category_form['#id'] = 'profile_form_profile';
                        $category_form['#parameters'] = array('profile_form_profile', $edit, $account, $category_name, FALSE);
                        @drupal_alter('form', $category_form, $form_state, 'profile_form_profile');

                        $form += $category_form;
                        
                        //on s'assure que l'orga principale choisi soit bonne
                        $organisation_unit_title = $form["Données d'Annuaire"]["profile_organisation_unit"]["#default_value"];
                        $nid_organisation_unit = get_group_id_from_title($organisation_unit_title);
                        if($nid_organisation_unit == ""){
                            //on recupere les autres organisations dont fait parti le user
                            //je choisit une orga parmi les siennes comme choix par defaut
                            $title_default_organisation_unit = "";
                            foreach($account->og_groups as $gid=>$group){
                                if($group["type"] == "orga"){
                                    $title_default_organisation_unit = $group["title"];
                                }
                            }
                          
                            if($title_default_organisation_unit != ""){
                                $form["Données d'Annuaire"]["profile_organisation_unit"]["#default_value"] = $title_default_organisation_unit;
                            }
                            
                        }
                        
                      }
                    }
                   
                    //on cache le taskmenu
                    drupal_add_js('$jq(document).ready(function() {
                                    $jq(".tabs.primary").css("display","none");
                                    $jq("#edit-name").attr("readonly",true);
                                    });','inline');

                    // Other modules
                    if (module_exists('content_profile')) {
                      $simplenews_form = content_profile_user('form', $edit, $account);
                      if (is_array($simplenews_form)) {
                        $form += $simplenews_form;
                      }
                    }
                    return $form;
                  }

                  break;
              case 'update':
                  
                     if(($_POST['form_id']!=='user_login_block')){
                         $pass1=$_POST['pass']['pass1'];
                         $pass2=$_POST['pass']['pass2'];
                         if($pass1!==null && $pass1!=='') {
                             if($account->uid>1){
                                 change_user_password($account,$pass1,$pass2);
                             }
                             if($account->uid==1){
                                 update_admin_passwd($account,$pass1,$pass2);
                             }
                         }
                     }
                      // Ensure we're on the account edit page:
                      // - form_build_id ensures this is not called programatically
                      // - arg(3) ensures we're not on a module provided category
                      if (isset($edit['form_build_id']) && arg(1) == "ajax") {

                        //on ajoute l'utilisateur au groupe MANAGER si il est manager
                        if(isset($edit['roles']['4'])){
                            ceo_vision_insert_user_manager($account->name);
                        }elseif(!isset($edit['roles']['5'])){
                              ceo_vision_insert_user_standard($account->name);
                        }else{
                            ceo_vision_delete_user_ldap_group($account->name, "MANAGER", "group_node");
                           ceo_vision_delete_user_ldap_group($account->name, "STANDARD", "group_node");
                        }
                        
                        //si on débloque l'utilisateur, on le resynchronise sur ldap
                        if($account->status == 0 && $edit["status"] == 1){
//                            foreach($account->og_groups as $key=>$group){
//                                ceo_vision_synchro_group_ldap($key, $account->name);
//                            }
                            //on bloque le password du user sur ldap pour par qu'il puisse se connecter sur Alfresco
                           ceo_vision_change_password_unblocked_user($account);
                        }elseif($account->status == 1 && $edit["status"] === 0){
                            //on bloque le password du user sur ldap pour par qu'il puisse se connecter sur Alfresco
                            ceo_vision_change_password_blocked_user($account);
                        }
                        
                        // Save information for the profile module
                        $categories = profile_categories();

                        //on verifie si il est extranet. Si oui on l'enleve de toutes les orgas, sinon on modifie si besoin son orga principale
                        if(isset($edit['roles']['5'])){
                            $is_extranet = true;
                        }

                        if($is_extranet == true){
                            
                           $edit['profile_organisation_unit']="Extranet";
                            
                            if(count($account->og_groups) != 0){
                               foreach($account->og_groups as $key=>$group){
                                   if($group['type'] == orga){
                                       //TODO A definir si un extranet peut faire partie d'une orga
                                       //og_delete_subscription($key, $account->uid);
                                   }
                               }
                            }
                            
                           

                        }else{
                       
                            //on recupere le titre de l'orga dont fait partie le user
                            $orga = get_group_id_from_title($edit['profile_organisation_unit']);

                            if($orga != null){
                                //on verifie si le user appartient déjà à cet orga sur og. si non, on l'ajoute
                                if(array_key_exists($orga, $account->og_groups) == false){
                                    og_save_subscription($orga, $account->uid, array('is_active' => 1));
                                    //ceo_vision_propagate_members_update_group($orga);

                                }
                            }

                            //si son ancienne orga est differente de sa nouvel orga, on l'enleve de l'ancienne
//                            if($edit['profile_organisation_unit'] != $account->profile_organisation_unit){
//                                $old_orga = get_group_id_from_title($account->profile_organisation_unit);
//                                og_delete_subscription($old_orga, $account->uid);
//                            }
                        }
                //profile_load_profile($account);
               // Force LDAP sync.
               _ldapdata_user_load($account, TRUE);
                        foreach ($categories as $category) {
                          if($category['name'] != "Données d'Annuaire"){
                            profile_save_profile($edit, $account, $category['name']);
                          }
                        }
                      }
                      
                //on adapte le noeud associé au profil pour le mettre dans les mêmes groupes/orga que le user
//                  $type = 'uprofile';
//                  $profil_node = content_profile_load($type, $account->uid);    
//                  //on remplit le champs OG et on sauvegarde le noeud
//                   $mygroups = og_get_subscriptions($account->uid);
//                   $og_array = array();
//                    if(count($mygroups) > 0){
//                        foreach($mygroups as $key=>$mygroup){
//                            $og_array[$key] = $key;
//                        }
//                    }
//
//                    $profil_node->og_groups = $og_array;
//                    node_save($profil_node);
                  
                      
                 break;

              case 'login':
                    cache_clear_all("abb_tree_".$account->uid,"cache",TRUE);
                    //cache_clear_all("abb_tree_","cache",TRUE);
                    $pass_clear=$_POST['pass'];
                    ceo_vision_set_password($pass_clear);
                   
                    //on verifie si il faut oui ou non afficher le carousel d'aide
                    $gofast_hide_carousel = variable_get("gofast_hide_carousel", array());
                    
                    if(!isset($gofast_hide_carousel[$account->uid])){
                         setcookie("gofast_show_carousel", 'show', time() + 42000, '/');
                    }
                   
                    break;

            case 'logout':
                
                // Set expiration time to -1hr (will cause browser deletion)
                setcookie("DRUPALCHAT_NEWLOGIN", false, time() - 3600);
                // Unset key
                unset($_COOKIE["DRUPALCHAT_NEWLOGIN"]);
                
                // Set expiration time to -1hr (will cause browser deletion)
                setcookie("vars", false, time() - 3600);
                // Unset key
                unset($_COOKIE["vars"]);
                

                setcookie("alf_emplacements_timestamp", false, time() - 3600, '/');
                setcookie("alf_emplacements_timestamp", false, time() - 3600);
                setcookie("og_tracker_ceo_vision_no_time_limit", false, time() - 3600, '/');
                setcookie("og_tracker_ceo_vision_no_time_limit", false, time() - 3600);
                unset($_COOKIE['alf_emplacements_timestamp']);
                unset($_COOKIE["og_tracker_ceo_vision_no_time_limit"]);
                //delete avatar crop variable
                variable_del("ac_change_pic_uid_".$account->uid);
                
                //on supprime la variable qui contient le cache des emplacements, pour qu'il soit regenere au prochain login
                //variable_set("alf_emplacements_".$account->uid, array());
                //variable_del("alf_emplacements_".$account->uid);
                if($user->uid !== 1){
                    ceo_vision_del_emplacements_cache($account->uid);
                }
            break;

            case 'insert':
                $ldapInfos=get_ldap_infos();
               $_ldapdata_ldap=$ldapInfos['ldapdata_ldap'];
             //vérifie si l'utilisateur est dans ldap
               $dn='uid='.$account->name.','.$_ldapdata_ldap->basedn.'';
               $ldap_firstname=$_ldapdata_ldap->retrieveAttribute($dn,'givenName');
               $ldap_lastname=$_ldapdata_ldap->retrieveAttribute($dn,'sn');
              
                $account_infos = array( "uid" => $account->uid,
                                        "profile_firstname" => $ldap_firstname,
                                        "profile_lastname" => $ldap_lastname,
                                        "name" => $_POST['name']);
                ceo_vision_create_content_profil($account_infos);
                
                //on ajoute l'utilisateur au groupe ldap email contributor
                ceo_vision_insert_user_email_contributors($account->name);

                //on ajoute l'utilisateur au groupe MANAGER si il est manager       
                if($account->roles[4] == "manager"){
                    ceo_vision_insert_user_manager($account->name);
                }elseif($account->roles[5] !== "extranet"){
                     ceo_vision_insert_user_standard($account->name);
                }
                
              if(module_exists('ceo_vision_workflow')){ 
                $account->profile_firstname = $ldap_firstname;
                $account->profile_lastname = $ldap_lastname;
                ceo_vision_bonita_create_user($account);
                ceo_vision_bonita_replic_manager($account);
              }

            break;
        
            case 'delete':
                ceo_vision_delete_user_ldap_group($account->name, "EMAIL_CONTRIBUTORS", "group_node");
                ceo_vision_delete_user_ldap_group($account->name, "MANAGER", "group_node");
            break;
       }
}

function ceo_vision_ui_cmis_service($url, $properties, $settings) {

    //if(variable_get("cmis_sudo_admin", false) === true){
    global $cmis_sudo_admin;
     if($cmis_sudo_admin === true){
         $pass_clear=ceo_vision_get_admin_pwd();
       if($pass_clear!==null){
            $settings['password'] = $pass_clear;
        }else{
                 drupal_set_message(t('Vous avez perdu votre session.Veuillez vous reconnecter'));
                 return;
        }

      $settings['user'] = "admin";

    }else{       

       /* ebwms CMIS repository extras */
       global $user;
       //$pass_clear=$_SESSION['pass_clear'];
       $pass_clear = ceo_vision_get_password();
      
       if($pass_clear!==null){      
           
            $settings['password'] = utf8_decode(utf8_encode(trim($pass_clear)));     
            
       }elseif(strpos($_SERVER['HTTP_REFERER'], '/user/reset/') !== FALSE) {
           
       }else{
                 //drupal_set_message(t('Vous avez perdu votre session.Veuillez vous reconnecter'));
                 return;
       }

      $settings['user'] = $user->name;
      //$settings['password'] = $user->pass;

    }
      try{
      return cmis_common_cmis_service($url, $properties, $settings);
      }catch (CMISException $e) {

      }
}


/*DEBUG*/
function testnewrelic(){
  header(':', true, 418);
    header('X-PHP-Response-Code: 418', true, 418);
}

function ceo_vision_ui_menu() { 
   
    
     $items['manage_pdf_to_ocr'] = array(
    'title'            => 'Manage PDF to OCR',
    'page callback'    => 'ceo_vision_manage_pdf_to_ocr',
    'page arguments'   => array(),
    'access arguments' =>array('access statistics'),
    'access callback'=>TRUE,      
    'type'             => MENU_CALLBACK,
    );
        
   $items['manage_double_nodes'] = array(
    'title'            => 'Manage doubles nodes',
    'page callback'    => 'ceo_vision_manage_double_nodes',
    'page arguments'   => array(),
    'access arguments' =>array('access statistics'),
    'access callback'=>TRUE,      
    'type'             => MENU_CALLBACK,
    );
   
    $items['public_space'] = array(
    'title'            => 'Public Space',
    'page callback'    => 'ceo_vision_public_page',
    'page arguments'   => array(),
    'access arguments' =>array('administer revision'),
    'access callback'  => 'is_not_extranet',      
    'type'             => MENU_CALLBACK,
    );
   
    $items['manage_double_nodes/safe_delete/%node'] = array(
    'title'            => 'Manage doubles nodes',
    'page callback'    => 'ceo_vision_manage_double_nodes_safe_delete',
    'page arguments'   => array(2),
    'access arguments' =>array('access statistics'),
    'access callback'=>TRUE,      
    'type'             => MENU_CALLBACK,
    );
    
    
    /*DEBUG */
   $items['testteapot'] = array(
    'title'            => 'Get a document object',
    'page callback'    => 'testnewrelic',
    'page arguments'   => array(2),
    'access arguments' =>array('access content'),
    'access callback'=>TRUE,      
    'type'             => MENU_CALLBACK,
    ); 
   
    $items['templates/get'] = array(
    'title'            => 'get list of templates',
    'page callback'    => 'ceo_vision_get_templates_new_document',
    'page arguments'   => array(2),
    'access arguments' =>array('access content'),
    'access callback'=>TRUE,      
    'type'             => MENU_CALLBACK,
    ); 
    
    $items['language/detect'] = array(
    'title'            => 'get detected language for document',
    'page callback'    => 'ceo_vision_get_detected_language_new_document',
    'page arguments'   => array(2),
    'access arguments' =>array('access content'),
    'access callback'=>TRUE,      
    'type'             => MENU_CALLBACK,
    ); 
    
    
   
    /*end DEBUG*/
    
    /* TODO test API */
   $items['api/getdocument/%'] = array(
    'title'            => 'Get a document object',
    'page callback'    => 'api_getdoc',
    'page arguments'   => array(2),
    'access arguments' =>array('access content'),
    'access callback'=>TRUE,
      
    'type'             => MENU_CALLBACK,
    );

     //TODO le déplacer dans ceo_vision_admin avec les autres pupop
     $items['modal/%ctools_js/pupop_gofast_publish_document_deletion/%node'] = array(
    'title'            => 'Delete a publication',
    'page callback'    => 'pupop_gofast_publish_document_deletion',
    'page arguments'   => array(1, 3),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
    'file' => '../ceo_vision_admin/ceo_vision_admin.pupop.inc'
    ); 
     
       // Add Node (subspace) :
  foreach (node_get_types('types', NULL, TRUE) as $type){
    $type_url_str = str_replace('_', '-', $type->type);
    $items['modal/%ctools_js/node/add/' . $type_url_str] = array(
      'title' => drupal_ucfirst($type->name),
      'title callback' => 'check_plain',
      'page callback' => 'pupop_node_add_form',
      'page arguments' => array(1, 4, 5),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'description' => $type->description,
      'file' => '../ceo_vision_admin/ceo_vision_admin.pupop.inc'
//      'file' => 'node.pages.inc',
  );
}

      
//field_validators
    //on surcharge l'url d'autocompletion des users
     $items['userreference/autocomplete'] = array(
            'title' => 'Userreference autocomplete',
            'page callback' => 'ceo_vision_userreference_autocomplete',
            'access arguments' => array('access content'),
            'type' => MENU_CALLBACK
    );
     
     // page de synthese "mes forums"
     $items['forums/summary'] = array(
            'menu_name' => "primary-links",
            'title' => t('My forums'),
            'page callback' => 'ceo_vision_forums_summary',
            'access arguments' => array('access content'),
            'type' => MENU_NORMAL_ITEM
    );
     
      


     $items['managemembers/submit/ahah'] = array(
            'page callback' =>'ceo_vision_ui_managemembersform_submit_ahah',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );
     
     
      // url of the page will be 'http://your_drupal_project/ajax_page'
      $items['comment/reply/%node'] = array(
        'title' => 'Reply to comment',
        'page callback' => 'ceo_vision_ui_comment_reply',
        'page arguments' => array(2),
        'access callback' => 'node_access',
        'access arguments' => array('view', 2),
        'type' => MENU_CALLBACK,
        'file' => 'ceo_vision_ui_1.inc',
      );
      $items['books/group'] = array(
            'page callback' =>'ceo_vision_ui_books_group',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );

       $items['preview/get'] = array(
            'page callback' =>'ceo_vision_ui_preview_get',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );

      $items['book/reorder'] = array(
            'page callback' =>'ceo_vision_ui_book_reorder',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );

       $items['toc/get'] = array(
            'page callback' =>'ceo_vision_ui_get_toc_book',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );

      $items['profile/dialog'] = array(
            'page callback' =>'ceo_vision_ui_profile_dialog',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );

      $items['admins/orga'] = array(
            'page callback' =>'ceo_vision_ui_admins_orga',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );

      $items['admins/orgadn'] = array(
            'page callback' =>'ceo_vision_ui_admins_orga_dn',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );
      
       $items['explore/popup'] = array(
            'page callback' =>'ceo_vision_ui_popup_explore',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );

//       $items['my/orgas'] = array(
//            'page callback' =>'ceo_vision_ui_my_orgas',
//            'type' => MENU_CALLBACK,
//            'access arguments' =>array('access content'),
//            'access callback'=>TRUE,
//       );
       $items['alfsync/delete'] = array(
            'page callback' =>'ceo_vision_ui_delete_node',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );

        $items['email/getbody'] = array(
            'page callback' =>'ceo_vision_ui_get_email_body',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );
        $items['pdf/getsource'] = array(
            'page callback' =>'ceo_vision_ui_get_html_pdf_viewer',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );
        /*annotations*/
         $items['annotation/endpoints/get_annotations'] = array(
            'page callback' =>'ceo_vision_ui_get_annotations',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
        );
         
         $items['annotation/endpoints/create_annotation'] = array(
            'page callback' =>'ceo_vision_ui_create_annotations',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
        );
         
          $items['annotation/endpoints/update_annotation'] = array(
            'page callback' =>'ceo_vision_ui_update_annotation',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
        );
          
        $items['annotation/endpoints/delete_annotation'] = array(
            'page callback' =>'ceo_vision_ui_delete_annotation',
            'page arguments' => array(3),
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
        );
         
         
         /*end annotation*/
        
        
         $items['unpublished'] = array(
            'page callback' =>'ceo_vision_ui_unpublished',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access statistics'),
            //'access callback'=>TRUE,
      );
         
       $items['group/alfresco/edit'] = array(
            'page callback' =>'ceo_vision_ui_update_groupe_name_alfresco',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
      );
       
       $items['ldap/sync/users'] = array(
            'page callback' =>'ceo_vision_ui_ldap_sync_users',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access statistics'),
            'access callback'=>TRUE,
       );

//       $items['is/manager'] = array(
//            'page callback' =>'ceo_vision_ui_is_manager',
//            'type' => MENU_CALLBACK,
//            'access arguments' =>array('access content'),
//            'access callback'=>TRUE,
//       );

//
//       $items['my/groups'] = array(
//            'page callback' =>'ceo_vision_ui_my_groups',
//            'type' => MENU_CALLBACK,
//            'access arguments' =>array('access content'),
//            'access callback'=>TRUE,
//       );

       $items['update/index'] = array(
            'page callback' =>'ceo_vision_ui_update_index_node',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );

       $items['list/getgid'] = array(
            'page callback' =>'ceo_vision_ui_get_node_id',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['create/node'] = array(
            'page callback' =>'ceo_vision_ui_create_node',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
        $items['delete/privatemsg'] = array(
            'page callback' =>'ceo_vision_ui_delete_privatemsg',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
        
         $items['ajax/get/activityfeed'] = array(
            'page callback' =>'ceo_vision_ui_get_activity_feed',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
         
         $items['ajax/show/audit'] = array(
            'page callback' =>'ceo_vision_ui_ajax_get_audit',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
        
        
        $items['ajax/node/inline/edit'] = array(
            'page callback' =>'ceo_vision_ui_inline_editing_node',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
        
        $items['ajax/messages/new'] = array(
            'page callback' =>'ceo_vision_ui_ajax_new_message',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['ajax/messages/view'] = array(
            'page callback' =>'ceo_vision_ui_ajax_privatemsg_view',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['ajax/comment/reply'] = array(
            'page callback' =>'ceo_vision_ui_ajax_comment_reply',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['ajax/comment/comments'] = array(
            'page callback' =>'ceo_vision_ui_ajax_comment_comments',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
        $items['ajax/comment/edit'] = array(
            'page callback' =>'ceo_vision_ui_ajax_edit_comment',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['ajax/comment/delete'] = array(
            'page callback' =>'ceo_vision_ui_ajax_delete_comment',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       $items['ajax/popupchat'] = array(
            'page callback' =>'ceo_vision_ui_ajax_history_chat',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       
       $items['ajax/get/keywords'] = array(
            'page callback' =>'ceo_vision_ui_ajax_get_keywords',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       $items['ajax/get/keywords/suggest'] = array(
            'page callback' =>'ceo_vision_dynamic_suggest_taxo',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       $items['ajax/get/alfresco/file/form'] = array(
            'page callback' =>'ceo_vision_ui_update_alfresco_file',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
         // Manage tags (Taxonomy)
        $items['modal/%ctools_js/edit/taxo/ithit'] = array(
          'title' => 'Manage keywords',
          'type' => MENU_CALLBACK,
          'page callback' => 'pupop_manage_taxonomy_ithit',
          'page arguments' => array(1),
          'access arguments' =>array('access content'),
          'file' => '../ceo_vision_admin/ceo_vision_admin.pupop.inc'
        );
       
       $items['ajax/set/alfresco/file/formvariable'] = array(
            'page callback' =>'ceo_vision_ui_update_alfresco_file_formvariable',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       
       
       $items['ajax/get/revision/form'] = array(
            'page callback' =>'ceo_vision_ui_get_node_revision_form',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       $items['ajax/get/revisions'] = array(
            'page callback' =>'ceo_vision_ui_get_alfresco_revisions',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       $items['ajax/get/urldownloadmodify'] = array(
            'page callback' =>'ceo_vision_ui_get_urldownloadmodify',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );   
       
        $items['ajax/get/blocrightnode'] = array(
            'page callback' =>'ceo_vision_ajax_get_node_bloc_right_infos',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
        
        $items['ajax/getactivitytab'] = array(
            'page callback' =>'ceo_vision_get_html_activity_tab',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
       
        
        $items['ajax/resynchro/doc'] = array(
            'page callback' =>'ceo_vision_resynchro_orphaned_document',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
        
        $items['ajax/add/readonly'] = array(
            'page callback' =>'ceo_vision_ui_ajax_add_user_readonly',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
        
         $items['ajax/remove/readonly'] = array(
            'page callback' =>'ceo_vision_ui_ajax_remove_user_readonly',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
         
         $items['ajax/getblock/managemembers'] = array(
            'page callback' =>'ceo_vision_get_block_manage_member',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
         
         $items['ajax/minorversions/delete'] = array(
            'page callback' =>'ceo_vision_delete_minors_versions',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
         
        $items['ajax/subscribe_user_hide_carousel'] = array(
            'page callback' =>'ceo_vision_subscribe_user_hide_carousel',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
        $items['ajax/show_carousel'] = array(
            'page callback' =>'ceo_vision_carousel_show_manually',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
        
      
         
              $items['dragdrop/upload'] = array(
            'page callback' =>'ceo_vision_dragdrop_upload',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       ); 
        
       
   
       $items['alfresco_ajax/invalide_cache'] = array(
            'page callback' =>'ceo_vision_ui_invalide_cache',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['alfresco_ajax/regenere_cache'] = array(
            'page callback' =>'ceo_vision_ui_regenere_cache',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['alfresco_ajax/unlock_document'] = array(
            'page callback' =>'ceo_vision_ui_unlock_document',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       $items['alfresco_ajax/unlock_document_todo'] = array(
            'page callback' =>'ceo_vision_ui_unlock_document_todo',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       
       $items['alfresco_ajax/force_regenere_cache'] = array(
            'page callback' =>'ceo_vision_ui_force_regenere_cache',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['geteditable'] = array(
            'page callback' =>'ceo_vision_ui_get_editable_profile',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['geteditablenodeprofile'] = array(
            'page callback' =>'ceo_vision_ui_get_editable_node_profile',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['geteditabledate'] = array(
            'page callback' =>'ceo_vision_ui_get_editable_date_node',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
      
       $items['doctree/getdocs'] = array(
            'page callback' =>'ceo_vision_ui_doctree_getdocs',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['doctree/createsubfolder'] = array(
            'page callback' =>'ceo_vision_ui_doctree_createsubfolder',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['doctree/renamesubfolder'] = array(
            'page callback' =>'ceo_vision_ui_doctree_renamesubfolder',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['doctree/refreshtree'] = array(
            'page callback' =>'ceo_vision_ui_doctree_refresh',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       
       $items['alfresco_ajax/tag/majorversion'] = array(
            'page callback' =>'ceo_vision_ui_tag_majorversion',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
        $items['ajax/relationship/create'] = array(
            'page callback' =>'ceo_vision_user_relationships_ui_request_ajax',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
         $items['ajax/delete/node'] = array(
            'page callback' =>'ceo_vision_ajax_node_delete',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
       $items['ajax/movetranslations'] = array(
            'page callback' =>'ceo_vision_ajax_move_translations',
            'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
       );
         $items['ldap/emailcontributors'] = array(
        'page callback' =>'ceo_vision_add_all_users_in_email_contributors',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('access content'),
        'access callback'=>TRUE,
        );

         $items['edit/usergroups'] = array(
        'page callback' =>'ceo_vision_ui_join_groups_form_display',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('access content'),
        'access callback'=>TRUE,
        );

//         $items['ajax/edit/usergroups'] = array(
//        'page callback' =>'ceo_vision_ui_join_groups_form_display_ajax',
//        'type' => MENU_CALLBACK,
//        'access arguments' =>array('access content'),
//        'access callback'=>TRUE,
//        );
         
         $items['ajax/edit/user_og'] = array(
        'page callback' =>'ceo_vision_ui_join_og_form_display_ajax',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('access content'),
        'access callback'=>TRUE,
        );
//
//        $items['ajax/subscribe/groups'] = array(
//        'page callback' =>'ceo_vision_ui_join_groups_submit',
//        'type' => MENU_CALLBACK,
//        'access arguments' =>array('access content'),
//        'access callback'=>TRUE,
//        );

        $items['ajax/subscribe/og'] = array(
        'page callback' =>'ceo_vision_ui_join_og_submit',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('access content'),
        'access callback'=>TRUE,
        );

        $items['ajax/get/groups'] = array(
        'page callback' =>'ceo_vision_ui_get_groups_ajax',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('access content'),
        'access callback'=>TRUE,
        );

         $items['ajax/fbstatus'] = array(
        'page callback' =>'ceo_vision_ui_get_fb_status_view',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('access content'),
        'access callback'=>TRUE,
        );
         
         
         $items['ajax/remove_line_from_variable'] = array(
        'page callback' =>'ceo_vision_remove_line_from_variable',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('administer site configuration'),      
        );
         
        $items['remove_line_from_variable'] = array(
        'page callback' =>'ceo_vision_container_show_form_alter_variables',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('administer site configuration'),    
        );
        
        $items['ajax/remove_preview_from_variable_exclusion'] = array(
        'page callback' =>'ceo_vision_remove_line_from_variable',
        'type' => MENU_CALLBACK,
        'access arguments' =>array('access content'),      
        );
        
         
        
         
        $items['node/%node/listrevisions'] = array(
        'title' => 'Revisions',
        'page callback' => 'ceo_vision_revision_overview',
        'page arguments' => array(1),
//        'access callback' => '_node_revision_access',
//        'access arguments' => array(1),
        'access arguments' =>array('access content'),
        'access callback'=>TRUE,
        'weight' => 2,
        'type' => MENU_CALLBACK,
        );
        
        
       

       // Auto-completes available user names & removes duplicates.
      $items['ogmembers/user-name-autocomplete'] = array(
        'page callback'    => 'ceo_vision_ui_user_name_autocomplete',
        'access callback'  => TRUE,
        'access arguments' => array('write privatemsg'),
        'type'             => MENU_CALLBACK,
        'weight'           => -10,
      );
      
      // Auto-completes available user names & removes duplicates, used for free fields because it return not a username but a string firstname, lastname
      $items['ogmembers/user-name-autocomplete-free'] = array(
        'page callback'    => 'ceo_vision_ui_user_name_autocomplete_free',
        'access callback'  => TRUE,
        'access arguments' => array('write privatemsg'),
        'type'             => MENU_CALLBACK,
        'weight'           => -10,
      );
      
       // Auto-completes available user names & removes duplicates.
      $items['ogmembers/group-name-autocomplete'] = array(
        'page callback'    => 'ceo_vision_ui_og_name_autocomplete',
        'access callback'  => TRUE,
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
        'weight'           => -10,
      );

       //page "mon contenu" qui affiche les contenus privés du user
      $items['content/my'] = array(
        'page callback'    => 'ceo_vision_ui_content_my',
        'access callback'  => TRUE,
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
      );
      
      //afficher message d'alert pour prevenir propagation des membres
      $items['ceo_vision/alert_propagation'] = array(
        'page callback'    => 'ceo_vision_alert_propagation',
        'access callback'  => TRUE,
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
      );
      

        //formulaire de gestion de taxo
      $items['edit/taxo/%node'] = array(
        'page callback'    => 'ceo_vision_ui_managetaxoform_show',
        'access callback'  => TRUE,
        'access arguments' => array('access content'),
        'type'             => MENU_CALLBACK,
        'page arguments' => array(2),
      );




   $items['<front>'] = array(
    'title' => 'GoFast',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => "primary-links",
    'description' => "Accueil",
    'weight' => -50,
  );

   $title_mycontent = t("My Space");
   $items['mycontent'] = array(
      'title' => $title_mycontent,
      'menu_name' => "primary-links",
      'page callback' => 'drupal_goto',
      'page arguments' => array('content/my'),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
  );
   
    $items['mysubscriptions'] = array(
      'title' => t("My Subscriptions"),
      'menu_name' => "primary-links",
      'page callback' => 'drupal_goto',
      'page arguments' => array('test'),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
  );

   $items['createdocument'] = array(
      'title' => t("Document"),
      'menu_name' => "primary-links",
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/contenu', 'query' => array("type" => "document")),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
  );

     $title_create_url = t("Import External page");
   $items['importurl'] = array(
      'title' => $title_create_url,
      'menu_name' => "primary-links",
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/contenu', 'query' => array("type" => "document", "type2" => "url")),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
  );
   
    $title_create_node = t("Create Page");
   $items['createpage'] = array(
      'title' => $title_create_node,
      'menu_name' => "primary-links",
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/contenu', 'page'),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
  );
   
   $items['createforum'] = array(
      'title' => t("Create Forum"),
      'menu_name' => "primary-links",
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/contenu', 'query' => array('type' => 'forum')),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
  );

        /*
       $items['ajax/messages/new'] = array(
    'title'            => 'Write new message',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ajax_privatemsg_new', 2, 3, NULL),
    'access callback'  => 'privatemsg_user_access',
    'access arguments' => array('write privatemsg'),
    'type'             => MENU_CALLBACK,
    'weight'           => -3,
  );
*/
   
    $items['ceov/repair/notifs'] = array(
    'page callback'    => 'ceo_vision_repare_subscriptions',
        'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
  );
    
    
        $items['ceov/repair/deleted_documents'] = array(
            'page callback'    => 'ceo_vision_ui_check_integrity_deleted_documents',
                'type' => MENU_CALLBACK,
                    'access arguments' =>array('access content'),
                    'access callback'=>TRUE,
          );
    
    
    
    
    //TODO
      $items['ceov/runcron/manually'] = array(
    'page callback'    => 'ceo_vision_runcron_manually',
        'type' => MENU_CALLBACK,
            'access arguments' =>array('access content'),
            'access callback'=>TRUE,
  );
      
      
 
      
     $items['list/user_membership'] = array(
         'page callback' =>'ceo_vision_get_users_membership',
         'type' => MENU_CALLBACK,
         'access arguments' =>array('access content'),
         'access callback'=>TRUE,
    );
     
     
     
     /*AJAXFILEBROWSER*/
      $items['ajax/getnidfromhref'] = array(
         'page callback' =>'ceo_vision_get_nid_from_href',
         'type' => MENU_CALLBACK,
         'access arguments' =>array('access content'),
         'access callback'=>TRUE,
    );
      
        $items['ajax/getformmanagetaxo'] = array(
         'page callback' =>'ceo_vision_get_form_manage_taxo',
         'type' => MENU_CALLBACK,
         'access arguments' =>array('access content'),
         'access callback'=>TRUE,
    );
      
     
     
      /* DEVELOPPEMENT POUR MEDOR&CIE */
      /* Multi theming */
      $items['ceov/manage_themes'] = array(
         'page callback' =>'ceo_vision_manage_themes_show',
         'type' => MENU_CALLBACK,
         'access arguments' =>array('administer site configuration'),
         'access callback'=>TRUE,
    );
     /* END DEVELOPPEMENT POUR MEDOR&CIE */  
      
      
    /* Gestion en masse des membres de groupe */
  
      $items['ceov/bulk_members'] = array(
         'page callback' =>'ceo_vision_manage_bulk_members',
         'type' => MENU_CALLBACK,
         'access arguments' =>array('administer site configuration'),
         'access callback'=>TRUE,
    );
     /* END Gestion en masse des membres de groupe */  
   
       $items['btc/change_username'] = array(
         'page callback' =>'ceo_vision_ui_btc_change_username',
         'type' => MENU_CALLBACK,
         'access arguments' =>array('administer site configuration'),
         'access callback'=>TRUE,
    );
       
       
    $items['check/integrity'] = array(
         'page callback' =>'gofast_get_json_object_from_node',
         'type' => MENU_CALLBACK,
          'access arguments' =>array('access content'),
         'access callback'=>TRUE,
    ); 
       
   $items['transform/group/folder/%'] = array(
         'page callback' =>'ceo_vision_ui_btc_transform_space_children_into_folder',
         'type' => MENU_CALLBACK,
        'page arguments' => array(3),
         'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    );  
     
      
      
  return $items;
}


 function ceo_vision_ui_books_group() {
      $nid=$_GET['nidBook'];

      $groups = array();
     if(!is_null($nid) && $nid!=='') {
           // Recupérer les groupes
           $sql=db_query("select nid,title from node where nid
                        in(select group_nid from og_ancestry where nid=$nid)

          ");
     }
          while($datas=db_fetch_object($sql)){
                // $groups[$datas->nid]=$datas->title;
                 $groups[]=array('nid'=>$datas->nid,'title'=>$datas->title);
          }


       drupal_json(array('parents_group' => $groups));

}


function ceo_vision_ui_langNotTranslate($transl,$nid,$language,$type) {
     $langs=array();

    if($transl!=null) {
         foreach($transl as $key=>$value){
             array_push($langs,$key);
          }

          switch(count($langs)) {
                case 0:
                       break;
                case 1:
                       // Recupérer les langues non traduits
                        $sql=db_query("select name,language from languages where language!='$langs[0]'");
                        $output .= theme_lang($sql,$language,$nid,$type);
                        break;
                 case 2:
                        // Recupérer les langues non traduits
                        $sql=db_query("select name,language from languages where language!='$langs[0]' and language!='$langs[1]'");
                        $output .= theme_lang($sql,$language,$nid,$type);
                         break;
                  case 3:
                        // Recupérer les langues non traduits
                        $sql=db_query("select name,language from languages where language!='$langs[0]' and language!='$langs[1]' and language!='$langs[2]'");
                        $output .= theme_lang($sql,$language,$nid,$type);
                         break;
                  case 4:
                        // Recupérer les langues non traduits
                        $sql=db_query("select name,language from languages where language!='$langs[0]' and language!='$langs[1]' and language!='$langs[2]' and language!='$langs[3]'");
                        $output .= theme_lang($sql,$language,$nid,$type);
                         break;
           }
    }else{
             // Recupérer toutes les langues non traduits
             $sql=db_query("select name,language from languages where language !='$language'");
             $output .= theme_lang($sql,$language,$nid,$type);
      }

  return $output;
}
/*
 * Affiche les drapeaux pour la traductions de nodes
 */
function theme_lang($sql,$language,$nid,$type) {
      $traducs=array();
      $mynode = node_load($nid);
      
      //on preselectionne le type de contenu
      if($mynode->type == "alfresco_item"){
          $mytype = "document";
      }elseif($mynode->type == "forum"){
           $mytype = "forum";
      }elseif($mynode->type == "webform"){
           $mytype = "webform";
      }else{
          $mytype = "page";
      }
      
      if($mytype == "webform"){
         $url = "webform";
      }else{
         $url = "contenu";
      }
      
      //on remplit les groupes
      if(count($mynode->og_groups) > 0){
          $gids = "";
          foreach($mynode->og_groups as $mynid=>$value){
              $gids.= $mynid.",";
          }
      }
      $gids = rtrim($gids, ",");
      //si c'est un doc je rempli l'emplacement
      if($mynode->type == "alfresco_item"){
          //je recupere l'emplacement du doc
        $repositoryId=alfresco_getRepository();
         global $cmis_sudo_admin;
        $cmis_sudo_admin = true;
        $parent = cmisapi_getFolderParent($repositoryId, $mynode->reference);
        //variable_set("cmis_sudo_admin", false);
        $cmis_sudo_admin = false;
        $emplacements=array();

         foreach($parent->objectList as $parent){
             $path = $parent->properties['cmis:path'];
              
             $path = str_replace("\'", "\\\'", $path);
             $path = str_replace("'", "\'", $path);
             $path = str_replace("_", "*8*", $path);
             $path = str_replace("/", "_", $path);
             $emplacements[]=  $path;      
        }
       
         //setcookie("destination", $emplacements[0], time() + 31536000, '/');
          
//          
      }
      
      
      while($LANGS=db_fetch_object($sql)){
         $name=$LANGS->name;
         $sigle=$LANGS->language;
         if (preg_match("/_/",$type)) {
             $type=str_replace('_','-',$type);
         }
         if($sigle=='fr') {
            $txt=t('translate in french');          
            $ht = url("node/add/".$url,  array('query' => 'translation='.$nid.'&language=fr&type='.$mytype."&gids[]=".$gids,'absolute' => TRUE));
            $title="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_FR_add.png ' width='16px' height='16px' alt='French' title='$txt' >";
            $output .= "<span style='cursor:pointer;' onclick='addCookieDestinationTraduction(\"".$emplacements[0]."\", \"".$ht."\")'>".$title."</span>";
            
            $output .= '<span>&nbsp</span>';
         }
         if($sigle=='it') {
            $txt=t('translate in italian');
            $ht = url("node/add/".$url,  array('query' => 'translation='.$nid.'&language=it&type='.$mytype."&gids[]=".$gids,'absolute' => TRUE));
            $title="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_IT_add.png ' width='16px' height='16px' alt='italian' title='$txt' >";
            $output .= "<span style='cursor:pointer;' onclick='addCookieDestinationTraduction(\"".$emplacements[0]."\", \"".$ht."\")'>".$title."</span>";
            
            $output .= '<span>&nbsp</span>';
         }
         if($sigle=='de') {
            $txt=t('translate in german');
            $ht = url("node/add/".$url,  array('query' => 'translation='.$nid.'&language=de&type='.$mytype."&gids[]=".$gids,'absolute' => TRUE));
            $title="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_DE_add.png ' width='16px' height='16px' alt='german' title='$txt' >";
            $output .= "<span style='cursor:pointer;' onclick='addCookieDestinationTraduction(\"".$emplacements[0]."\", \"".$ht."\")'>".$title."</span>";
            
            $output .= '<span>&nbsp</span>';
         }
         if($sigle=='en') {
            $txt=t('translate in english');
            $ht = url("node/add/".$url,  array('query' => 'translation='.$nid.'&language=en&type='.$mytype."&gids[]=".$gids,'absolute' => TRUE));
            $title="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_EN_add.png ' width='16px' height='16px' alt='german' title='$txt' >";
            $output .= "<span style='cursor:pointer;' onclick='addCookieDestinationTraduction(\"".$emplacements[0]."\", \"".$ht."\")'>".$title."</span>";
            $output .='<span>&nbsp</span>';
         }
         if($sigle=='es') {
            $txt=t('translate in spanish');
            $ht = url("node/add/".$url,  array('query' => 'translation='.$nid.'&language=es&type='.$mytype."&gids[]=".$gids,'absolute' => TRUE));
            $title="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_ES_add.png ' width='16px' height='16px' alt='spanish' title='$txt' >";
            $output .= "<span style='cursor:pointer;' onclick='addCookieDestinationTraduction(\"".$emplacements[0]."\", \"".$ht."\")'>".$title."</span>";
            $output .='<span>&nbsp</span>';
         }
          if($sigle=='nl') {
            $txt=t('translate in Nederland');
            $ht = url("node/add/".$url,  array('query' => 'translation='.$nid.'&language=nl&type='.$mytype."&gids[]=".$gids,'absolute' => TRUE));
            $title="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_NL_add.png ' width='16px' height='16px' alt='Nederland' title='$txt' >";
            $output .= "<span style='cursor:pointer;' onclick='addCookieDestinationTraduction(\"".$emplacements[0]."\", \"".$ht."\")'>".$title."</span>";
            $output .='<span>&nbsp</span>';
         }

      }
      
      return $output;

}
/*
 *Affiche les drapeaux des versions traduites du node
 */
 function affiche_drapeaux($tr,$node){
    if($tr!==null) {
         $lang_courants=$node->language;
         $versions_traduits=array();
         foreach($tr as $key=>$value){
            array_push($versions_traduits,$key);
         }
         for($i=0;$i<count($versions_traduits);$i++){
             if($versions_traduits[$i]!==$lang_courants){

                   $objL=$tr[$versions_traduits[$i]];
                   $nid=$objL->nid;
                   $lang=$objL->language;

                     switch ($lang) {
                          case 'fr':
                                 $txt=t('french version');
                                 $img="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_FR.png ' width='16px' height='16px' alt='French' title='$txt' >";
                                $output .=  l($img, 'node/'.$nid.'', array('attributes' => array("nid" => $nid, "class" => "ajax-navigate "), 'html' => TRUE));
                          break;
                          case 'en':
                                  $txt=t('english version');
                                  $img="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_EN.png ' width='16px' height='16px' alt='english' title='$txt' >";
                                 $output .= l($img, 'node/'.$nid.'', array('attributes' => array("nid" => $nid, "class" => "ajax-navigate "), 'html' => TRUE));
                          break;
                          case 'it':
                                  $txt=t('italian version');
                                  $img="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_IT.png ' width='16px' height='16px' alt='Italian' title='$txt' >";
                                  $output .= l($img, 'node/'.$nid.'', array('attributes' => array("nid" => $nid, "class" => "ajax-navigate "), 'html' => TRUE));
                          break;
                          case 'de':
                                  $txt=t('german version');
                                  $img="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_DE.png ' width='16px' height='16px' alt='German' title='$txt' >";
                                 $output .= l($img, 'node/'.$nid.'', array('attributes' => array("nid" => $nid, "class" => "ajax-navigate "), 'html' => TRUE));
                          break;
                          case 'es':
                                  $txt=t('spanish version');
                                  $img="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_ES.png ' width='16px' height='16px' alt='Spanish' title='$txt' >";
                                  $output .= l($img, 'node/'.$nid.'', array('attributes' => array("nid" => $nid, "class" => "ajax-navigate "), 'html' => TRUE));
                          break;
                           case 'un':
                                  $txt=t('Undefined language version');
                                  $img="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_UN.png ' width='16px' height='16px' alt='Undefined' title='$txt' >";
                                  $output .=  l($img, 'node/'.$nid.'', array('attributes' => array("nid" => $nid, "class" => "ajax-navigate "), 'html' => TRUE));
                          break;
                           case 'nl':
                                  $txt=t('Nederland version');
                                  $img="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_NL.png ' width='16px' height='16px' alt='Nederland' title='$txt' >";
                                   $output .= l($img, 'node/'.$nid.'', array('attributes' => array("nid" => $nid, "class" => "ajax-navigate "), 'html' => TRUE));
                          break;

                    default:
                        break;
                }
          }
      }
    }
    
    return $output;
 }

 /*
  * @return html for display the user's profile
 */

 function ceo_vision_ui_profile_dialog(){
     global $user;
     global $account;

     $userId=$_GET['userId'];
     //$userId=
     if(isset($userId) && $userId!=='') {
            if(is_numeric($userId)){
                $account = user_load(array('uid' => trim($userId)));
            }else{
                $account = user_load(array('name' => trim($userId)));
            }
            $base_url=$GLOBALS['base_url'];
            if($account->picture!==''){
                $picture='<img src="'.$base_url.'/'.$account->picture.'" width="50px" height="50px" alt="photo" >';
            }else{
                 $picture='<img src="/drupal/sites/default/files/pictures/picture-default.jpg" width="50px" height="50px" alt="photo" >';
            }
            $lg=$_SESSION['LAN_CUR'];
            $uid=$account->uid;
            try {
                   $user_point=userpoints_service_get($uid);
            } catch (Exception $exc) {
                echo $exc->getTraceAsString();
            }

            $links = '';


        if($user->uid !== $account->uid){ // @TODO : enlever toutes les ternaires!

            $links_icones = ceo_vision_get_icones_actions($account, $user);

            $links = "<td id='ami'style='font-size:11;'>$links_icones</td>";
         
        }
        
            $href_profile = url("user/$uid",array('absolute' => false));
            $status = _facebook_status_get_status_fast($account->uid); 
        
            $markup = '<div id="cadre" class="cadre_popup">
                      <table cellspacing="0" cellpadding="0" border="0">
                               <tr>
                                      <td id="pic" >'.$picture.'</br>'.t('Score:').$user_point->points.' </td>
                                       <td width="100%">
                                          <table id="profile_table" border="0">
                                              <tr border="0" style="border:none;"><td id="nom">'.$account->profile_firstname.'  '. $account->profile_lastname .'</td></tr>
                                              <tr><td id="entreprise">'.$account->profile_organisation.'</td></tr>
                                              <tr><td id="role" >'.$account->profile_title.'</td></tr>
                                              <tr><td id="orga" >'.$account->profile_organisation_unit.'</td></tr>
                                          </table>
                                      </td>
                               </tr>
                               <tr>
                                    <td colspan="2"> 
                                    <i>'.$status->message.'</i>
                                    </td>
                               </tr>
                               <tr>
                                    <td id="profile" style="font-size:11" width="30%"> <a href='.$href_profile.'> '.t("view profile").'</a> </td>
                                    '.$links.'
                              </tr>
                     </table>

              </div>
              ';
           print $markup;
     }
 }

 function view_current_lang($language) {
        switch ($language) {
                     case 'fr':
                          $titre=t('French');
                          return "<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_FR.png ' width='16px' height='16px' alt='French' title='$titre' >";
                     break;
                     case 'en':
                           $titre=t('english');
                           return "<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_EN.png ' width='16px' height='16px' alt='French' title='$titre' >";
                     break;
                     case 'de':
                           $titre=t('german');
                           return "<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_DE.png ' width='16px' height='16px' alt='german' title='$titre' >";
                     break;
                     case 'it':
                           $titre=t('italian');
                           return "<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_IT.png ' width='16px' height='16px' alt='german' title='$titre' >";
                    break;
                     case 'es':
                           $titre=t('spanish');
                           return "<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_ES.png ' width='16px' height='16px' alt='spanish' title='$titre' >";
                    break;
                    case 'un':
                           $titre=t('Undefined');
                           return "<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_UN.png ' width='16px' height='16px' alt='undefined' title='$titre' >";
                    break;
                    case 'nl':
                           $titre=t('Nederland');
                           return "<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/flag_NL.png ' width='16px' height='16px' alt='Nederland' title='$titre' >";
                    break;
                    default:
                    break;
         }
  }

 function ceo_vision_ui_init(){   
     
        //small specific Botanic snipet JS. replace all string <%login%> by the user's login on the html page
     global $user;
      drupal_add_js('var drupal_username = "'. $user->name.'"', 'inline');
   
      
      
    
     
//    drupal_add_js("sites/all/libraries/jquery-last/jquery.min.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/jquery-ui-last/jquery-ui.min.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/jeditable.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/jqtree/tree.jquery.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/jqtree/jquery.cookie.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/jquery_paginate.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/jquery.jeditable.datepicker.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/jquery.ui/ui/i18n/ui.datepicker-fr.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/ink/js/ink-all.min.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/custom-scrollbar-plugin/jquery.mCustomScrollbar.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/custom-scrollbar-plugin/jquery.mousewheel.min.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/ajax_file_browser/Browser/ITHitAJAXFileBrowserLoader.js",'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js(drupal_get_path('module', 'ceo_vision_ui') . '/deployJava.js');
//    drupal_add_js("sites/all/libraries/dynatable/jquery.dynatable.js", 'module', 'header', FALSE, TRUE, FALSE);
//    drupal_add_js("sites/all/libraries/ztree/js/jquery.ztree.all-3.5.min.js",'module', 'header', FALSE, TRUE, FALSE);
    
    
    
/*     <script type="text/javascript" src="/drupal/sites/all/libraries/jquery-last/jquery.min.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/jquery-ui-last/jquery-ui.min.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/jeditable.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/jqtree/tree.jquery.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/jqtree/jquery.cookie.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/jquery_paginate.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/jquery.jeditable.datepicker.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/jquery.ui/ui/i18n/ui.datepicker-fr.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/ink/js/ink-all.min.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/custom-scrollbar-plugin/jquery.mCustomScrollbar.js"></script>
<script type="text/javascript" src="/drupal/sites/all/libraries/custom-scrollbar-plugin/jquery.mousewheel.min.js"></script>
<script src="/drupal/sites/all/libraries/ajax_file_browser/Browser/ITHitAJAXFileBrowserLoader.js" type="text/javascript"></script>
<script src="/drupal/sites/all/modules/ceo_vision_ui/deployJava.js" type="text/javascript"></script>
<script src="/drupal/sites/all/libraries/dynatable/jquery.dynatable.js" type="text/javascript"></script>
<script src="/drupal/sites/all/libraries/ztree/js/jquery.ztree.all-3.5.min.js" type="text/javascript"></script>*/
     
     
     
     
     $ie7 = ceo_vision_test_is_ie_7();
     if($ie7 == true){
         drupal_set_message(t("You are using a version of Internet Explorer which is not compatible with GoFast"), "error");
     }
     //je declare la variable globale qui determine si les requetes cmis doivent se faire en admin ou non
     global $cmis_sudo_admin;
     $cmis_sudo_admin = false;
     global $user_password;
     $user_password = false; 
     global  $total_size;
     $total_size = 0;
     global $current_batch_node;
     $current_batch_node = false;
     
     global $force_full;
     $force_full = true;
     
     /* id du terme de taxonomie Archivé */
     global $taxo_archive_id;
     $taxo_archive_id = db_result(db_query('SELECT t.tid FROM {term_data} t where t.name= "%s" and t.vid = "%s"', "Archivé" , "12"));
      global $taxo_obsolete_id;
     $taxo_obsolete_id = db_result(db_query('SELECT t.tid FROM {term_data} t where t.name= "%s" and t.vid = "%s"', "Obsolète" , "12"));
     
     /* id de l'adm*/
     global $subadmin_id;
     $subadmin_name = "adm";
     $account = user_load(array('name' => $subadmin_name));
     $subadmin_id = $account->uid;
     
     global $ignore_cache_cmis;
     $ignore_cache_cmis = false;
     
     /* tableau des infos d'un document, obtenu grace a la fonction alfresco_get_infos($node)*/
     global $array_alfresco_get_infos;
     
      /* tableau des infos de la preview d'un document, obtenu grace a la fonction alfresco_get_pdf_rendition_url($node)*/
     global $array_alfresco_pdf_rendition_url;
     
     global $gofast_multifilling_list;
     $gofast_multifilling_list = array();
     //$gofast_multifilling_list = array("/Espace racine/Sites/Organisations/Juridique" => array("ref_destination" => "workspace://SpacesStore/490fa427-d0ea-4d27-bd40-a1c3dda24233",
     //                                                                                           "gid" => "257"));
    
     if(drupal_is_front_page()){
          drupal_add_js('$jq(document).ready(function() {                   
               reload_home();
         });','inline');  
     }
     

/* valeur par defaut de l'envoi de notif pour les nouveaux doc */
     global $notifications_content_disable;
   
    //on verifie si on est sur la page qui liste le contenu rattaché a un vocabulaire. Si oui on se redirige vers la page de recherche avec le mot clé comme recherche
       $url = $_GET['q'];
       $arr_url = explode("/",$url);
       if(count($arr_url)==3 && $arr_url[0]=="taxonomy" && $arr_url[1]=="term"){
           $term = taxonomy_get_term($arr_url[2]);
           header( 'Location: /search/apachesolr_search/'.$term->name); exit;
       }
       
       if($arr_url[0] == "node" && $arr_url[2] == "edit"){
           global $user;
           if($user->uid !== "1"){                       
            $node = node_load($arr_url[1]);
                if(ceo_vision_is_read_only_node($node) && ($node->type != "group_node" && $node->type != "orga" )){
                   
                     drupal_access_denied();
                     module_invoke_all('exit');
                     exit();
                 }
           }
       }
       
       if($arr_url[0] == "createpage"){
           header( 'Location: /node/add/contenu'); exit;
       }
       
      //parfois apres login, redirection vers cette URL (pas réussi a identifier un cas précis ou ca arrive)
       // dans le cas ou ca arrive, on se redirige vers l'accueil pour eviter une Page Not Found
        if(strpos(rawurldecode($url), '/node/ -1') !== false || strpos(rawurldecode($url), '/node/-1')){
             header( 'Location: /'); exit;
        }
        
        
        //si on essai d'aller sur le profil d'admin et que l'on n'est pas admin ==> access denied
         if($arr_url[0] == "user" && $arr_url[1] == "1"){
           global $user;
           if($user->uid !== "1"){
                drupal_access_denied();
                module_invoke_all('exit');
                exit();
            }
       }
       
       
       
       
       if(count($arr_url)==3 && $arr_url[0]=="node" && $arr_url[2]=="delete"){
           global $user;
           $mynode = node_load($arr_url[1]);
           if($user->uid == 1 || $user->uid == ceo_vision_ui_get_id_subadmin()){
               
           }elseif(node_access('delete', $mynode) && $mynode->type == "forum"){
               
           }else{
                header( 'Location: /node'); exit;
           }
       }
       
       
       //Si le user va sur le formulaire d'ajout/edition de document sans avoir fais un drag&drop precedement, je supprime la variable
       // qui indique qu'il y a un fichier temporaire en attente
       $dragdrop = $_GET['dragdrop'];
    

       if($arr_url[0] == "ajax-navigate-form-document" || $arr_url[0] == "ajax-navigate-form" || $arr_url[0] == "ajax-navigate-form-url" ||(count($arr_url)==3 && $arr_url[0]=="node" && $arr_url[1]=="add" && $arr_url[2]=="contenu") || (count($arr_url)==3 && $arr_url[0]=="node" && $arr_url[2]=="edit") || ($arr_url[0]=="ajax" && $arr_url[1]=="node" && $arr_url[2]=="inline")
            || ($arr_url[0] == "ajax" && $arr_url[1] == "get" &&  $arr_url[2] == "alfresco" && $arr_url[3] == "file" && $arr_url[3] == "form" ) || ($arr_url[0] == "explore" && $arr_url[1] == "popup") || ($arr_url[0] == "drupalchat")
            || $arr_url[0] == 'ajax-navigate-form-document-drop' || $arr_url[0] == "gofast-fbss-status-box"  || ($arr_url[0] == "list") || ($url == "gofast_get_block") || ($arr_url[0] == "taxonomy")
            || $url == "ajax/set/alfresco/file/formvariable" || $url == "fr/language/detect"){
           
            if($dragdrop == "1" || $arr_url[0] == "explore" || ($arr_url[0] == "drupalchat") || $arr_url[0] == 'ajax-navigate-form-document-drop' || $arr_url[0] == "gofast-fbss-status-box"
                    || ($arr_url[0] == "list") || ($url == "gofast_get_block") || ($arr_url[0] == "taxonomy")
               || $url == "ajax/set/alfresco/file/formvariable"){

            }else{
                 global $user;     
                if(variable_get($user->name."_file_form_populate", "default") !== "default"){

//                    $content_variable = variable_get($user->name."_file_form_populate", "default");
//                    //on supprime le fichier temporaire
//                    watchdog("debug url remove file", $url);
//                    unlink($content_variable["file_path"]);
//                    variable_del($user->name."_file_form_populate");
                }
            }
       }else{
         
             global $user;  
             if($dragdrop == "1"){
                 
             }else{
                if(variable_get($user->name."_file_form_populate", "default") !== "default"){

//                    $content_variable = variable_get($user->name."_file_form_populate", "default");
//                    //on supprime le fichier temporaire
//                    watchdog("debug url remove file2", $url);
//                    unlink($content_variable["file_path"]);
//                    variable_del($user->name."_file_form_populate");
                }
             }
       }
       
//set default picture
      $result=db_query("select name,picture from users");

        while ($resp = db_fetch_object($result)) {
            $name=$resp->name;
            $picture=$resp->picture;
            if($picture=='' && $name!==''){

               db_query("UPDATE users SET picture='sites/default/files/pictures/picture-default.jpg' WHERE name='$name'");
            }
       }

    drupal_add_css(drupal_get_path('module', 'tagging') . '/css/tagging.css');
    drupal_add_js(drupal_get_path('module', 'tagging') . '/js/tagging.plugin.js');
    drupal_add_js(drupal_get_path('module', 'tagging') . '/js/tagging.init.d6.js');
    drupal_add_js(drupal_get_path('module', 'views') . "/js/base.js");
    drupal_add_js('misc/collapse.js', 'core', 'header');
    drupal_add_js('misc/jquery.form.js');
    drupal_add_js('misc/ahah.js');
   
     drupal_add_js(drupal_get_path('module', 'date_popup') .'/date_popup.js');
     date_api_add_system_javascript();
     date_popup_load();
     jquery_ui_add('ui.datepicker');
   // date_popup_js_settings_id("edit-field-date-0-value", "timeEntry", $settings);
    
    drupal_add_js(drupal_get_path('module', 'ceo_vision_ui'). '/ceo_vision_notifications.js');
    drupal_add_js(drupal_get_path('module', 'ceo_vision_ui'). '/ceo_vision_ui.js');
    
    // On force le chargement de ces fichiers pour ne pas perdre le style lors
    // du refresh en ajax d'un forum après publication/edition/suppression d'un 
    // commentaire.
    drupal_add_css("modules/comment/comment.css");
    drupal_add_css("sites/all/modules/advanced_forum/styles/naked/advanced_forum.naked.images.css");
    drupal_add_css("sites/all/modules/advanced_forum/styles/naked/advanced_forum.naked.structure.css");
    drupal_add_css("sites/all/themes/fusion/fusion_starter/advanced_forum.silver_bells.images.css");
    drupal_add_css("sites/all/themes/fusion/fusion_starter/advanced_forum.silver_bells.style.css");

    global $user;
    
    if($user->uid != 1){
        drupal_add_js('$jq(document).ready(function() {
                      
                       $jq(".tabs.primary").css("display", "none");
                       $jq("#edit-roles-6-wrapper").css("display", "none");
                });','inline');  
    }
     drupal_add_js('
                    prevent_debug_view = Math.round(+new Date()/1000);
                     // isview = "false";
                      html_before = new Array();
                       inline_editing_current = false;
                       ckeditor_current_transform = false;
                     var timer_actualise_public = null;
                      time_drag = 0;
                      
                ','inline'); 
    
    $module_drupal_path = drupal_get_path('module', 'ckeditor');
    $editor_local_path  = ckeditor_path(TRUE);
    drupal_add_js($editor_local_path . '/ckeditor.js', 'module', 'footer');
    drupal_add_js($module_drupal_path .'/includes/ckeditor.utils.js', 'module', 'footer' );
    drupal_add_js(array('ckeditor' => array('ajaxToken' => drupal_get_token('ckeditorAjaxCall'), 'default_input_format' => variable_get('filter_default_format', 1), 'settings' => array('edit-footer', 'edit-header'))), 'setting');
     //drupal_add_js(array('ckeditor' => array('settings' => array("edit-comment" => array('toolbar' => $format, "toolbarStartupExpanded" => true)))), 'setting');
     
/*
    drupal_add_js('$jq(document).ready(function() {

                        hideCommentVersion();

                });','inline');*/
    
   // drupal_add_js(drupal_get_path('module', 'ceo_vision_ui'). '/ceo_vision_ui_sylvain.js');

//on recupere l'id de la taxonomie du type video et image, pour pouvoir remplacer leurs icones
     $tax_id_video = get_taxo_id_from_string("video/");
     $tax_id_image = get_taxo_id_from_string("image/");
    drupal_add_js('$jq(document).ready(function() {
      
       Drupal.behaviors.changeIcones2=function(context) {

        $jq("#block-ceo_vision_ui-2", context).removeClass("grid16-3");
        $jq("#block-ceo_vision_ui-2", context).addClass("grid16-4");
        $jq(".width99", context).removeClass("grid16-13");
          //remplacement du lien du terme de taxo video
          $(\'.taxonomy_term_'.$tax_id_video.'\', context).each(function() {

           $(this).children().html(\'<img src="/drupal/sites/all/themes/fusion/fusion_starter/img/new/type_video.png" width="16px" height="16px" alt="'.t("video").'" title="'.t("video").'" >\');
          });

          //remplacement du lien du terme de taxo image
          $(\'.taxonomy_term_'.$tax_id_image.'\', context).each(function() {

           $(this).children().html(\'<img src="/drupal/sites/all/themes/fusion/fusion_starter/img/new/type_image.png" width="16px" height="16px" alt="'.t("picture").'" title="'.t("picture").'" >\');
          });

    };

});','inline');

    
  //on déclare dans des variables JS globales les couleurs de background des headers choisies dans le formulaire de config de la plateforme.
    //on met des valeurs par defaut si pas surchargées
    $used_theme = ceo_vision_select_theme();
    if(isset($used_theme["organisation"])){
        $gofast_background_header_settings_css = $used_theme['css_properties']['background_header_settings_css'];
        $gofast_background_header_menu_css   = $used_theme['css_properties']['background_header_menu_settings_css'];      
        $gofast_background_header_highlight_font_color_css = $used_theme['css_properties']['background_header_highlight_font_color_css'];
        
    }else{
        $gofast_background_header_settings_css = variable_get("gofast_background_header_settings_css", "#2B2B2B");
        $gofast_background_header_menu_css = variable_get('gofast_background_header_menu_settings_css', "#000000");
        $gofast_background_header_highlight_font_color_css = variable_get('gofast_background_header_highlight_font_color_css', "#027AC6");

      
    }
      //on met en variable global le nom du compte technique de connexion au ldap
        $name_ldap_technical_account = variable_get('ceo_vision_ldap_settings', array());
        $name_ldap_technical_account = $name_ldap_technical_account["ldap_binddn"];
    $fallback_edit_inline = variable_get('ceo_download_edit_fallback', 'java');
    drupal_add_js('
        //variable de couleur du bandeau
        var gofast_background_header_settings_css = "'.$gofast_background_header_settings_css.'";
        var gofast_background_header_menu_css  = "'.$gofast_background_header_menu_css.'"; 
        var gofast_background_header_highlight_font_color_css  = "'. $gofast_background_header_highlight_font_color_css.'";
            
        //variable qui contient le login du compte technique de connexion au ldap
        var name_ldap_technical_account = "'.$name_ldap_technical_account.'"
            
        //variable qui indique quelle methode de fallback utiliser si le plugin office ne marche pas ou n\'est pas présent
        //TODO mapper cette variable a une variable drupal éditable depuis formulaire de config de la plateforme
        //valeures possibles : java ou LO
        var fallback_edit_inline = "'.$fallback_edit_inline.'";

    ','inline');

global $base_url;


//on charge le code js de persistance des quicktabs
ceo_vision_ui_qt_persist_add_js($base_url);

global $user;

if(user_access('administer book outlines'))
{
    //on charge le code js
    ceo_vision_ui_book_reorder_add_js($base_url,$user);
}
  ceo_vision_ui_qt_design_add_js();
ceo_vision_ui_menu_design_add_js();

ceo_vision_ui_book_traductions_add_js();

$logged_in = $user->uid>0;
if(!$logged_in){

    drupal_add_js('$(document).ready(function() {
       
            //$(\'#block-user-0\').prepend($(\'#header-group-wrapper\'));

           //$("#block-user-0").css("margin-left","300px");
           //$("#block-user-0").css("margin-top","200px");
           $(\'#site-name\').css({\'margin-left\':\'0px\',\'margin-top\':\'80px\'})

           $(\'#block-languageinterface-0\').css({\'margin-left\':\'470px\',\'margin-top\':\'-260px\'});

           //$(\'.block-title\').remove();
           $(\'ul\').css(\'list-style-type\',\'none\');

   });','inline');
}


//si on va sur page de groupe auquel on a pas accès ==> access denied
     if(arg(0) == 'node' && is_numeric(arg(1)) && $user->uid !== "1"){
        $nodeid = arg(1);
        if(!ceo_vision_has_permission_access_group($nodeid)){

             drupal_access_denied();
             module_invoke_all('exit');
             exit();
        }   
     }
  }
//FIN fonction init
  


function ceo_vision_ui_admins_orga(){
    $gid=$_GET['gidOrga'];
    
    if( $gid!==null &&  $gid!==''){
          //si on recoit le nom de l'orga au lieu de l'id, on recupere l'id
          if(!is_numeric($gid)){
              $gid=get_group_id_from_title($gid);
          }
          
          $admins=getAdminsById($gid);

          //on supprime du tableau ceux qui n'ont pas le role manager
        if(count($admins) == 0){
                 $admins["adm"]="adm";
        }
          foreach($admins as $key=>$admin){
            $myuser = user_load(array('name' => trim($admin)));
            if(!isset($myuser->roles['4'])){
                unset($admins[$key]);
            }

         }

         

          foreach($admins as $k=>$v){
              $ads[]=array('key'=>$k,'name'=>$v);
          }
  
          drupal_json(array('chefsDepart' => $ads));
    }


}

function ceo_vision_ui_admins_orga_dn(){
    $gid=$_GET['gidOrga'];
     //Recupérer le basedn
      $res=db_query("select sid from ldapauth");
      $row=db_fetch_object($res);
      ldapdata_init();
      $_ldapdata_ldap= _ldapdata_init($row->sid);
      $server=$_ldapdata_ldap->server;
      $ch_basedn=$_ldapdata_ldap->basedn;
      $ch_basedn=split(",", $ch_basedn);
      $dc1=$ch_basedn[1];
      $dc2=$ch_basedn[2];
      
    if( $gid!==null &&  $gid!==''){
          //si on recoit le nom de l'orga au lieu de l'id, on recupere l'id
          if(!is_numeric($gid)){
              $gid=get_group_id_from_title($gid);
          }

          $admins=getAdminsById($gid);

          //on supprime du tableau ceux qui n'ont pas le role manager
          foreach($admins as $key=>$admin){
            $myuser = user_load(array('name' => trim($admin)));
            if(!isset($myuser->roles['4'])){
                unset($admins[$key]);
            }

         }

         if(count($admins) == 0){
                 $admins["adm"]="adm";
          }

          foreach($admins as $k=>$v){
              $ads[]=array('key'=>'uid='.$k.',ou=people,'.$dc1.','.$dc2.'','name'=>$v);
          }

          drupal_json(array('chefsDepart' => $ads));
    }


}

function  get_link_mail($nid){

     //Mettre en place lien d'envoie de mail de contenus de type chapitre

       if($nid!==null &&$nid!==''){
         $rs=db_query("select title,type from node where nid=$nid");
       }
       $nd=db_fetch_object($rs);
       $type=$nd->type;
       if($nd->type=='book'){
           $title=t('send mail');
           $link_mail['href']="printmail/book/export/html/$nid";
           $link_mail['html']=true;

           $link_mail['title']="<img src='/drupal/".drupal_get_path('theme','fusion_starter')."/img/new/mail_fo.png' width='16px' height='16px' alt='email' title='$title' >";
        }

        return $link_mail;

}

function show_versions_node($node){
  if($node!==null){
        $render = array();
         $vid_courant=db_result(db_query('SELECT vid FROM {node_revisions} WHERE nid= %d ORDER BY vid DESC LIMIT 0,1', $node->nid));
         //$vid_courant = $node->vid;
         $count=db_result(db_query('SELECT COUNT(*) FROM {node_revisions} WHERE nid= %d ORDER BY vid ASC', $node->nid));
        // $return=db_query('SELECT * FROM {node_revisions} WHERE nid = %d ORDER BY timestamp DESC', $node->nid);
         $return=db_query('SELECT * FROM {node_revisions} WHERE nid = %d ORDER BY vid ASC', $node->nid);
         //$i=$count-1;
         $i = 0;
         $current_version = $node->field_number_version[0]["value"];
         while($row=db_fetch_object($return)){
             $vid=$row->vid;
             $timestamp = date("d/m/Y H:i:s",$row->timestamp);
             //if( $vid!==$vid_courant){
             if($node->vid != $vid){
                 //on recupere le numero de version
                 $node_revision = node_load($node->nid,$vid);
                 $version_number = $node_revision->field_number_version[0]["value"];
                 if($version_number == ""){                  
                     //$version_number = t("unnumbered");     
                     $version_number = "1.0";                  
                 }
                 //on exclut les version mineures intermediaires
                 $array_version_number = explode(".", $version_number);
                 $array_curren_version_number = explode(".", $current_version);
                 //si les version majeures sont differentes, on ne garde pas les version mineures intermediaires
                 if($array_version_number[0] != $array_curren_version_number[0]){
                     if($array_version_number[1] == "0"){
                          $render[] = l($version_number, "node/$node->nid/revisions/$vid/view", array('attributes' => array("title" => $timestamp." ".t("Comment").": ".$node_revision->log), 'html' => TRUE))." | ";
                     }
                 }else{
                          $render[] = l($version_number, "node/$node->nid/revisions/$vid/view", array('attributes' => array("title" => $timestamp." ".t("Comment").": ".$node_revision->log), 'html' => TRUE))." | ";
                 }
                    
                  //print l($version_number, "node/$node->nid/revisions/$vid/view", array('attributes' => array("title" => $timestamp." ".t("Comment").": ".$node_revision->log), 'html' => TRUE));
                 //print(' | ');
             }else{
                 $version_number = $node->field_number_version[0]["value"];
                  if($version_number == ""){
                     //$version_number = t("unnumbered");
                      $version_number = "1.0"; 
                     //$node->field_number_version[0]["value"] = "1.".$i;
                     //$node = ceo_vision_save_node_technicly($node);
                     //$version_number = $node->field_number_version[0]["value"];
                 }
                  $render[] = l($version_number." (".t("Current").")", "node/".$node->nid."/revisions/".$vid."/view", array('attributes' => array("title" => $timestamp." ".t("Comment").": ".$node->log), 'html' => TRUE))." | ";
                 //print l($version_number." (".t("Current").")", "node/".$node->nid."/revisions/".$vid."/view", array('attributes' => array("title" => $timestamp." ".t("Comment").": ".$node->log), 'html' => TRUE));
                 //print(' | ');
             }
             //$i--;
             $i++;
         }
           //if( $vid!==$vid_courant){
                //$render[] = l(t("more"), "node/$node->nid/listrevisions", array('attributes' => array(), 'html' => TRUE));
                //print l(t("more"), "node/$node->nid/listrevisions", array('attributes' => array(), 'html' => TRUE));
          // }
  }

  //on inverse le tableau, puis on ajoute a la fin le lien pour gerer les versions
  $render = array_reverse($render);
  $render[] = l(t("more"), "node/$node->nid/listrevisions", array('attributes' => array(), 'html' => TRUE));
  foreach($render as $myrender){
      $output .= $myrender;
  }
  return $output;
}


//Recupération des orgas de user
//function ceo_vision_ui_my_orgas(){
//    $uid=$GLOBALS['user']->uid;
//    $uname=$GLOBALS['user']->name;
//    $orgas=get_all_orga();
//    $mes_orgas=array();
//   if($orgas!==null){
//    foreach ($orgas as $k=>$v){
//        $members=get_members_group($k);
//        if(count($members) != 0){
//
//            if(in_array($uname,$members)){
//                //array_push($mes_orgas[$k]=$v,$mes_orgas);
//                   $clean_title = str_replace("'"," ",$v);
//                   $clean_title = str_replace("&","-",$clean_title);
//                   //$mes_orgas[]=array('gid'=>$val['nid'],'title'=>$clean_title);
//                  $mes_orgas[]=array('gid'=>$k,'title'=>$clean_title);
//            }
//        }
//
//    }
//    $mes_orgas[]=array('lang'=>$_SESSION['LAN_CUR']);
//
//    drupal_json(array('mesOrgas'=>$mes_orgas));
//   }
//}



/*
 * Vérifie si un utilisateur est manager
 */
//function ceo_vision_ui_is_manager(){
//    global $user;
//    $isAdmin=FALSE;
//    $roles=$user->roles;
//    foreach($roles as $k=>$v){
//      if($v=='manager') {
//          $isAdmin=TRUE;
//      }
//    }
//    drupal_json(array('isAdmin'=>$isAdmin));
//}


/*
 * Retourne les groupes de l'utilisateur
 */

// function ceo_vision_ui_my_groups(){
//
//    $og_groups=$GLOBALS['user']->og_groups;
//    $mes_groups=array();
//    foreach($og_groups as $cl=>$val){
//       if($val['type']=='group_node'){
//           $clean_title = str_replace("'"," ",$val['title']);
//           $clean_title = str_replace("&","-",$clean_title);
//           $mes_groups[]=array('gid'=>$val['nid'],'title'=>$clean_title);
//       }
//    }
//    $mes_groups[]=array('lang'=>$_SESSION['LAN_CUR']);
//
//    drupal_json(array('mesGroups'=>$mes_groups));
// }


function ceo_vision_ui_views_query_alter(&$view, &$query) {
    
  global $user;
    
switch($view->name){
  
  case 'ceov_og_members_block':
    // Remove users.status filter for managers (blocked accounts are filtered 
    // out by default). 
    if (is_manager($user->uid)) {
      foreach ($query->where[0]['clauses'] as $key => $clause) {
        if (strpos($clause, 'users.status') !== false) {
          unset($query->where[0]['clauses'][$key]);
          break;
        }
      }
    }
  break;
  
  
  
  case 'og_tracker_ceo_vision':
        // retrieve the group id for the user main organisation group
        profile_load_profile($user);
        //je remplis deux tableaux avec la liste des groupes et des orga, pour faire le filtre plus tard
        $groupes = array();
        $orgas = array();
        foreach($user->og_groups as $group){
            if($group['type'] == 'group_node'){
                $groupes[]=$group['nid'];
            }elseif($group['type'] == 'orga'){
                $orgas[]=$group['nid'];
            }
        }      
        //$groups ="(".implode (",", $in).")";
        $result = db_query("select node.nid AS node_nid from node where type='orga' and title='%s'",$user->profile_organisation_unit);
        $u = db_fetch_object($result);
        
        if(arg(2)==="1"){
            if(count($orgas) != 0){
                $orgas ="(".implode (",", $orgas).")";
                $query->where[0]['clauses'][] = "og_ancestry.group_nid IN ".$orgas."";
            }
        
        }
        elseif(arg(2)==="0"){
            // we want to exclude the users's main organisation group
        
            if(count($groupes) != 0){
                $groupes ="(".implode (",", $groupes).")";
                $query->where[0]['clauses'][] = "og_ancestry.group_nid IN ".$groupes."";
            }
        }

        foreach($query->where[0]['clauses'] as $key => $clause) {
            // File status clause
            if(strpos($clause, 'term_data.name =')) {
                // count & reorganise status filter args (if this clause exists its args are in the last array place)
                $status_args_key = count($query->where[0]['args']);
                $status_args = explode(',', $query->where[0]['args'][$status_args_key-1]);
                $in = array();
                foreach($status_args as $arg) {
                    $in[]= "'%s'";
                }
                $in = implode(',', $in);
                // Alter clause
                $query->where[0]['clauses'][$key] = 'term_data.name IN ('.$in.')';
                array_pop($query->where[0]['args']);
                $query->where[0]['args'] = array_merge($query->where[0]['args'], $status_args);
            }
        }
       // var_dump($query->where[0]["clauses"][0]);exit;
        //don't have time limit when filter by public content
         if(isset($query->where[0]["clauses"][0])){
             
             if($query->where[0]["clauses"][0] == "og_ancestry.group_nid IS NULL"){
                 $query->where[1]["args"][0] = str_replace("864003600", "8640036000", $query->where[1]["args"][0]);
                 $query->where[1]["args"][0] = str_replace("7776000", "864003600", $query->where[1]["args"][0]);
             }
         }
        
         if(isset($_COOKIE["og_tracker_ceo_vision_no_time_limit"])){
             //Si presence du cookie qui informe qu'il ne faut pas mettre de limit de temps sur cette vue, j'enleve cette limite dans les filtres de la vue
             $query->where[1]["args"][0] = str_replace("7776000", "864003600", $query->where[1]["args"][0]);
            //$query->where[1]["args"][0] = "***CURRENT_TIME***";
            
         }
         
        
  break;
        
        

  case 'facebook_status_recent':
      if ($view->current_display == "block_1"){
        $in = array();
        foreach($user->og_groups as $group){
            $membres = get_members_id_group($group['nid']);
            foreach($membres as $membre){
                $in[]=$membre;
            }
        }
        $in = array_unique($in);
        $own = array_search($user->uid, $in);
        if($own !== false){
            unset($in[$own]);
        }

        if(count($in) != 0){
            $in ="(".implode (",", $in).")";
            $query->where[0]['clauses'][] = "users.uid IN ".$in."";
        }
      }
  break;

    
    
// Facebook Statuses - stream view based on context
  case 'fbss_ur_stream_2':
      
      foreach ($query->where[0]['clauses'] as $key => $clause) {
        $i += substr_count($clause, '%s') + substr_count($clause, '%d');
        // Get the context :
        if (strpos($clause, 'facebook_status.type') !== false) {
          $context = $query->where[0]['args'][$i - 1];
        }        
        // Remember clauses & args keys related to user relationships
        if (strpos($clause, 'user_relationships') !== false) {
          $ur_clause[] = $key;
          $ur_args[] = $i - 1;
        }
      }     

      // If the context is user based, add co-workers statuses to the stream
      if ($context == 'user'){
          
        $colleagues = array();
        foreach ($user->og_groups as $group) {
          $membres = get_members_id_group($group['nid']);
          foreach ($membres as $membre){
            $colleagues[] = $membre;
          }
        }
        //variable_set('aaatest', array('collegues' => array_unique($colleagues), 'args' => $query->where[1]['args']));
        if (count($colleagues) != 0) {
          $colleagues = array_unique($colleagues);
          $query->where[1]['type'] = "OR";
          $query->where[1]['clauses'] = array();
          $query->where[1]['args'] = array();
          $query->where[1]['clauses'][] = 'facebook_status.type = "user" AND facebook_status.sender IN (' . db_placeholders($colleagues) . ')';
          $query->where[1]['args'] = array_merge($query->where[1]['args'], $colleagues);
          $query->set_group_operator("OR");
        }
        
      } else {
        // Reset filters according to the current context (organic groups)
        // We need to remove user relationships clauses & args
        foreach ($ur_clause as $key => $value){
          unset($query->where[0]['clauses'][$value]);
        }
        foreach ($ur_args as $key => $value){
          unset($query->where[0]['args'][$value]);
        }

        // Reindex the keys to go in numerical order starting at 0
        $query->where[0]['clauses'] = array_values($query->where[0]['clauses']);
        $query->where[0]['args'] = array_values($query->where[0]['args']);
        
        
        //on prepare la clause where qu permettra de ne pas afficher les status postés dans un context de groupe auquel on ne fait pas parti
        $query->where[1]['type'] = "OR";
        $query->where[1]['clauses'] = array();
        $query->where[1]['args'] = array();
      }
      
      //on construit la liste des groupe auquel on fait parti
      $list_groups_string = implode(', ', array_keys($user->og_groups));
      $query->where[1]['clauses'][] = 'facebook_status.type = "og" AND facebook_status.recipient IN ('.$list_groups_string.')';
  break;
 

    
    
  case 'user_grid_listing':
         if($view->current_display == "feed_1"){
            break;
         }
        $user_relationships = $user_relationships_filter = false;
        // Views Argument : utilisé car fournit à Views les données nécessaires (table join...) à la mise en place du filtre 'groupe' (qui surcharge authmap_authname)
        // Un argument par défaut est donc créé dans l'interface Views (og_uid.nid = 0 ) pour que le filtre 'group' soit utilisable.
        // Ici on supprime l'argument par défaut et la clause where correspondant pour appliquer ensuite les 'vrais' filtres choisis par l'utilisateur.
        $key = count($query->where[0]['clauses'])-1;
        unset($query->where[0]['clauses'][$key]);
        $key = count($query->where[0]['args'])-1;
        unset($query->where[0]['args'][$key]);
        $query->distinct = 1; 
        
        // If the user is an administrator or if he has a manager's role, he should be able to see locked account
        $adm_id = ceo_vision_ui_get_id_subadmin();
//        if($user->uid == $adm_id || $user->uid == 1 || is_manager($user->uid)){
//            // Delete the clause "users.status <> 0"
//            $k = array_search('users.status <> 0',$query->where[0]['clauses']);
//            unset($query->where[0]['clauses'][$k]);
//        }
        
        // Clause [0] : users.uid NOT IN (0, 162, 1) + current uid
        // Add current user id to the args if the user doesn't want to
        // see himself.
         
       
//        if(is_extranet_from_uid($user->uid) || $setting_annuaire_filter == 1){            
//            
//            $in = array();
//            foreach($user->og_groups as $group){
//                $membres = get_members_id_group($group['nid']);
//                foreach($membres as $membre){
//                    $in[]=$membre;
//                }
//            }
//            $in = array_unique($in);
//            if(count($in) != 0){
//                $in ="(".implode (",", $in).")";
//                $index_clause = count($query->where[0]['clauses']) - 1;
//                $query->where[0]['clauses'][0] = "users.uid not in ('%s', '%s', '%s', %s)";
//                $query->where[0]['clauses'][$index_clause] = "users.uid IN ".$in."";
//            }
//        }else{
            $query->where[0]['clauses'][0] = "users.uid not in ('%s', '%s', '%s', %s)";
 //       }
        // Insert $user->uid (or 0 to the user see himself)
        array_unshift(&$query->where[0]['args'], 0);
       
        // If custom filters are used
        if(count($query->where[0]['clauses']) > 1){
            $nb_arg = 0;
            $name_clause = '';
            $group_clause = '';
            // Which custom filters are used
            foreach($query->where[0]['clauses'] as $key => $clause) {
                $nb_arg += substr_count($clause, '%s');
                $nb_arg += substr_count($clause, '%d');// TODO handle other wildcards?
                // Relationships
                if(strpos($clause, 'relationships.approved')) {
                    // La valeur par défaut du filtre relationships status devrait 
                    // être sur <any> (filtre désactivé = pas de clause) mais views
                    // nous en empêche on le met à 0 (relation 'en attente').
                    // La valeur 0 nous indiquera qu'il faut enlever la clause where
                    // pour désactiver le filtre. Dans l'autre cas (valeur à 1) 
                    // il faudra modifier la clause et son argument.
                    $user_relationships = true; 
                    // Cas où user accède à 'mes relations' depuis le menu
                    if($_GET['relationships'] == 1) $query->where[0]['args'][$nb_arg-1] = 1;
                    $user_relationships_filter = $query->where[0]['args'][$nb_arg-1] == 0 ? false : true;
                    $user_relationships_clause_key = $key;
                    $user_relationships_arg_key = $nb_arg-1;
                }
                // Name filter
                if(strpos($clause, '(profile_values_profile_lastname.value) LIKE')) {
                    // Clause_key [1] : Count & reorganise name filter args
                    // If this clause exists its args key must begin in [4] because 
                    // previous keys are for the clause key [0].                 
                    $name_args = explode(',', $query->where[0]['args'][4]);
                    foreach($name_args as $arg) {
                        $in[]= "'%s'";
                        $nb_arg++;
                    }
                    $nb_arg--;
                    $in = implode(',', $in);
                    // Alter the clause UPPER(profile_values_profile_lastname.value) LIKE UPPER('%s%%')
                    $name_clause = 'UPPER(SUBSTRING(profile_values_profile_lastname.value FROM 1 FOR 1)) IN ('.$in.')';
                    // $name_clause_key = $key; // if exists : always keyed to [1]
                    // Insert new argument in ['args'] array
                    array_splice($query->where[0]['args'], 4, 1, $name_args);
                }
                
                // Group Filter
                if(strpos($clause, '(authmap.authname) LIKE UPPER')) {
                    $in = array();
                    // Override authmap filter with group filter (current clause / current args)
                    $group_args = explode('/', $query->where[0]['args'][$nb_arg-1]);
                    foreach($group_args as $arg) {
                        $in[] = "%d";
                    }
                    $in = implode(',', $in);
                    $group_clause = 'og_uid.nid IN ('.$in.')';
                    // Insert new argument in ['args'] array
                    array_splice($query->where[0]['args'], $nb_arg-1, 1, $group_args);
                    // Reset nb_args
                    $nb_arg += (substr_count($in, '%d')-1);
                    // Remember the key
                    $group_clause_key = $key;
                }
            }
            // Override the query
            if (!empty($name_clause)) {
                $query->where[0]['clauses'][1] = $name_clause;
            }
            if (!empty($group_clause)) {
                $query->where[0]['clauses'][$group_clause_key] = $group_clause;
            }
        }
        if ($user_relationships) {
            if($user_relationships_filter) {
                // Query user relationships
                $query->where[0]['clauses'][] = 'user_relationships.requester_id = %d';
                $query->where[0]['args'][] = $user->uid;
            }else{
                // Unset relationships filter
                unset($query->where[0]['clauses'][$user_relationships_clause_key]);
                unset($query->where[0]['args'][$user_relationships_arg_key]);
            }
        }
        // Skills filtering
        if($_COOKIE['skills'] != 0){
            $skill_filters = explode(',', $_COOKIE['skills']);
            $in = $uid = array();
            foreach($skill_filters as $arg) {
                $in[] = "%d";
            }
            $in = implode(',', $in);
            $sql  = 'SELECT distinct n.uid FROM {node} n ';
            $sql .= 'JOIN {term_node} t ON t.nid = n.nid ';
            $sql .= 'WHERE n.type like "%s" ';
            $sql .= 'AND t.tid IN ('.$in.')';
            array_unshift($skill_filters, 'uprofile');
            $resultset = db_query($sql, $skill_filters);
            while($row = db_fetch_object($resultset)){
                $uid[] = $row->uid;
            }
            if(empty($uid)){
                $uid[] = 0;
            }
            // Add clause to $query
            $in = array();
            foreach($uid as $k => $arg) {
                $in[] = "%d";
                $query->where[0]['args'][] = $arg;               
            }
            $in = implode(',', $in);
           
            $query->where[0]['clauses'][] = 'users.uid IN ('.$in.')';
            
        }
        
        
                //si le user est extranet ou que le site est configuré pour filtrer l'annuaire des users, on n'affiche que les users qui partagent au moins un groupe avec le user connecté
        //on recupere la liste des groupes de l'utilisateur courant
        //on recupere la liste des membres de chacun de ces groupes   
        //on modifie la clause where pour n'afficher que les membres de ces groupes
        $setting_annuaire_filter = variable_get("ceo_vision_filter_annuaire", 0); 
        //si pas de filtre de visibilité des users entre eux, je supprime le filtre de la vue qui filtre par groupe
        if($setting_annuaire_filter == 0){
                   
             foreach($query->where[0]['clauses'] as $mykey=>$myclause){
                
                 if($myclause == "node_og_uid__og_uid.uid = ***CURRENT_USER***"){
                     unset($query->where[0]['clauses'][$mykey]);
                     unset($query->where[0]["args"][$mykey]);
                 }
             }
        }else{
            //on recupere la liste des users que l'on est autorisé a visualiser pour mettre un where dans la requete
            global $user;
            $colleagues = gofast_user_get_og_colleagues($user->uid, false, true);
             $in ="(".implode (",", $colleagues).")";
            $index_clause = count($query->where[0]['clauses']) - 1;
            //$query->where[0]['clauses'][0] = "users.uid in ('%s', '%s', '%s', %s)";
            $query->where[0]['clauses'][] = "users.uid IN ".$in."";
             //$view->set_items_per_page(40);
        }
        
  break; // view user_grid_listing
    
    


  case 'og_list_ceo_vision':
      // Filter subgroups
      $query->where[0]['clauses'][] = 'node.nid NOT IN (SELECT subgroups.gid FROM {og_subgroups} subgroups)';
  break;

  } // END SWITCH
    
}

function cmp_subgroups($a, $b){
    return strcmp($a->node_title,$b->node_title);

}

function ceo_vision_ui_views_pre_execute(&$view) { 
 $view_name = $view->name .'_'. $view->current_display;
  if(!isset($_GET['page']) && !isset($_GET['pager_element']) && $_SESSION[$view_name]){    
  }
  else if(isset($_GET['page']) && $_GET['view_name'] == $view->name && $_GET['view_display_id'] == $view->current_display) {
    //TODO urgence cas particulier de vue des membres
     if($view->name == "ceov_og_members_block"){
//         watchdog("create variable meorize", $view_name);
        global $user;
        variable_set("memorizepage_".$user->uid."_".$view_name, $_GET['page']);
     }

    $_SESSION[$view_name] = $_GET['page'];
  }
  else{
    $_SESSION[$view_name] = 0;
  }

    
    
//    watchdog("debug limit",$view->name);
//  switch($view->name){
//    case 'og_tracker_ceo_vision':
//        variable_set("debug-alfresco_form4", $view);
//        $view->build_info['count_query'] .= ' LIMIT 50';
//    break;
//  }  
}

function ceo_vision_ui_views_pre_render(&$view) {  

    if ($view->name == 'ceo_vision_audit'){
        foreach($view->result as $key => $result) {
            $availables_values = ceo_vision_audit_get_list_event_types();
            $result->ceo_vision_audit_event_type = $availables_values[$result->ceo_vision_audit_event_type];
        }
    }
    
    
     if ($view->name == 'statistics_global'){
         
           //$view->result=array_reverse($view->result);
         foreach($view->result as $key => $result) {
            //on recupere les parents eventuels du groupe
            $node = node_load($result->nid);
            $parents = og_subgroups_get_group_parents($node); 
            // Fetch the tree and interate the groups 
            if(count($parents) != 0){
                $node_title = $result->node_title;
                $result->node_title = "";
                $parents = array_reverse($parents);
                foreach ($parents as $key=>$parent) {
                    if($result->node_title == ""){
                        $result->node_title = $parent->title; 
                    }else{
                        $result->node_title = $result->node_title." > ".$parent->title; 
                    }
                }
                $result->node_title = $result->node_title." > ".$node_title; 
            }
            if(isset($_GET["history"]) && $_GET["history"] == 1){
                $history = 1;
            }else{
                $history = 0;
            }
            $render_statistics_group = ceo_vision_statistics_folder_alfresco($result->nid, $history);
            $result->node_revisions_teaser = $render_statistics_group["number"]; 
            $result->node_revisions_format = 3;
            $result->node_revisions_title = $render_statistics_group["size"];
            $result->profile_values_profile_organisation_unit_value = $render_statistics_group["number_folders"];
  
            //on recupere la liste des admins du groupe
            $admin_members = ceo_vision_get_admin_members_group($result->nid);
           
             $result->og_og_description = "";
            foreach($admin_members as $key=>$member){
                $myuser = user_load($key);
                $complete_name = $myuser->profile_firstname." ".$myuser->profile_lastname;
                $result->og_og_description .= $complete_name." , ";
            } 
            $members=get_members_group($result->nid);
            
            $result->node_revisions_body = "";
            foreach($members as $key=>$member){
                $myuser = user_load(array('name' => $key));
                $complete_name = $myuser->profile_firstname." ".$myuser->profile_lastname;
                $result->node_revisions_body .= $complete_name." , ";
            } 
         }
          usort($view->result, "cmp_subgroups");
         
     }
     
     if($view->name == 'target_link_autocomplete'){
         foreach($view->result as $key => $result) {
             //si le champs node_type est alfresco_item, je le remplacement par 
             if($view->result[$key]->node_type == "alfresco_item"){
                 //on charge le format du document
                 
                 //$view->result[$key]->node_title = get_taxo_icone_from_id($view->result[$key]->term_data_tid);
                 $view->result[$key]->comments_hostname = db_result(db_query('SELECT t.name FROM {term_data} t where t.tid = "%s"', $view->result[$key]->term_data_tid));
                
             }
         }
         
     }
     
     
     if ($view->name == 'statistics_users'){

         foreach($view->result as $key => $result) {
             $myuser = user_load($result->uid);
             $render_groups = "";
             if(count($myuser->og_groups) > 0){
                 foreach($myuser->og_groups as $gid=>$group){
                     $render_groups = $render_groups.$group["title"]." , ";
                 }
             }
             $result->authmap_authname = $render_groups;
             $result->users_signature = ceo_vision_statistics_get_number_contributions($result->uid);
             $result->users_mail = ceo_vision_statistics_get_number_logins($result->uid);
         }
     }
    

   if ($view->name == 'og_list_ceo_vision'){
       for($i=0, $count=count($view->result); $i<$count; $i++){   
         // Member_count : Prepending the label here permits string translation
         $view->result[$i]->member_count = t('Members').' : '.$view->result[$i]->member_count;
         
         //verification si on a les droits de voir ce groupe/orga
           if(!ceo_vision_has_permission_access_group($view->result[$i]->nid)){
                unset($view->result[$i]);
           } 
           
           //je surcharge le champs "post count" pour les groupes de premiers niveaux afin de prendre en compte les contributions de tous les enfants
           $mynode = node_load($view->result[$i]->nid);
           $children = og_subgroups_get_group_children($mynode, FALSE);

                // Fetch the tree and interate the groups 
                if(count($children)!= 0){
                    $sum_contributions = 0;
                    foreach ($children as $key=>$child) {

                         $sum_contributions += ceo_vision_get_number_contributions_group($key);
                    }
                   $view->result[$i]->post_count +=  $sum_contributions;
                }
       }
       
   }
   
   
   if ($view->name == 'user_grid_listing' && $view->current_display != "page_3") {
       // Make subscribe/unsubscribe action link for each loaded profile
       // Override profile_manager_value token ('responsable') 
       global $user;
//       global $base_url;
//       // Get view path to handle redirection from url
//       $display = $view->current_display;
//       $path = $view->display[$display]->display_options['path'];

       // Find 'author' subscriptions for the current user
       $sql  = 'SELECT f.sid, f.value FROM {notifications} n ';
       $sql .= 'JOIN {notifications_fields} f ON n.sid = f.sid ';
       $sql .= 'WHERE n.type = "%s" AND n.uid = %d';
       $res = db_query($sql, 'author', $user->uid);
       while ($row = db_fetch_object($res)) {
           $subscription['uid'][] = $row->value;
           $subscription['sid'][] = $row->sid;
       }
 
     foreach($view->result as $key => $result) {
         
         // On modifie le champs nothing_1 pour y mettre le statut
         $status = _facebook_status_get_status_fast($result->uid);
        
         if($status->message != ""){
            $view->result[$key]->users_signature = '<div class="user-status">"<i>'.$status->message.'</i> "</div><!-- status -->';
         }else{
             $view->result[$key]->users_signature = '<div class="user-status">"<i>'.t("This user has no status yet").'</i> "</div><!-- status -->';
         }
         // Mobile Phone : override with phone number by default if exists (mobile phone value token is used)
         if(!empty($view->result[$key]->profile_values_profile_phoneNumber_value)) {
             $view->result[$key]->profile_values_profile_mobile_value = $view->result[$key]->profile_values_profile_phoneNumber_value;
         }
         if(empty($view->result[$key]->profile_values_profile_phoneNumber_value) && empty($view->result[$key]->profile_values_profile_mobile_value)) {
             $view->result[$key]->profile_values_profile_mobile_value = '('.t('No Number').')';
         }
         // Subscription :
         // If current user subscribed to this author
         if($result->uid == $user->uid){
           $sub_img_src = $sub_href = 'self'; // chaine non nulle pour ne pas contrarier Views -> ce qui peterait l'HTML
         }else{
           $sub_key = array_search($result->uid, (array)$subscription['uid']);
           if ($sub_key !== FALSE) {
             // Build unsubscribe link
             $sub_img_src = "/drupal/sites/all/themes/fusion/fusion_starter/img/new/unsubscribe_user.png";
             $sub_href = "notifications/unsubscribe/sid/{$subscription['sid'][$sub_key]}/nojs";
           }else{
             // Build subscribe link
             $sub_img_src = "/drupal/sites/all/themes/fusion/fusion_starter/img/new/subscribe_user.png";
             $sub_href = "modal/nojs/notifications/subscribe/$user->uid/author/author/$result->uid";
           }
         }
         // Override fields
         $view->result[$key]->users_name = $sub_href; // [name] == Username_token : Subscription url
         $view->result[$key]->profile_values_profile_manager_value = $sub_img_src; // [value_6] == Responsable_token : Subscription img src
         // Private message url: override user authentication map 
         $view->result[$key]->authmap_authname = '/modal/nojs/messages/new/'.$result->uid; // [authname] Authentication map ID token : Private message url
         // Put name & firstname into the same field in order to have 1 user-link instead of 2
         $view->result[$key]->profile_values_profile_firstname_value .= ' '.$view->result[$key]->profile_values_profile_lastname_value;
         
        
//         //on verifie si on a le droit de visualiser le profil de cette personne. Si non en effece son nom prenom des infos
         $account = user_load($view->result[$key]->uid);
         if(!user_view_access($account)){
            unset($view->result[$key]);
            // $view->pager['items_per_page'] = count($view->result);
         }    
         
     }
    //$view->query->pager->update_page_info();
    // $view->query->pager->total_items = count($view->result); // reset the count of items
   //  watchdog("debug count",  count($view->result));
//$view->query->pager->update_page_info(); // update the pager object witht the correct number of items
//$view->result = $view->result2; // replace the old results with the results without duplicates
   }elseif($view->name == 'user_grid_listing' && $view->current_display == "page_3"){
      
       foreach($view->result as $key => $result) {
            $view->result[$key]->profile_values_profile_firstname_value .= ' '.$view->result[$key]->profile_values_profile_lastname_value; 
            if($view->result[$key]->userpoints_points > 5000){
               $view->result[$key]->users_signature = '<div style="float:right;margin-top:-90px"><img src="/drupal/sites/all/themes/fusion/fusion_starter/img/new/gold-medal.png" title="'.t("Gold medal").'" /></div>'; 
            }elseif($view->result[$key]->userpoints_points < 5000 && $view->result[$key]->userpoints_points > 1000){
                $view->result[$key]->users_signature = '<div style="float:right;margin-top:-90px"><img src="/drupal/sites/all/themes/fusion/fusion_starter/img/new/medal-silver.png" title="'.t("Silver medal").'" /></div>';   
            }elseif($view->result[$key]->userpoints_points < 1000 && $view->result[$key]->userpoints_points > 500){
                $view->result[$key]->users_signature = '<div style="float:right;margin-top:-90px"><img src="/drupal/sites/all/themes/fusion/fusion_starter/img/new/medal-bronze.png" title="'.t("Bronze medal").'" /></div>'; 
            }else{
                $view->result[$key]->users_signature = ''; 
            }
            
         //on verifie si on a le droit de visualiser le profil de cette personne. Si non en effece son nom prenom des infos
         $account = user_load($view->result[$key]->uid);
         if(!user_view_access($account)){
            unset($view->result[$key]);
         }
       }
   }
   

      if ($view->name == 'og_tracker_ceo_vision') {
          //on n'affiche pas les profils des users qui ne partagent pas au moins un groupe/orga avec nous
          $setting_annuaire_filter = variable_get("ceo_vision_filter_annuaire", 0);
           global $user;
          if($setting_annuaire_filter == 1){
            $in = array();
           
            foreach($user->og_groups as $group){
                $membres = get_members_id_group($group['nid']);
                foreach($membres as $membre){
                    $in[]=$membre;
                }
            }
            $in = array_unique($in);
          }
          

          if(count($view->result) < 5){
              //je crée un cookie qui indique de ne pas mettre de limit de temps sur la vue , puis je reload la page
              if(!isset($_COOKIE["og_tracker_ceo_vision_no_time_limit"])){
                setcookie("og_tracker_ceo_vision_no_time_limit", "no_limit", 0 , "/");
                header("Refresh:0");
              }
              
          }
          
          foreach($view->result as $key=>$myresult){
             
              //pour eviter la jointure avec la table node_revisions qui recupere l'auteur de la derniere revision du noeud (le dernier modificateur)
              //je surcharge ici l'auteur avec le dernier modifieur (sera toujours moins gourmand que la jointure)
               $mynode = node_load($myresult->nid);
                   $author_uid = $mynode->revision_uid;
                 if($mynode->revision_uid != $mynode->uid){
                   $author = user_load($author_uid);
                  
                   //TODO
                   $view->result[$key]->users_uid =  $author_uid;
                   $view->result[$key]->users_picture =  $author->picture;
                   $view->result[$key]->users_name =  $author->name;
                   $view->result[$key]->users_mail = $author->mail;
                 }
              
              //petit contournement. Si le dernier auteur est admin, je recupere l'auteur a la place
              //if($myresult->users_node_revisions_uid == 1){
                if($myresult->users_uid == 1){
                   //$mynode = node_load($myresult->nid);
                   $author_uid = $mynode->uid;
                   $author = user_load($author_uid);
                   $view->result[$key]->users_node_revisions_uid =  $author_uid;
                   $view->result[$key]->users_node_revisions_picture =  $author->picture;
                   $view->result[$key]->users_node_revisions_name =  $author->name;
                   $view->result[$key]->users_node_revisions_mail = $author->mail;
                   
                   $view->result[$key]->users_uid =  $author_uid;
                   $view->result[$key]->users_picture =  $author->picture;
                   $view->result[$key]->users_name =  $author->name;
                   $view->result[$key]->users_mail = $author->mail;
              }
              
              //print_r("last_comment: ".$result->node_comment_statistics_last_comment_timestamp."<br />");
              //print_r("changed: ".$result->node_changed."<br />");
              //si le dernier commentaire est plus recent que la derniere mise a jour, je recupere l'auteur du dernier commentaire et j'affiche son portrait a la place
              if($myresult->node_comment_statistics_last_comment_timestamp > $myresult->node_changed){
                   $commenter_uid = ceo_vision_get_last_commenter($myresult->nid);
                   $author = user_load($commenter_uid);
                   
                   $view->result[$key]->users_node_revisions_uid =  $commenter_uid;
                   $view->result[$key]->users_node_revisions_picture =  $author->picture;
                   $view->result[$key]->users_node_revisions_name =  $author->name;
                   $view->result[$key]->users_node_revisions_mail = $author->mail;
                   
                   $view->result[$key]->users_uid =  $commenter_uid;
                   $view->result[$key]->users_picture =  $author->picture;
                   $view->result[$key]->users_name =  $author->name;
                   $view->result[$key]->users_mail = $author->mail;
              }

              //si le noeud est de type profil, j'affiche le portrait du profil et non de l'auteur du profil
              if($myresult->node_type == "uprofile"){
                  //si l'utilisateur connecté n'est pas manager et si le user de la vue est bloqué, on l'enleve
                   if($setting_annuaire_filter == 1){
                     if(count($in)>0){
                        //$profil_node = $mynode || node_load($myresult->nid);
                        $profil_node = node_load($myresult->nid);
                        //$author = $author || user_load($profil_node->uid);
                        $author = user_load($profil_node->uid);
                         if(array_search($profil_node->uid, $in) === false){
                             unset($view->result[$key]);
                         }
                         if(!is_manager($user->uid) && $author->status == 0){
                             unset($view->result[$key]);
                         }
                     }  
                   }else{
                        //$profil_node = $mynode || node_load($myresult->nid);
                        $profil_node = node_load($myresult->nid);
                        //$author = $author || user_load($profil_node->uid);
                        $author = user_load($profil_node->uid);
                       
                         if(!is_manager($user->uid) && $author->status == 0){
                             unset($view->result[$key]);
                         }else{
                        $view->result[$key]->users_node_revisions_uid =  $author->uid;
                        $view->result[$key]->users_node_revisions_picture =  $author->picture;
                        $view->result[$key]->users_node_revisions_name =  $author->name;
                        $view->result[$key]->users_node_revisions_mail = $author->mail;
                         }
                   }
                 $view->result[$key]->node_revisions_teaser = "";
                 $view->result[$key]->profile_values_profile_organisation_unit_value = "";
                 $view->result[$key]->node_revisions_body = "";
                 $view->result[$key]->profile_values_profile_title_value = "";
              }else{
                  // je surcharge un champs pour afficher les icones d'action rapides
                  //on rajoute les boutons
                  if($view->current_display == "block_4"){
                      $output =  "<div style='width:70px;'>".ceo_vision_get_fast_actions($mynode, null, true)."</div>";
                     
                  }else{
                       if($view->current_display == "block_5" || $view->current_display == "block_7"){
                            //$node = node_load($myresult->nid);
                           $node = $mynode;
                            $output = "<div style='font-size:80%'>".ceo_vision_theme_history_node_view($node)."</div>";
                       }else{
//                          
                            //$node = node_load($myresult->nid);
                           $node = $mynode;
                            $output = "<div style='font-size:80%;'>".ceo_vision_theme_history_node_view($node)."</div>";
                            $output_fastactions = "<span style='width:20px;'>".ceo_vision_get_fast_actions($mynode)."</span>";
//                          
                       }
                  }
                   
                      $view->result[$key]->profile_values_profile_title_value = $output_fastactions;
                      $view->result[$key]->node_revisions_teaser =$output;
                      $view->result[$key]->profile_values_profile_organisation_unit_value = $output;
                 
              }        
              
         }
     }
     
       if ($view->name == 'ceov_og_members_block') {
            foreach($view->result as $key=>$myresult){
//               
                //on remplace le champs signature par l'icone si qui indique si le user est readonly ou pas
                $nid = $view->result[$key]->og_uid_nid;
                $myuser = user_load($view->result[$key]->uid);
                if(ceo_vision_is_read_only_group($nid, $myuser)){
                 $title_img_readonly= $alt_readonly = t('This user is on readonly list for this group');
                 //$view->result[$key]->authmap_authname = "<div>test</div>";
                 $view->result[$key]->node_og_uid__og_og_description = '<img src="/drupal/sites/all/themes/fusion/fusion_starter/img/new/transformnoro.gif" width="14px" height="14px" alt="'.$alt_readonly.'" title="'.$title_img_readonly.'" />';
                }else{
                     $view->result[$key]->node_og_uid__og_og_description = ''; 
                }
                
                //on verifie si on a le droit de visualiser le profil de cette personne. Si non en effece son nom prenom des infos
                $account = user_load($myresult->uid);
                if(!user_view_access($account)){
                    $myresult->profile_values_profile_lastname_value = "";
                }
            }
       }
       
        if ($view->name == 'og_flag_bookmarks' && ($view->current_display == "block_2" || $view->current_display == "block_3" || $view->current_display == "block_4" || $view->current_display == "block_6" || $view->current_display == "block_7" || $view->current_display == "block_8")) {
//          
            foreach($view->result as $key=>$myresult){
                  $node = node_load($myresult->nid);
                  $output = "<div style='font-size:80%;'>".ceo_vision_theme_history_node_view($node)."</div>";
                  $view->result[$key]->node_revisions_teaser =$output;
            }
       }

}



function ceo_vision_ui_views_post_execute(&$view){
  
//      if ($view->name == 'user_grid_listing' && $view->current_display != "page_3") {
//         
//            watchdog("debug count results", $view->query->pager->total_items);
//               $view->set_items_per_page(40);
//           
////          $count = 0;
//        foreach($view->result as $key => $result) {
//          //         //on verifie si on a le droit de visualiser le profil de cette personne. Si non en effece son nom prenom des infos
//         $account = user_load($view->result[$key]->uid);
//       
//         if(!user_view_access($account)){
//               watchdog("debug uid view2", $view->pager['items_per_page']);
//            unset($view->result[$key]);
//            $counter++;
//            // $view->pager['items_per_page'] = count($view->result);
//         }       
//        }
////       
////  global $pager_page_array, $pager_total, $pager_total_items;
////            // total rows in query
////            $pager_total_items[$view->pager['element']] = $view->total_rows  - $counter;
////            // total pages
////            $pager_total[$view->pager['element']] = ceil($pager_total_items[$view->pager['element']] / $view->pager['items_per_page']);
//     }
}


function ceo_vision_ui_views_post_render(&$view, &$output, &$cache){
    
     if ($view->name == 'og_tracker_ceo_vision' || $view->name == 'user_grid_listing') {
         // Retirer l'animation "loading..." une fois que la page est chargée
         if($view->current_display != "feed_1"){
            $output .= '<script type="text/javascript">gofastRemoveLoading();</script> ';
         }
     }
     
     if ($view->name == 'privatemsg' && $view->current_display == 'privatemsg_bloc_notifications'){
         $delete_all = '<div style="border-top:1px solid #636363; padding:6px 3px;"> <a href="/delete/privatemsg" class="delete_all_message_ajax" id="ajax_delete_messages" title="'.t("Delete all notifications").'" > '.t("Delete all notifications").' <i class="icon-trash icon-large"></i></a> </div> <div id="message_confirm_all"></div>';
         $output = preg_replace('/(<div class="item-list">)/s', $delete_all.'$1', $output);
     }
     
}


/*
 *
 */
 function ceo_vision_ui_perm() {
   return array('administer revision');
}



/*  Si ($template == 'node-update' && $bloc == 'digest') {$count = update count}'
 *  voir check_notifications_digest()
 */
function ceo_vision_ui_notif($template, $bloc, $oid = array(), $unsubscribe_url = null, $method = null, $count = null) {

    $tokens = gofast_notifications_get_tokens($oid);
    $tokens += array('node-update-count' => $count, 'method' => $method ? $method : 'privatemsg');    
    if($unsubscribe_url) $tokens += array('unsubscribe-url' => $unsubscribe_url);
    if($bloc == 'group-header' || $bloc == 'group-footer'){
      $part = str_replace('-', '_', $bloc);
      return theme('gofast_notifications_digest_'.$part, $tokens, $template);
    }else{
      return theme('gofast_notifications_mailer_'.$bloc, $tokens, $template);
    }

//  $output = '';
//  $output .= ceo_vision_ui_notif_compose($template, $bloc, $oid, $unsubscribe_url, $count);
//  $output .= ($bloc == 'footer' && $method == 'HTML Mail') ? '</div>' : '';
//  //$css = file_get_contents('sites/all/themes/fusion/fusion_starter/css/ceo_vision_notif_ui.css', FILE_USE_INCLUDE_PATH);
//  //return $method == 'HTML Mail' ? inline_html($output, $css) : $output;
//  //return $method == 'HTML Mail' ? make_style_inline($style.$output) : $output;
//  return $output;
}




/***** Template messages for notification event - Return HTML String *****/
/* 
 * @param $template : template word-keys
 * @param $bloc     : bloc name
 * @param $oid      : array of id values
 * @param $count    : node-update number for digest
 */
function ceo_vision_ui_notif_compose($template, $bloc, $oid = array(), $unsubscribe_url = null, $count = null) {
    
    global $base_url;
    if(is_object($oid)){
        $nid = $oid->nid;
        $cid = $oid->cid;
        $uid = $oid->uid;
    }elseif(is_array($oid)){
        $nid = $oid['nid'];
        $cid = $oid['cid'];
        $uid = $oid['uid'];
    }
    $glob = token_get_values('global', NULL, FALSE, array());
    $meta = array($glob);
    if (!empty($uid)) {
        $object = user_load($uid);
        // @TODO : check session language param
        // $langcode = $object->language; 
        $user = token_get_values('user', $object, FALSE, array());
        $meta[] = $user;
    }
    if (!empty($cid)) {
        $comment = _comment_load($cid);
        $comment_tokens = token_get_values('comment', $comment, FALSE, array());
        $meta[] = $comment_tokens;
    }
    if (!empty($nid)) {
        $object = node_load($nid);
        $node = token_get_values('node', $object, FALSE, array());
        $meta[] = $node;
    }
    
    $tokens = array();
    foreach ($meta as $object) {
        if (is_object($object)) {
            $tokens = array_merge(array_combine($object->tokens, $object->values), $tokens);
        }
    }
    
//    $token_arr = $values = array();
//    foreach ($meta as $object) {
//        if (is_object($object)) {
//            $token_arr = array_merge($object->tokens, $token_arr);
//            $values = array_merge($object->values, $values);
//        }
//    }
    
//    // Delete doublons :
//    $token_arr = array_unique($token_arr);
//    // Create array (token=>value)
//    $tokens = array();
//    foreach (array_keys($token_arr) as $key) {
//        $token = $token_arr[$key];
//        $tokens[$token] = $values[$key];
//    }
   
    
    // Check og list token, prepare display if necessary
    $tokens['og-all-name'] = !empty($tokens['og-all-name']) ? '<br /><span class="nDate">('.t('Espace(s)').' : '.$tokens['og-all-name'].')</span><br />' : '';
    
    // Return message part template
    switch ($template) {
        case 'notifications-event':
        case 'event-lite': // notifications_lite simple events : header & footer used for og notifications (request, invite, deny, approve, group admin message).
            switch ($bloc) {
                case 'header':
                    $user_name = empty($tokens['user_profile_firstname']) ? $tokens['user'] : $tokens['user_profile_firstname'];
                    //$output  = '<style type="text/css">'.file_get_contents('sites/all/themes/fusion/fusion_starter/css/ceo_vision_notif_ui.css', FILE_USE_INCLUDE_PATH).'</style>';    
                    $output .= '<div class="nText"> ';
                    $output .= '<div class="sub_header">'.t('Bonjour');
                    $output .= '<span class="green_user"> '.$user_name.'</span>,';
                    $output .= '</div>';
                    return $output;
                   
                case 'body': // specific event

                case 'footer':
                    if ($template == 'event-lite') {
                        if ($url = variable_get('temp_unsubscribe_url', FALSE)) {
                            $link = '<a href="'.$url.'"> '.t('Supprimer cet abonnement').'</a>';
                            variable_del('temp_unsubscribe_url');
                        } else {
                            $link = '<a href="'.$base_url.'/og/list#/"> '.t('Liste des Groupes').'</a>';
                        }
                    } else {
                        $url = empty($unsubscribe_url) ? $tokens['subscriptions-manage'].'/subscriptions' : $unsubscribe_url;
                        $link = '<a href="'.$url.'"> '.t('Supprimer cet abonnement').'</a>';
                    }
                    $output  = get_footer_template($tokens, $link);
                    $output .= '</div>'; // fin div class="nText"
                    return $output;

            }
        case 'node-insert':
            switch ($bloc) {
                case 'body':
                    return get_insert_template($tokens);

                case 'digest':
                    $img_link = get_user_profile_link_img(user_load(array('name'=>$tokens['author-name'])));
                    $output  = '\'<a href="'.$tokens['node-url'].'" class="content_title">'.$tokens['title'].'</a>\', ';
                    $output .= t('crée par');
                    $output .= ' '.$img_link;
                    $output .= '<span class="green_user"> '.$tokens['author-name'].' </span>';
                    $output .= '<span class="nDate"> ('.$tokens['ddd'].' '.$tokens['small'].') </span>';
                    $output .= '<div style="margin-bottom:15px;"></div>';
                    return $output;
            }        
        case 'node-update':
            switch ($bloc) {
                case 'body':
                    return get_update_template($tokens);

                case 'digest':
                    $img_link = get_user_profile_link_img(user_load(array('name'=>$tokens['mod-author-name'])));
                    $output  = t('Le contenu a été modifié');
                    if ($count > 1) {
                        $output .= ' '.$count.' '.t('fois').'<br />';
                        $output .= '&nbsp;&nbsp;&nbsp;'.t('Dernière modification');
                    }
                    $output .= ' '.t('par');
                    $output .= ' '.$img_link;
                    $output .= '<span class="green_user"> '.$tokens['mod-author-name'].' </span>';
                    $output .= '<span class="nDate"> ('.$tokens['mod-ddd'].' '.$tokens['mod-small'].') </span>';
                    $output .= '<div style="margin-bottom:15px;"></div>';
                    return $output;
            }            
        case 'comment':          
            switch ($bloc) {
                case 'body':
                    $output  = t('Un nouveau commmentaire a été ajouté à propos de').' \'';
                    $output .= '<a href="'.$tokens['node-url'].'" class="content_title">'.$tokens['title'].'</a>\' :';
                    $output .= $tokens['og-all-name'];
                    $output .= $tokens['type'] == 'forum' ? get_forum_comment_template($comment, $tokens) : get_comment_template($comment, $tokens);
                    return $output;

                case 'digest':
                    $output  = t('Nouveau commentaire :');
                    $output .= $tokens['type'] == 'forum' ? get_forum_comment_template($comment, $tokens) : get_comment_template($comment, $tokens);
                    $output .= '<div style="margin-bottom:15px;"></div>';
                    return $output;       
            }            
        case 'notifications-digest':
            switch ($bloc) {
                case 'header':
                    $user_name = empty($tokens['user_profile_firstname']) ? $tokens['user'] : $tokens['user_profile_firstname'];
                    //$output  = "<style type='text/css'>".file_get_contents('sites/all/themes/fusion/fusion_starter/css/ceo_vision_notif_ui.css', FILE_USE_INCLUDE_PATH)."</style>";
                    $output .= '<div class="nText"> ';
                    $output .= '<div class="sub_header">'.t('Bonjour');
                    $output .= '<span class="green_user"> '.$user_name.'</span>,';
                    $output .= '</div>';
                    $output .= t('Voici le récapitulatif de vos abonnements :');
                    $output .= '<br /><br />';
                    return $output;
                    
                case 'footer':
                    $link = '<a href="'.$tokens['unsubscribe-url-global'].'">'.t('Supprimer vos abonnement').'</a>';
                    return get_footer_template($tokens, $link).'</div>'; // fin div class="nText" ?
            }
        case 'digest-node-nid':
            switch ($bloc) {
                case 'group-header':
                    $output  = '<p style="line-height:10%;">&nbsp;</p>';
                    $output .= '<div class="recap_title">'.t('Mise(s) à jour').' <span class="grp_name">'.$tokens['type-name'].'</span> : ';
                    $output .= '\'<a href="'.$tokens['node-url'].'" class="content_title">'.$tokens['title'].'</a>\'</div>';
                    $output .= '<div class="recap_div">';
                    return $output;
                    
                case 'group-footer':
                    return '</div>';
            }           
        case 'digest-node-type':
            switch ($bloc) {
                case 'group-header':
                    $output  = '<p style="line-height:10%;">&nbsp;</p>';
                    $output .= '<div class="recap_title">'.t('Nouvelle(s) soumission(s)').' : <span class="grp_name">'.$tokens['type-name'].'</span></div>';
                    $output .= '<div class="recap_div">';
                    return $output;
                    
                case 'group-footer':
                    return '</div>';
            }
        case 'og-notifications-update':
        case 'og-notifications': // default
            switch ($bloc) {
                case 'header':
                case 'footer':
                    return ceo_vision_ui_notif_compose('notifications-event', $bloc, $oid, $unsubscribe_url, $count);
                    
                case 'body':
                    return get_update_template($tokens);
            }
        case 'og-notifications-insert':
            switch ($bloc) {
                case 'header':
                case 'footer':
                   return ceo_vision_ui_notif_compose('notifications-event', $bloc, $oid, $unsubscribe_url, $count);
                    
                case 'body':
                    return get_insert_template($tokens);
            }   
        case 'og-comment':
            switch ($bloc) {
                case 'header':
                case 'footer':
                    return ceo_vision_ui_notif_compose('notifications-event', $bloc, $oid, $unsubscribe_url, $count);

                case 'body':
                    $output  = t('Un nouveau commentaire a été ajouté à propos de').' \'';
                    $output .= '<a href="'.$tokens['node-url'].'" class="content_title">'.$tokens['title'].'</a>\' :';
                    $output .= $tokens['og-all-name'];
                    $output .= $tokens['type'] == 'forum' ? get_forum_comment_template($comment, $tokens) : get_comment_template($comment, $tokens);
                    return $output;
            }
    }
}


/**
 * Notification template for a new comment submission
 * @param $comment : the comment object
 * @param $tokens : Associative array of token values
 * @return HTML String
 */
function get_comment_template($comment = null, $tokens = array()) {
    // Finallement on reprend l'ancien thème ...
    return  get_forum_comment_template($comment, $tokens);
//    global $base_url;
//    if(is_null($comment)) $comment = _comment_load($tokens['comment-cid']);
//    $theme = theme_comment_view($comment, null, null, TRUE);
//    // Replace some strings : fix bug, make absolute url, and
//    // Prevent messaging to transform our template
//    $replace = array(
//        '<a id="comment-'.$comment->cid.'"></a>' => '',
//        "\r" => '',
//        "\n" => '',
//        "</div><p></p>" => '',
//        "h3" => 'span',
//        "title" => 'comment_title',
//        '<a href="/fr/node#comment-' => '<a href="'.$tokens['node-url'].'/#comment-',
//        '<a href="/fr/user/' => '<a href="'.$base_url.'/fr/user/',
//        "src='/drupal/sites/default/files/pictures/" => "src='".$base_url."/sites/default/files/pictures/",
//        'class="active"' => '',
//        '<div id="notification_reply_link"></div>' => '<div id="notification_reply_link"><a href="'.$tokens['comment-reply-url'].'"> '.t('Reply').' </a></div>');
//    $theme = str_replace(array_keys($replace), array_values($replace), $theme);
//    // Remove "new comment (unread)" marker
//    $theme = preg_replace('/<a id="new"><\/a>.*<\/span>/s', '</span>', $theme);
//    $output .= '<div id="comments" class="comments">';
//    $output .= $theme;
//    $output .= '</div>';
//    return $output;
}


function get_forum_comment_template($comment = null, $tokens = array()) {
//  Ancien theme ...
    $img_link = get_user_profile_link_img(user_load(array('name'=>$tokens['comment-author-name'])));
    $output .= '<div class="comment_header">';
    $output .= '<div class="comment_avatar">'.$img_link.'</div>';
    $output .= '<div><span class="green_user"> '.$tokens['comment-author-name'].' </span>';
    $output .= '<span class="nDate"> ('.$tokens['comment-ddd'].' '.$tokens['comment-small'].') </span></div></div>';
    $output .= '<div class="comment_div">';
    $output .= '<span class="comment_title"><a href="'.$tokens['comment-url'].'">'.$tokens['comment-title'].'</a></span>';
    $output .= '<blockquote class="comment_body">'.$tokens['comment-body'].'</blockquote></div>';
    $output .= '<div class="comment_footer"><a href="'.$tokens['comment-reply-url'].'"> '.t('Repondre').' </a></div>';
    return $output;
    
//    watchdog('DEBUG COMMENT FORUM', $tokens['type']);
//    global $base_url;
//    if(is_null($comment)) $comment = _comment_load($tokens['comment-cid']);
//    $comment->new = MARK_READ;
//    $theme = theme_comment_view($comment, null, null, TRUE);
//    $replace = array(
//        '<a id="comment-'.$comment->cid.'"></a>' => '',
////        "\r" => '',
////        "\n" => '',
////        "</div><p></p>" => '',
//        '<a href="/fr/user/' => '<a href="'.$base_url.'/fr/user/',
//        "src='/drupal/sites/default/files/pictures/" => "src='".$base_url."/sites/default/files/pictures/",
//        '<div class="forum-jump-links"> </div>' => '<div class="forum-jump-links"><a href="'.$tokens['comment-reply-url'].'">'.t('Reply').' </a></div>');
//    $theme = str_replace(array_keys($replace), array_values($replace), $theme);
//    $theme = preg_replace('#<p>[\n\r\t]*(<span )*.+[\n\r\t]*</p>[\n\r\t]*<p>[\n\r\t]*<span class="forum-post-number">[\n\r\t]*.+[\n\r\t]*</span>[\n\r\t]*</p>#', '', $theme);
//    $output .= '<div id="forum-comments"';
//    $output .= $theme;
//    $output .= '</div>';
//    return $output;
    
}


/**
 * Notification template for a new node submission
 * @param $tokens : Associative array of token values
 * @return HTML String
 */
function get_insert_template($tokens = array()) {
    $img_link = get_user_profile_link_img(user_load(array('name'=>$tokens['author-name'])));
    $output  = '\'<a class="content_title" href="'.$tokens['node-url'].'">'.$tokens['title'].'</a>\' ';
    $output .= '<span class="grp_name">('.$tokens['type-name'].')</span> ';
    $output .= t('a été crée par');
    $output .= ' '.$img_link;
    $output .= '<span class="green_user"> '.$tokens['author-name'].' </span>';
    $output .= '<span class="nDate"> ('.$tokens['ddd'].' '.$tokens['small'].') </span>';
    $output .= $tokens['og-all-name'];
    return $output;
}



/* Return HTML String /update node/
 *  @param $tokens : Associative array of token values
 */
function get_update_template($tokens = array()) {
    $img_link = get_user_profile_link_img(user_load(array('name'=>$tokens['mod-author-name'])));
    $output  = '\'<a class="content_title" href="'.$tokens['node-url'].'">'.$tokens['title'].'</a>\' ';
    $output .= '<span class="grp_name">('.$tokens['type-name'].')</span> ';
    $output .= t('a été modifié par');
    $output .= ' '.$img_link;
    $output .= '<span class="green_user"> '.$tokens['mod-author-name'].' </span>';
    $output .= '<span class="nDate"> ('.$tokens['mod-ddd'].' '.$tokens['mod-small'].') </span>';
    $output .= $tokens['og-all-name'];
    return $output;
}



/* Return HTML String /footer design/
 */
function get_footer_template($tokens = array(), $link) {
    
    // If possible, get some info about subscription (doesn't work with digest)
    $sub_info = '';
    if ($sid = get_sid_from_url($link)) {
        if ($get_info = get_subscription_info($sid)) {
            $sub_info  = ' '.t('car vous êtes au moins abonné à').' ';
            $sub_info .= check_subscription_info($get_info, $tokens);
        }
    }
    $output  = '<div class="footer_line"></div>';
    $output .= '<div class="footer_text">';
    $output .= t('Ceci est un message automatisé de').' ';
    $output .= '<a href="'.$tokens['site-url'].'">'.$tokens['site-name'].'</a>';
    $output .= $sub_info.'<br />';
    $output .= '<a href="'.$tokens['subscriptions-manage'].'/subscriptions">'.t('Gérer vos abonnements').'</a>  | ';
    $output .= $link.'</div>';
    return $output;
}


/* Return sid from unsubscription link
 */
function get_sid_from_url($unsubscribe_url = null) {
    $sid = FALSE;
    if (!empty($unsubscribe_url)) {
        $a = strpos($unsubscribe_url, 'unsubscribe/sid/');
        $b = strpos($unsubscribe_url, '?signature=');
        if ($a != FALSE) {
            $a+=16;
            $sid = substr($unsubscribe_url,$a,($b-$a));
        }
    }
    return $sid;
}


/* Naming for a specific subscription, 
 * Return formatted strings array
 */
function get_subscription_info($sid = null) {
    $sub_info = FALSE;
    if(!empty($sid)) {
        $sub = notifications_load_subscription($sid);
        // Add description ($sub_info['type'], $sub_info['name'])
        $sub_info = notifications_format_subscription($sub, 'array');
    }
    return $sub_info;
}


/* Return formatted HTML string 
 * Check/mofify subscription info
 */
function check_subscription_info($sub_info = array(), $tokens = array()) {
    
    // Replace 'name' values by the first value
    $sub_info['name'] = $sub_info['values'][0];
    // If sub type is content (Thread), what kind of content
    $sub_info['type'] = ($sub_info['type'] == t('Thread')) ? $tokens['type-name'] : $sub_info['type'];  
    // If sub type is Author, add username to description
    if ($sub_info['type'] == t('Author')) {
        $sub_info['name'] = '<span class="green_user">'.$tokens['author-name'].'</span>';
    }
    if ($sub_info['type'] == t(''));
    $inf .= '<span class="grp_name"> '.$sub_info['type'].' : </span>';
    $inf .= $sub_info['name'];
    return $inf;
}


/***** OG notification (lite) template messages for notification event - Return HTML String *****/
/* 
 * @param $template : template word-keys
 * @param $bloc     : bloc name ('header' & 'footer' are templated in ceo_vision_ui_notif_compose() )
 * @param $tokens   : array of tokens values
 */
//function ceo_vision_ui_og_notif($template, $bloc, $tokens = array()) {
//    switch ($bloc) {
//        case 'subject':
//            switch ($template) {
//                case 'user_approved':
//                case 'user_denied':
//                    return t('Votre demande d\'adhésion');  
//                case 'invite':
//                    return t('Invitation');
//                case 'request':
//                    return t('Demande pour rejoindre un groupe');
//                case 'new_admin':
//                    return t('Vous êtes maintenant administrateur');
//            }
//        case 'body':
//            // get picture & link from 'username' token if possible
//            $pic = '';
//            if (!empty($tokens['username'])) {
//                if ($user = user_load(array('name'=>$tokens['username']))) {
//                    $pic = get_user_profile_link_img($user);
//                }
//            }
//            switch ($template) {
//                case 'group_admin':
//                    $output  = '<p>'.t('Voici un message de l\'administrateur du groupe');
//                    $output .= '<a class="grp_name" href="'.$tokens['url_group'].'">'.$tokens['group'].'</a> :</p>';
//                    $output .= '<div class="comment_div round_div">';
//                    $output .= '<blockquote class="comment_body">'.$tokens['body'].'</blockquote></div>';
//                    // Save unsubscription url so that the footer template can retrieve it
//                    if (!empty($tokens['url_unsubscribe'])) {
//                        variable_set('temp_unsubscribe_url', $tokens['url_unsubscribe']);
//                    }
//                    return make_style_inline($output);
//                    
//                case 'user_approved':
//                    $output  = '<p>'.t('Votre demande pour rejoindre le groupe');
//                    $output .= ' <a href="'.$tokens['url_group'].'" class="grp_name">'.$tokens['group'].'</a> ';
//                    $output .= t('a été acceptée').'.</p>';
//                    return make_style_inline($output);
//                    
//                case 'user_denied';
//                    $output  = '<p>'.t('Désolé, votre demande pour rejoindre le groupe');
//                    $output .= ' <a href="'.$tokens['url_group'].'" class="grp_name">'.$tokens['group'].'</a> ';
//                    $output .= t('a été refusée').'</p>';
//                    return make_style_inline($output);
//                    
//                case 'invite':
//                    $output  = '<p><span class="green_user"> '.$pic.' '.$tokens['username'].' </span>';
//                    $output .= t('vous invite à rejoindre le groupe');
//                    $output .= ' <a href="'.$tokens['url_group'].'" class="grp_name">'.$tokens['group'].'</a>. ';
//                    $output .= '<br />'.t('Prenez le temps de lire le message ci-dessous et suivez le lien.').'</p>';
//                    $output .= '<div class="grp_description">';
//                    $output .= '<a href="'.$tokens['url_group'].'">'.$tokens['group'].'</a> : ';
//                    $output .= $tokens['description'].'</div>';
//                    $output .= '<div class="comment_div round_div">';
//                    $output .= '<blockquote class="comment_body">'.$tokens['body'].'</blockquote></div>';
//                    $output .= '<a class="grp_description margin_LR" href="'.$tokens['url_group'].'">S\'inscrire</a>';
//                    return make_style_inline($output);
//                    
//                case 'request':
//                    $output  = '<p><span class="green_user"> '.$pic.' '.$tokens['username'].' </span>';
//                    $output .= t('would like to join group');
//                    $output .= ' <a href="'.$tokens['url_group'].'" class="grp_name">'.$tokens['group'].'</a>.</p>';
//                    $output .= '<p>'.t('Voici son message').' : </p>';
//                    $output .= '<div class="comment_div round_div">';
//                    $output .= '<blockquote class="comment_body">'.$tokens['request'].'</blockquote></div>';
//                    $output .= '<p>'.t('Vous pouvez approuver ou refuser cette demande à partir').' <a href="'.$tokens['url_group'].'" class="grp_name">d\'ici</a>.</p>';
//                    return make_style_inline($output);
//                    
//                case 'new_admin':
//                    $output  = '<p>'.t('Vous êtes maintenant administrateur de l\'Espace');
//                    $output .= ' <a href="'.$tokens['url_group'].'" class="grp_name">'.$tokens['group'].'</a>. <br />';
//                    $output .= t('Vous pouvez administrer ce groupe à partir');
//                    $output .= ' <a href="'.$tokens['url_group'].'" class="grp_name">d\'ici</a>. </p>';
//                    return make_style_inline($output);
//            }
//    }
//}


function form_init_from_cookie(&$form, $cookie) {
    if(!empty($cookie)){
        // Split cookie data string into an array of fields and their values
        $cookieArray = explode('&', $cookie);
        // Go through each field and split it to get field name and it's value
        foreach($cookieArray as $k => $v) {
            $field = explode('=', $v);
            // Populate field with data :
            // If we have a multiple select we need to delete '[]' char in its field-name and make an array of values
            if(strpos(substr($field[0], -2), '[]') !== false) {
                $field[0] = substr($field[0], 0, -2);
                (array) $form[$field[0]]['#value'];                   
                $form[$field[0]]['#value'][] = urldecode($field[1]);
            } else {
                $form[$field[0]]['#value'] = urldecode($field[1]);
            }
        }         
    }
}

function ceo_vision_ui_get_fb_status_view(){
    $view = views_get_view('test_status_ceov');
    print $view->execute_display('page_3');
}

/**
 * Profile Form after_build function
 */
function ceo_vision_ui_profile_form_after_build($form, &$form_state) {
    global $user;
    // Retirer la possibilité de supprimer un compte
    unset($form['delete']);
    $form["Données d'Annuaire"]["profile_organisation"]["#required"]=0;
    $form["account"]["status"]["#title"] = t("Account status");
    $form["account"]["status"]["#description"] = t("You can't delete a user, only block it");
    // On enlève la description car elle propose un lien vers une page qui 
    // n'est pas forcément approprié pour un utilisateur de base.
    $form['messaging']['og_notifications_autosubscribe']['#description'] = '';
    // Explication concernant les paramètres de notifications par défault.
    if($form['#uid'] == $user->uid){
      $dest = "user/{$form['#uid']}/notifications/subscriptions/nojs";
      $title = t('here');
      $alt = t('My subscriptions');
      $subLink = ctools_modal_text_button($title, $dest, $alt, 'ctools-modal-gofast-notifications');
      $form['messaging']['#description'] = '<span style="color:#DA292F; font-size:95%;">' . t('These parameters are default settings and will apply to future subscriptions only. If you want to change settings for your current subscriptions, click !here.', array('!here' => $subLink)) . '</span>';
    }
    
    if($user->uid !== 1 && $form['#uid'] !== ceo_vision_ui_get_id_subadmin()){
      // On eneleve le role admin
      unset ($form['account']['roles']['#options'][6]);
      unset ($form['account']['roles'][6]);
      unset ($form['account']['roles']['#options'][6]);
    }
    
    
    return $form;
}


function ceo_vision_alfresco_item_validation(&$form, &$form_state) {
    if(isset($_FILES['files'])) {
        watchdog("node_form_validation",'uploading alfresco item');
    }else{
        watchdog("node_form_validation",'node updated - alfresco item is unchanged');
    }
}

/**
 * WebForm validation function
 * @param type $form
 * @param type $form_state 
 */
function ceo_vision_webform_new(&$form, &$form_state) {
    $_SESSION['webform_action'] = 'webform-add';
}

function ceo_vision_ui_views_data() {
    $data = array();

  // ----------------------------------------------------------------------
  // alfresco_node table

  // reference
//  $data['ceovision_ui']['test1'] = array(
//    'title' => t('test'),
//    'help' => t('test.'),
//    'field' => array(
//      'handler' => 'views_handler_field',
//      'click sortable' => TRUE,
//    ),
//    'sort' => array(
//      'handler' => 'views_handler_sort',
//    ),
//    'filter' => array(
//      'handler' => 'views_handler_filter_string',
//    ),
//    'argument' => array(
//      'handler' => 'views_handler_argument_string',
//    ),
//  );
  
  return $data;
}



function ceo_vision_ui_elements() {
  return array(
    'userreference_autocomplete' => array(
      '#input' => TRUE,
      '#columns' => array('name'), '#delta' => 0,
      '#process' => array('ceo_vision_ui_userreference_autocomplete_process'),
      '#autocomplete_path' => FALSE,
      ),
    );
}





function ceo_vision_ui_footer(){
    global $user;
   // watchdog("debug footer ceo_vision_ui", $user->uid);
}



function is_not_extranet($permission){
    global $user;
    if (in_array('extranet', array_values($user->roles))) {
        return false;
    }else{
        return true;
    }
}

function gofast_get_json_object_from_node(){
    $nid = $_GET["nid"];
    $node = node_load($nid);

    if($node->language == ""){
        $lang = "und";
    }else{
        $lang = $node->language;
    }
    $array_object = array();
    if(isset($node->nid)){
       $taxo = taxonomy_node_get_terms($node, "vid");
        $array_object["title"] = $node->title;
        $array_object["language"] = $lang;
        $array_object["created"] = $node->created;
        $array_object["changed"] = $node->changed;
        //$array_object["body"] = $node->body;
        $array_object["category"] = gofast_check_integrity_transform_category_term($taxo[3]->name);
        $array_object["criticity"] =  gofast_check_integrity_transform_criticity_term($taxo[4]->name);
        $array_object["document_author"] = $node->field_document_author[0]['value'];
        $array_object["external_page_url"] = $node->field_target_link_url[0]['value'];
        $array_object["format"] = gofast_check_integrity_transform_format_term($taxo[13]->name);
        $array_object["publication"] = $node->field_publication_doc[0]['nid'];
        $array_object["reference"] = $node->reference;
        $array_object["state"] = gofast_check_integrity_transform_status_term($taxo[12]->name);
        $string_tags = "";

        //AIFE specific
        $array_object['field_cei'] = $node->field_cei;
        $array_object['field_fdl'] = $node->field_fdl;
        $array_object['field_trigger_event_owners'] = $node->field_trigger_event_owners;
        foreach($node->taxonomy as $taxo){
            if($taxo->vid == 16){
                $array_object['field_trigger_event'] .= $taxo->name . ";";
            }
        }
        foreach($node->field_trigger_event_history as $term){
          $tid = $term['value'];
          if(!empty($tid)){
            $array_object['field_trigger_event_history'][] = taxonomy_get_term($tid)->name;
          }
        }
        $array_object['field_checkout_infos'] = $node->field_checkout_infos;


        foreach($node->taxonomy as $taxo){
            if($taxo->vid == 8){
                $string_tags .= $taxo->name.";";
            }
        }

        $array_object["tags"] = $string_tags;
        $array_object["target_link"] = $node->field_target_link[0]['nid'];
        $array_object["comment_count"] = $node->comment_count;


         //if the node is a space, construct an array with members list, classified by roles
        if($node->type == "orga" || $node->type == "group_node"){
            $array_object["administrator member"] = array_keys(ceo_vision_get_admin_members_group($node->nid));
            sort($array_object["administrator member"]);
            $array_object["administrator member"] = implode(",", $array_object["administrator member"]);

            $array_object["group contributor"] = array_diff(array_keys(ceo_vision_get_standard_members_group($node->nid)), array_keys(ceo_vision_get_admin_members_group($node->nid)));
            sort($array_object["group contributor"]);
            $array_object["group contributor"] = implode(",", $array_object["group contributor"]);


            $array_object["read only member"] = array_keys(ceo_vision_get_readonly_members_group($node->nid));
            sort($array_object["read only member"]);
            $array_object["read only member"] = implode(",", $array_object["read only member"]);

        }

        if($full == true){
            //TODO get cmis infos
        }
    }
    print json_encode($array_object);
    exit;
}

function gofast_check_integrity_transform_format_term($name){
    switch ($name) {
        case 'EMail':
           $return = "Email";
           break;
        case "Document Texte";
           $return = "Text Document";
           break;
        case "Document PDF":
           $return = "PDF";
           break;
        case "Présentation":
           $return = "Presentation";
           break;
        case "Tableur":
          $return = "Spreadsheet Document";
          break;
        case "Image":
         $return = "Picture";
         break;
        case "Autre":
         $return = "Other";
         break;
        case "Formulaire":
         $return = "Webform";
         break;
        case "Page externe":
         $return = "External Web Page";
         break;
         case "Groupe":
         $return = "Group";
         break;
        case "Document PDF Image":
         $return = "PDF Image";
         break;
        case "Courrier entrant":
         $return = "Inbound (e)mail";
        break;
        case "Courrier sortant":
         $return = "Outbound (e)mail";
        break;
        case "Vidéo":
         $return = "Video";
        break;
     case "Page Web":
         $return = "Web Page";
        break;
    case "Discussion":
         $return = "Forum";
        break;
    case "ODG":
         $return = "Vectorial presentation";
        break;

       default:
         $return =  $name;
          break;

    }
    return $return;

}

function gofast_check_integrity_transform_criticity_term($name){
    switch ($name) {
        case 'Critique':
           $return = "Critical";
           break;
        case "Haute";
           $return = "High";
           break;
        case "Normale";
           $return = "Normale";
           break;
        case "Faible";
           $return = "Low";
           break;
        default:
           $return =  $name;
        break;
    }
    return $return;

}

function gofast_check_integrity_transform_category_term($name){
    switch ($name) {
        case 'Spécification':
           $return = "Specification";
           break;
        case "Nouvelle";
           $return = "Information";
           break;
        case "Contrat";
           $return = "Contract";
           break;
        case "Rapport";
           $return = "Report and minutes";
           break;
        case "Facture";
           $return = "Invoice";
           break;
        case "Procédure";
           $return = "Procedure";
           break;
        case "Candidature";
           $return = "Candidature";
           break;
        case "Fiche de lecture";
           $return = "Fiche de Lecture";
           break;
        case "Présentation";
           $return = "Presentation";
           break;
        case "Compte-Rendu";
           $return = "Report and minutes";
           break;

        default:
           $return =  $name;
        break;
    }
    return $return;

}



function gofast_check_integrity_transform_status_term($name){
    switch ($name) {
        case 'Validé':
           $return = "Validated";
           break;
        case "Archivé";
           $return = "Archived";
           break;
        case "Brouillon";
           $return = "Draft";
           break;
        case "Rejeté";
           $return = "Rejected";
           break;
        case "A valider";
           $return = "Request validation";
           break;
        case "En cours";
           $return = "In Progress";
           break;

        default:
           $return =  $name;
        break;
    }
    return $return;

}