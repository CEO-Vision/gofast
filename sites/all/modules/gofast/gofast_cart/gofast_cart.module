<?php

function gofast_cart_menu(){

  $items = array();

  $items['modal/%ctools_js/cart'] = array(
    'title' => t('Cart', array(), array('context' => 'gofast')),
    'page callback' => 'gofast_cart_ui_display_modal',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'options' => array(
      'attributes' => array(
        'class' => 'ctools-use-modal'
      ),
    ),
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
    'weight' => -49
  );

   $items['modal/%ctools_js/bulk_add_to_cart'] = array(
    'title' => t('Bulk add to cart', array(), array('context' => 'gofast')),
    'page callback' => 'gofast_cart_ui_display_modal_bulk_add',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

   $items['gofast_cart_remove_all'] = array(
    'title' => t('Remove all items from cart', array(), array('context' => 'gofast')),
    'page callback' => 'gofast_cart_remove_all',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['gofast_cart/get_node_references'] = [
    'page callback' => 'gofast_cart_get_node_references',
    'access callback' => 'user_access',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

function gofast_cart_init(){
    drupal_add_js(drupal_get_path('module', 'gofast_cart') . '/gofast_cart.js');
}


function gofast_cart_ui_display_modal_bulk_add($js){
  $form_id = 'gofast_cart_bulk_add_form';

  if (!$js) {
    $form = drupal_get_form($form_id);
    return $form;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'ajax' => TRUE,
    'build_info' => array(
      'args' => array()
    ),
    'title' => null
  );

  $commands = ctools_modal_form_wrapper($form_id, $form_state);
  if ($form_state['executed']) {
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = gofast_command_toast_message(t('Your items were succesfully added to the cart', array(), array('context' => 'gofast:gofast_cart')), 'success');
  }
  print ajax_render($commands);

}


/**
 * This form allow to add multiple document of selected items from ITHit to cart.
 * @param type $form
 * @param array $form_state
 * @return type
 */
function gofast_cart_bulk_add_form($form, &$form_state) {

  $selected_items_json = array();
  global $user;
  if(variable_get("ithit_bulk_".$user->uid, NULL)){
      $selected_items_json = json_decode(rawurldecode(variable_get("ithit_bulk_".$user->uid, NULL)));
      variable_del("ithit_bulk_".$user->uid);
  }

  // Sorting the items received in parameter (Folders first, then Resource)
  usort($selected_items_json, function($a, $b) {
    return $a->type > $b->type;
  });

  $items_by_type = array();
  foreach ($selected_items_json as $selected_item_type) {
    $items_by_type[$selected_item_type->type][] = $selected_item_type->url;
  }

  $form_state['selected_item_by_type'] = $items_by_type;
  $form['selected_item_by_type'] = array(
      '#type' => 'textfield',
      '#maxlength' => "9999999",
      '#default_value' => json_encode($items_by_type),
    );
  $form['selected_item_by_type']['#attributes']['class'][] = "gofast_display_none";

  $rendered_items = '<h2>' . t('Add theses folders and documents to your cart:', array(), array('context' => 'gofast')) . '</h2>';
  foreach ($items_by_type as $key => $items) {
    $rendered_items .= '<ul><li>' . implode('</li><li>', $items) . '</li></ul>';
  }

  $form['selected_items'] = array(
    '#markup' => $rendered_items,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Save", array(), array('context' => 'gofast')),
  );

  return $form;
}


function gofast_cart_bulk_add_form_validate($form, &$form_state){

}


function gofast_cart_bulk_add_form_submit($form, &$form_state) {
  $updated_nids = array();
  foreach (json_decode($form_state["values"]['selected_item_by_type']) as $type => $items_by_type) {
    if ($type === 'Folder') {
      foreach ($items_by_type as $item_path) {
        $alfresco_path = str_replace("/alfresco/webdav", "", $item_path);
        $folder_item = gofast_cmis_item_get_by_path($alfresco_path);
        $descendants = gofast_cmis_item_get_children($folder_item->id, FALSE, 'documents');
        foreach ($descendants as $descendants) {
          if (isset($descendants->nid)) {
            $updated_nids[$descendants->path] = $descendants->nid;
          }
        }
      }
    } else {
      foreach ($items_by_type as $item_path) {
        //Force replication of this content if it's not yet replicated
        $_GET['href'] = $item_path;
        gofast_cmis_replicate(FALSE);

        $alfresco_path = str_replace("/alfresco/webdav", "", $item_path);
        $item = gofast_cmis_item_get_by_path($alfresco_path);
        if(isset($item->id) && $item->properties['gofast:nid']) {
          $updated_nids[$alfresco_path] = $item->properties['gofast:nid'];
        }
      }
    }
  }

  if(count($updated_nids) > 0){
    global $user;
    foreach($updated_nids as $nid) {
      $flag = flag_get_flag('cart');
      $flag->flag('flag', $nid, $user, TRUE);
    }
  }
}


/*
 * Modal for subscription UI
 */
function gofast_cart_ui_display_modal($js){
    drupal_get_messages();
    ctools_include('ajax');
    ctools_include('modal');

    global $user;

    if (!$js) {
      return drupal_goto('gofast_cart');
    }
    $render = gofast_cart_display_table();
    $attr = array(
      'onClick' => "Gofast.Cart.bulkSelectedCart(event)",
    );
    $download_field = '<li class="navi-item">' . theme('gofast_link_generic', array(
              'text' => t('Download', array(), array('context' => 'gofast')),
              'link_id' => "download",
              'link_class' => '',
              'icon_class' => "fa fa-cloud-download",
              'onClick' => 'Gofast.Cart.downloadSelectedCart()',
            )) . '</li>';
    $manage= '<div id="cart_toolbar_manage" class="btn-group dropup">'
            . '<button type="button" class="btn btn-default btn-sm d-flex align-items-center dropdown-toggle" data-toggle="dropdown" aria-haspopup="true"><i class="fa fa-bars text-primary" aria-hidden="true"></i>  <span class="">' . t('Actions', array(), array('context' => 'gofast:ajax_file_browser')) .  '  </span><span class="caret"></span></button>'
            . '<ul class="dropdown-menu">'
            . '<div class="navi navi-hover navi-link-rounded min-w-250px">'
                .  '<li class="navi-item">' . $download_field
                .  '<li class="navi-item">' . gofast_dropdown_link(t('Manage Metadata', array(), array('context' => 'gofast')), '/modal/nojs/manage-taxonomy', 'taxonomy_open_span', 'ctools-use-modal manage-taxonomy navi-link', 'fa fa-tags', $attr ) . '</li>'
                .  '<li class="navi-item">' . gofast_dropdown_link(t('Share/Add locations', array(), array('context' => 'gofast')), '/modal/nojs/add-locations', 'locations_open_span', 'ctools-use-modal add-locations navi-link', 'fa fa-share-alt', $attr). '</li>'
                .  '<li class="navi-item">' . gofast_dropdown_link(t('Create publications', array(), array('context' => 'gofast')), '/modal/nojs/manage-publications', 'publications_open_span', 'ctools-use-modal manage-publications navi-link', 'fa fa-arrow-up', $attr). '</li>'
                .  '<li class="navi-item">' . gofast_dropdown_link(t('Share by email', array(), array('context' => 'gofast')), '/modal/nojs/manage-mail-sharing', 'publications_open_span', 'ctools-use-modal manage-mail-sharing navi-link', 'fa fa-envelope', $attr). '</li>'
		.  '<li class="navi-item">' . gofast_dropdown_link(t('Archive cart content', array(), array('context' => 'gofast:gofast_cart')), '/modal/nojs/bulk-archive', 'taxonomy_open_span', 'ctools-use-modal bulk-archive navi-link', 'fa fa-archive', $attr ) . '</li>'
                .  '<li class="d-none">' . gofast_dropdown_link(t('Manage Metadata', array(), array('context' => 'gofast')), '/modal/nojs/manage-taxonomy', 'taxonomy_open_span', 'ctools-use-modal bulk_taxonomy manage-taxonomy gofast_display_none', 'fa fa-tags'). '</li>'
                .  '<li class="d-none">' . gofast_dropdown_link(t('Share/Add locations', array(), array('context' => 'gofast')), '/modal/nojs/add-locations', 'locations_open_span', 'ctools-use-modal bulk_add_locations add-locations gofast_display_none', 'fa fa-share-alt'). '</li>'
                .  '<li class="d-none">' . gofast_dropdown_link(t('Create publications', array(), array('context' => 'gofast')), '/modal/nojs/manage-publications', 'publications_open_span', 'ctools-use-modal bulk_publications manage-publications gofast_display_none', 'fa fa-arrow-up'). '</li>'
                .  '<li class="d-none">' . gofast_dropdown_link(t('Share by email', array(), array('context' => 'gofast')), '/modal/nojs/manage-mail-sharing', 'publications_open_span', 'ctools-use-modal bulk_mail_sharing manage-mail-sharing gofast_display_none', 'fa fa-envelope'). '</li>'
                .  '<li class="d-none">' . gofast_dropdown_link(t('Archive cart content', array(), array('context' => 'gofast')), '/modal/nojs/bulk-archive', 'taxonomy_open_span', 'ctools-use-modal bulk_archive bulk-archive gofast_display_none', 'fa fa-archive'). '</li>'
          . '</div></ul>'
          . '</div>';
    $start_workflow = '<button id="cart_toolbar_process" class="btn btn-default btn-sm d-flex ml-1" onClick="Drupal.gofast_workflows.ceo_vision_js_process_get_available_processes(\'cart\')"><i class="fa fa-cogs text-primary"></i>  <span class="">' . t('New process', array(), array('context' => 'gofast:gofast_workflows')) . '</span></button>';
    $delete_all_content_button = '<div id="remove_from_cart" class="m-0 ml-auto p-1"><button id="remove_all_documents" class="btn btn-default btn-sm d-flex" onClick="Gofast.Cart.remove()"><i class="fa fa-trash text-danger"></i>  <span class="">' . t("Remove all documents", array(), array('context' => 'gofast')) . '</span></button></div>';
    $res = $manage . $start_workflow . $delete_all_content_button . $render;
    $render = $res;
    $render .= '<select multiple class="gofast_display_none" id="cart_node_id"></select>';
    $render .= "<script type='text/javascript'>"
		  ."jQuery('.flag-cart').each(function(){"
		      ."jQuery(this).addClass('btn btn-sm');"
		  . "});";

    //Retrieve all nids in the cart
    $flags = (array) flag_get_user_flags("node", NULL, $user->uid)['cart'];
    $nids = array_keys($flags);

    foreach($nids as $nid){
        $render .= "jQuery('#cart_node_id').append('<option>" . $nid . "</option>');";
    }

    $render .= "</script>";

    $modal = ctools_modal_form_render(NULL, $render);
    print ajax_render($modal);
    exit;
}

/*
 * Remove all items from user cart
 */
function gofast_cart_remove_all(){
    global $user;
    $account = user_load($user->uid);

    $cart_flag = flag_get_flag("cart");
    $flags = flag_get_user_flags("node", NULL, $user->uid)['cart'];

    foreach($flags as $flag){
        $entity_id = $flag->entity_id;
        $cart_flag->flag('unflag', $entity_id, $account, TRUE);
    }

    exit;
}

function gofast_cart_theme() {
  $items = [];

  $items = [
    'gofast_cart_modal_cart' => [
      'template' => 'tpl/gofast-cart-modal-cart'
    ],
    'gofast_cart_modal_cart_table_content' => [
        'template' => 'tpl/gofast-cart-modal-cart-table-content'
    ],
    'gofast_cart_modal_cart_table_more_locations' => [
        'template' => 'tpl/gofast-cart-modal-cart-table-more-locations'
    ],
  ];

  return $items;
}

/**
 * Gets the flags of a user given an entity type.
 *
 * A version of flag_get_user_flags that has its request paginated using
 * PagerDefault.
 *
 * The current page is decided by the GET parameter 'page'.
 *
 * @param string $entity_type The type of entity that has been flagged
 * @param string $flag_name The name of the flag we want to retrieve
 * @param mixed $entity_id The ID of a specific entity to get the flags of
 * @param mixed $uid The ID of the user of which we want the flags. Defaults to
 *    the current user id.
 * @param mixed $sid The Session ID. Defaults to the sid associated with the user.
 * @param int $limit The number of items per page. Defaults to 10.
 * @return array|null Returns an array of maximum $limit items for the current
 *    page, or null if nothing could be found
 * @throws PDOException A Database connection error occurred
 */
function gofast_cart_paginated_get_user_flags(
  string $entity_type,
  string $flag_name,
  $entity_id = null,
  $uid = null,
  $sid = null,
  int $limit = 10,
) {
  // apply defaults
  $uid ??= $GLOBALS['user']->uid;
  $sid ??= flag_get_sid($uid);

  // whether to include the entity_id as a condition on the DB Query later.
  $filter_entity_id = isset($entity_id);

  // get teh flag object corresponding to the passed-in name.
  // allows us to get the flag ID.
  $flag = flag_get_flag($flag_name);

  // build the base DB select query
  $query = db_select('flagging', 'fc');
  $query
    ->fields('fc')
    ->condition('fc.entity_type', $entity_type)
    ->condition('fc.fid', $flag->fid)
    ->condition('fc.sid', $sid)
    ->condition(
      db_or()
        ->condition('fc.uid', $uid)
        ->condition('fc.uid', 0)
    );
  // Add entity_id condition only if required.
  if ($filter_entity_id) {
    $query->condition('fc.entity_id', $entity_id);
  }

  // Add and configure pagination
  /** @var PagerDefault */
  $query = $query->extend(PagerDefault::class);
  $query->limit($limit);

  // run and retrieve entries
  /** @var null|(PDOStatement&DatabaseStatementInterface) */
  $result = $query->execute();

  return $result->fetchAll() ?: null;
}

/*
 * GOFAST-6852 : Cart rework
 * Creates the table that will be displayed in the cart modal
 * When the node is multi-filled in 3 or more locations, add a clickable popover which contains the full list of all the paths
 * -> This behavior is similar to the one in the activity feed, even though there is 2 different templates to cover some future specifications
 * $table contains all the data needed per node :
 *  - $table[]['name'] : used for cases where title field is truncated so the user can see the node title when hovering it
 *  - $table[]['title'] : formatted title of the node (icon + title)
 *  - $table[]['date'] : the short format cart addition date of the node
 *  - $table[]['locations'] : all the locations of the node with the behavior described above
 *  - $table[]['actions'] : the button to remove the node from the cart
 *
 * This function replaces the following drupal view : gofast_flag_cart
 */
function gofast_cart_display_table() {
    global $user;
    $account = user_load($user->uid);
    
    $output = "";
    $table = [];
    $cart_flag = flag_get_flag("cart");
    $flags = gofast_cart_paginated_get_user_flags('node', 'cart', uid: $user->uid, limit: 10);

    foreach($flags as $flag) {
        $node = [];
        $f_node = node_load($flag->entity_id);
        if($f_node->status == 0){
          $cart_flag->flag('unflag', $flag->entity_id, $account, TRUE);
          //continue;
        }
        $node_icon = theme('gofast_node_icon_format', array('node' => $f_node));

        //Formatted title of the node, with its icon
        $node_title = $node_icon . $f_node->title;

        // Get node href
        $node_href = "/node/$f_node->nid";

        //Location(s) of the node
        $spaces = $f_node->field_emplacement[LANGUAGE_NONE];
        $space_ids = gofast_og_get_parent($f_node);
        $count_more = -2;
        $locations = $more_spaces_output = '';

        //Replace this part by the one which is above
//        foreach($spaces as $space) {
//            $locations .= ($count_more >= 0) ? '' : '<span class="" title="' . $space['value'] . '">' . $space['value'] . '</span><br \>';
//            $more_spaces_output .= "<li class='navi-item'><span class='navi-link'>". $space['value'] . "</span></li>";
//            $count_more++;
//        }
        if($count_more > 0) {
            $button = $count_more . " " . t("more", [], ["context" => "gofast:gofast_cart"]) . "...";
            $locations .= theme('gofast_cart_modal_cart_table_more_locations', ['popover_content' => $more_spaces_output, 'button_text' => $button]);
        }
        
        //Remove from cart action
        $actions_variables = [
          'link_text' => 'A'
        ];
        $flag_actions = flag_create_link('cart', $flag->entity_id, $actions_variables);
        
        //Fill the data of the node
        $node = [
            'name' => $f_node->title,
            'date' => format_date($flag->timestamp, 'short'),
            'title' => $node_title,
            'href' => $node_href,
            'locations' => gofast_breadcrumb_display_breadcrumb($f_node->nid, ['return' => TRUE, 'show_title' => FALSE, 'remove_extension' => FALSE, 'title_link' => TRUE, 'in_modal' => TRUE]),
            'actions' => $flag_actions
        ];

        $table[] = $node;
    }
    $content = (empty($table)) ? "" : theme('gofast_cart_modal_cart_table_content', array('items' => $table));
    $output = theme('gofast_cart_modal_cart', array('table_content' => $content));
    return $output;
}

/**
 * Callback for an API endpoint to get node cmis item ids ("references") from a list of node ids.
 *
 * The request body should be a application/x-www-form-urlencoded conforming to
 * the `Request` type once deserialized.
 *
 * The endpoint sends back a JSON response conforming with the `Response` type.
 * ```ts
 * type Request = {
 *  nodeIds: string[], // array of node IDs
 * }
 *
 * type Response = {
 *    nodeId: string,
 *    nodeRef: string,
 * }[]
 * ```
 * @return void
 */
function gofast_cart_get_node_references() {
  //Check content type
  if (strpos($_SERVER['CONTENT_TYPE'], "application/x-www-form-urlencoded") === FALSE) {
    gofast_api_not_implemented("This Content-Type");
    return;
  }

  //Check authentication
  global $user;
  if ($user->uid == 0) {
    gofast_api_not_authorized("Unavailable ressource for anonymous user");
    return;
  }

  if(!isset($_POST['nodeIds'])) {
    gofast_api_mandatory_parameter('nodeIds');
    return;
  }
  $node_ids = $_POST['nodeIds'];

  $node_references = [];
  $nodes = node_load_multiple($node_ids);
  foreach($nodes as $node) {
    $node_references[] = [
      'nodeId' => $node->nid,
      'nodeRef' => gofast_cmis_node_get_item_id($node),
    ];
  }

  gofast_api_success($node_references);
}
