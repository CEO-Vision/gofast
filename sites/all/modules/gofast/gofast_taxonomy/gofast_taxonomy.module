<?php


/**
 * Define the vocabulary identifier that lists 'format' taxonomy terms.
 */
define('GOFAST_VID_FORMAT', variable_get('gofast_vocabulary_format', 0));

/**
 * Define the vocabulary identifier that references 'tags' taxonomy terms.
 */
define('GOFAST_VID_TAGS', variable_get('gofast_vocabulary_tags', 0));

/**
 * Define the vocabulary identifier that references 'state' taxonomy terms.
 */
define('GOFAST_VID_STATE', variable_get('gofast_vocabulary_state', 0));

/**
 * Define the vocabulary identifier that references 'category' taxonomy terms.
 */
define('GOFAST_VID_CATEGORY', variable_get('gofast_vocabulary_category', 0));

/** 
 * Define the vocabulary identifier that references 'classification' taxonomy terms.
 */
define('GOFAST_VID_CLASSIFICATION', variable_get('gofast_vocabulary_classification', 0));

/**
 * Define the vocabulary identifier that references 'category' taxonomy terms.
 */
define('GOFAST_VID_CRITICITY', variable_get('gofast_vocabulary_criticity', 0));

/**
 * Define the vocabulary identifier that references 'columns' taxonomy terms.
 */
define('GOFAST_VID_COLUMNS', variable_get('gofast_vocabulary_columns', 0));

/**
 * Define vocabulary identifiers that references user-centric taxonomy terms.
 */
define('GOFAST_VID_SKILLS', variable_get('gofast_vocabulary_skills', 0));
define('GOFAST_VID_HOBBIES', variable_get('gofast_vocabulary_hobbies', 0));
define('GOFAST_VID_INTERESTS', variable_get('gofast_vocabulary_interests', 0));

define('GOFAST_TAXONOMY_FORMAT_FIELD', 'field_format');
define('GOFAST_TAXONOMY_CATEGORY_MEMBERSHIP_FIELD', 'og_taxonomy_category_group');

/*
 * Includes to other files
*/
include_once drupal_get_path("module", "gofast") . '/gofast.admin.inc';

/**
 * Helper to iterate over Gofast taxonomy vocabularies.
 * @return An array of vocabulary machine names.
 */
function gofast_taxonomy_vocabularies() {
  return array(
    'format',
    'tags',
    'state',
    'category',
    'criticity',
    'skills',
    'hobbies',
    'interests',
    'columns',
  );
}

/**
 * Helper that returns the cardinality of a given gofast vocabulary field.
 * @param $vid A vocabulary id.
 */
function gofast_taxonomy_vocabulary_cardinality($vid) {
  if (!$vid || ($vocabulary = taxonomy_vocabulary_load($vid)) === FALSE) {
    return FALSE;
  }

  $field_name = 'field_' . $vocabulary->machine_name;
  return gofast_field_get_cardinality($field_name);
}

/**
 * Implements hook_enable()
 */
function gofast_taxonomy_enable() {

  $gofast_weight = db_select('system')
          ->fields('system', array('weight'))
          ->condition('name', 'gofast', '=')
          ->execute()
          ->fetchField();

  db_update('system')
          ->fields(array('weight' => $gofast_weight))
          ->condition('name', 'gofast_taxonomy')
          ->execute();


  // Set/reset gofast vocabulary identifiers.
  $vocabularies = taxonomy_vocabulary_get_names();
  $missing = array();
  foreach (gofast_taxonomy_vocabularies() as $name) {
    if (!isset($vocabularies[$name]->vid)) {
      $missing[$name] = $name;
      watchdog('gofast_taxonomy', "Vocabulary '{$name}' does not exist.");
      /**
       * @todo : we rely on Features for vocabulary creation but it would be
       *  nice to handle the creation programatically.
       */
      continue;
    }
    variable_set('gofast_vocabulary_' . $name, $vocabularies[$name]->vid);
    watchdog('gofast_taxonomy', "{$name} vid reset : {$vocabularies[$name]->vid}");
  }
  if (!empty($missing)) {
    watchdog('gofast_taxonomy', 'If features is used to enable this module, the
      last messages are expected "normal" because vocabularies are not yet
      replicated in database when running hook_enable().');
  }
}


/**
 * Implements hook_init()
 */
function gofast_taxonomy_init() {
  drupal_add_js(drupal_get_path('module', 'gofast_taxonomy') . '/js/gofast_taxonomy.js');
}

/**
 * Implements hook_field_access().
 */
function gofast_taxonomy_field_access($op, $field, $entity_type, $entity, $account) {
  if (empty($entity)) {
    // We are in field settings page.
    return;
  }

  if ($op != 'edit') {
    return;
  }

  // Prevent user to edit format, it should be mainained automatically.
  if ($field['field_name'] === 'field_format') {
    return FALSE;
  }
}

/**
 * Helper that retrieve all format term id's along with their respective
 * icons name. The mapping array is loaded once during a page load.
 *
 * @return Array
 *  An array of icon names keyed by their respective taxonomy (format) term ID.
 */
function gofast_taxonomy_load_icons() {
  static $icons;
  if (!isset($icons)) {
    $icons = gofast_get_field_values('field_icone', 'taxonomy_term', 'format');
  }
  return $icons;
}

/** Implements hook_taxonomy_term_presave */
function gofast_taxonomy_term_presave(&$term) {
  // GOFAST-4833: ensure tags term names to be all upper case
  if (variable_get("gofast_taxonomy_tags_force_case", 0) && $term->vid == GOFAST_VID_TAGS) {
    $term->name = strtoupper($term->name);
  }
}

/**
 * Returns an icon format filename given its format term ID.
 * @param type $tid
 */
function gofast_taxonomy_icon_filename($tid) {
  $icons = gofast_taxonomy_load_icons();
  return isset($icons[$tid]) ? $icons[$tid] : 'unknown.png';
}

function gofast_taxonomy_node_presave($node) {
  if ($node->type == "alfresco_item") {
    // add/remove template tag as necessary.
    gofast_taxonomy_update_template_tag($node);

    //on récupere l'extension du fichier
    $filename = isset($node->{GOFAST_CMIS_FILENAME_FIELD}[LANGUAGE_NONE][0]["value"]) ? $node->{GOFAST_CMIS_FILENAME_FIELD}[LANGUAGE_NONE][0]["value"] : gofast_cmis_item_get(gofast_cmis_node_get_item_id($node))->properties["cmis:contentStreamFileName"];
    $file_info = pathinfo($filename);
    $extension = isset($file_info['extension']) && $file_info['extension'] !== NULL ? $file_info['extension'] : '';

    //si l'extension vaut html, soit c'est un doc html, soit c'est une page externe aspirée par Drupal
    //pour savoir, je verifie si le champs field_external_page_url est remplit ou non. Si oui c'est une page externe aspirée
    if ($extension === "html") {
      if (count((array) $node->field_external_page_url[LANGUAGE_NONE]) > 0) {
        $extension = "external_page";
      }
    }

    //Check if we don't have empty tags to fix GOFAST-6773 & GOFAST-6748
    foreach($node->field_tags['und'] as $k => $tag){
        if(empty(trim($tag['tid']))){
            unset($node->field_tags['und'][$k]);
        }
    }
  }
  else {
    $extension = $node->type;
  }

  if (!isset($node->nid)){
    $is_pdf_image = gofast_cmis_detect_pdf_image($node);
    if ($is_pdf_image == true){
      $extension = "pdf_image";
    }
  }

  $tid = gofast_taxonomy_get_taxo_id_from_extension($extension);
  $node->{GOFAST_TAXONOMY_FORMAT_FIELD}[LANGUAGE_NONE][0]['tid'] = $tid;
}

//fonction qui renvoit le tid (term id) qui correspond a l'entité du terme du vocabulaire "Format" qui correspond a l'extension recu en parametre
// par exemple si on recoit PDF en parametre, on charge le terme de vocabulaire pdf du vocabulaire format
function gofast_taxonomy_get_taxo_id_from_extension($extension) {
  $extension = strtolower($extension);

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'taxonomy_term')
          ->propertyCondition('vid',GOFAST_VID_FORMAT)
          ->fieldCondition('field_extensions', 'value', "%;$extension;%", 'like')
          ->execute();

  if (!empty($entities['taxonomy_term'])) {

    $taxonomy_term = taxonomy_term_load_multiple(array_keys($entities['taxonomy_term']));
    $tid = reset($taxonomy_term);
    $tid = $tid->tid;
  }
  else {
    $tid = gofast_taxonomy_get_default_term_format();
  }

  return $tid;
}

/*
 * Map extensions with associated font awsome icons
 */
function gofast_taxonomy_get_map_extensions_icons(){
  $return_map = array();

  //Get extensions mapped to tids
  $ext_mapping = db_select('field_data_field_extensions', 'fext')
      ->fields('fext', array('entity_id', 'field_extensions_value'))
      ->execute()
      ->fetchAllAssoc("entity_id");

  //Get tids mapped to icons
  $tid_mapping = gofast_taxonomy_load_icons();

  foreach($ext_mapping as $exts){
    //Split extensions
    $extensions = $exts->field_extensions_value;
    $tid = $exts->entity_id;
    $ext_split = explode(";", $extensions);

    //Fill the array
    foreach($ext_split as $ext){
      if(!empty($ext)){
        $return_map[$ext] = $tid_mapping[$tid];
      }
    }
  }

  return $return_map;
}

/**
 * Returns the taxonomy term id of the default format.
 */
function gofast_taxonomy_get_default_term_format() {
  $entities = (new EntityFieldQuery())
          ->entityCondition('entity_type', 'taxonomy_term')
          ->fieldCondition('field_extensions', 'value', ";default;", '=')
          ->execute();

  return isset($entities['taxonomy_term']) ? reset((array_keys($entities['taxonomy_term']))) : NULL;
}

function gofast_taxonomy_taxonomy_vocabulary_insert($vocabulary) {
  if ($vocabulary->machine_name == 'skills' || $vocabulary->machine_name == 'hobbies' || $vocabulary->machine_name == 'interests' || $vocabulary->machine_name == 'category' || $vocabulary->machine_name == 'format' || $vocabulary->machine_name == 'tags' || $vocabulary->machine_name == 'state' || $vocabulary->machine_name == 'criticity' || $vocabulary->machine_name == 'classification') {
    //on stock dans une variable l'id de ce vocabulaire (car cet id est susceptible de changer selon les environements)
    variable_set("gofast_vocabulary_" . $vocabulary->machine_name, $vocabulary->vid);
  }
}

/**
 * Implements hook_menu()
 */
function gofast_taxonomy_menu() {
  $items = array();

  $items['taxonomy/vocabulary/%'] = array(
    'title' => 'Get taxonomy vocabulary',
    'description' => 'Returns the terms of the given taxonomy vocabulary',
    'page callback' => 'taxonomy_vocabulary_get',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );
  $items['taxonomy/vocabulary/%/addTerm/%'] = array(
    'title' => 'Add new term to taxonomy vocabulary',
    'description' => 'Adds a new term for the given taxonomy vocabulary',
    'page callback' => 'taxonomy_vocabulary_set',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );
  $items['taxonomy/tags_autocomplete'] = array(
    'page callback' => 'gofast_taxonomy_tag_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['taxonomy/manage_locations/process'] = array(
    'page callback' => 'gofast_taxonomy_manage_locations_process',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['taxonomy/manage_folders_locations/process'] = array(
    'page callback' => 'gofast_taxonomy_manage_folders_locations_process',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['taxonomy/manage_folders_locations/sync_permissions'] = array(
    'page callback' => 'gofast_taxonomy_manage_folders_sync_permissions',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['taxonomy/add_locations/process'] = array(
    'page callback' => 'gofast_taxonomy_add_locations_process',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['taxonomy/manage_taxonomy/process'] = array(
    'page callback' => 'gofast_taxonomy_manage_taxonomy_process',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['modal/%ctools_js/taxonomy/tags/config'] = array(
    'page callback' => 'gofast_taxonomy_modal_tags_config',
    'access callback' => 'user_access',
    'page arguments' => array(1),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['taxonomy/%/tag/%taxonomy_term/edit'] = array(
    'page callback' => 'gofast_taxonomy_tag_edit',
    'access callback' => 'user_access',
    'page arguments' => array(1, 3),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['modal/%ctools_js/taxonomy/tags/case/edit'] = array(
    'page callback' => 'gofast_taxonomy_modal_tags_case_edit',
    'access callback' => 'user_access',
    'page arguments' => array(1),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function gofast_taxonomy_tag_edit($js = FALSE, $term = new stdClass()) {
  $new_name = gofast_xss_clean($_POST["name"]);
  $term->name = $new_name;
  taxonomy_term_save($term);
  if ($js) {
    drupal_json_output($term);
    exit();
  }
  return $term;
}

/**
 * Helper to programatically add a term to an existing vocabulary.
 * @param type $vid
 * @param type $name
 */
function gofast_taxonomy_vocabulary_add_term($vid, $name) {
  // IF TERM IS NOT FOUND : taxonomy_term_load_multiple(array(), array('name' => trim($name), 'vid' => $vid));
  $term = new stdClass();
  $term->name = $name;
  $term->vid = $vid;
  taxonomy_term_save($term);
  return $term;
}

/**
 * Implements hook_theme()
 */
function gofast_taxonomy_theme() {
  return array(
    'node_format' => array(
      'variables' => array(
        'node' => NULL,
        'icon_size' => NULL
      )
    ),
    'gofast_taxonomy_add_location_progression' => array(
      'template'  => 'tpl/add-location-progression',
    ),
    'gofast_taxonomy_manage_location_progression' => array(
      'template'  => 'tpl/manage-location-progression',
    ),
    'gofast_taxonomy_manage_folders_location_progression' => array(
      'template'  => 'tpl/manage-folders-location-progression',
    ),
    'gofast_taxonomy_manage_taxonomy_progression' => array(
      'template'  => 'tpl/manage-taxonomy-progression',
    ),
    'gofast_progress_bar' => array(
      'template'  => 'tpl/progress-bar',
    ),
  );
}

/**
 * Returns HTML for a node format icon.
 *
 * @param $variables
 *   An associative array containing:
 *   - node: A node object.
 *   - icon_size [optional]: image size of the format icon, defaults to 24.
 *
 * @ingroup themeable
 */
function theme_node_format($variables) {
  $node = $variables['node'];
  $size = in_array($variables['icon_size'], array(24, 32, 48)) ? $variables['icon_size'] : 24;

  $format_tid = isset($node->field_format[LANGUAGE_NONE][0]['tid']) ?
          $node->field_format[LANGUAGE_NONE][0]['tid'] : gofast_taxonomy_get_default_term_format();

  $format = taxonomy_term_load($format_tid);

  $path = drupal_get_path('module', 'gofast_taxonomy') . '/icons/' . $size;
  $icon = isset($format->field_icone[LANGUAGE_NONE][0]['value']) ?
          $format->field_icone[LANGUAGE_NONE][0]['value']: gofast_taxonomy_icon_filename($format_tid);

  return theme('image', array('path' => "{$path}/{$icon}", 'alt' => $format->name, 'title' => $format->description, 'width' => $size, 'height' => $size));
}

/**
 * Helper function that returns TRUE if the given $node is an email content.
 */
function gofast_node_is_email($node) {
  list ($term_mail,) = array_values(taxonomy_get_term_by_name('email', 'format'));
  return isset($node->field_format[LANGUAGE_NONE][0]['tid']) && $node->field_format[LANGUAGE_NONE][0]['tid'] === $term_mail->tid;
}

/**
 * Helper that returns the file extension associated with a given entity. Bundle
 * 'alfresco_item' is extracted extension from its filename field, other
 * bundles have the extension associated with their attached format field.
 * @param $entity
 *  A fully loaded drupal entity object.
 * @return string
 *  The matched extension, or an empty string if no extension was found.
 */
function gofast_node_extension($entity) {
  // Get the extension from filename when possible.
  if (isset($entity->field_filename[LANGUAGE_NONE][0]['value'])) {
    return extract_file_extension($entity->field_filename[LANGUAGE_NONE][0]['value']);
  }
  else {
    // Load 'format' taxonomy term and retrieve file types/ext. associations.
    $format = isset($entity->field_format[LANGUAGE_NONE][0]['tid']) ? taxonomy_term_load($entity->field_format[LANGUAGE_NONE][0]['tid']) : NULL;
    if (isset($format->field_extensions[LANGUAGE_NONE][0]['value'])) {
      list(, $ext) = explode(';', $format->field_extensions[LANGUAGE_NONE][0]['value']);
      return $ext;
    }
  }
  return '';
}

/**
 * This form allow to set some metadata of selected items from ITHit.
 * @param type $form
 * @param array $form_state
 * @return type
 */
function gofast_taxonomy_manage_taxonomy_form($form, &$form_state) {

  $selected_items_json = array();
  global $user;
  if(variable_get("ithit_bulk_".$user->uid, NULL)){
      $selected_items_json = json_decode(rawurldecode(variable_get("ithit_bulk_".$user->uid, NULL)));
      variable_del("ithit_bulk_".$user->uid);
  }

  //Add the functionnality in the cart
  if(variable_get("ithit_bulk_cart_".$user->uid, NULL)){

      //Get all nid node in the cart
      $selected_items_json = json_decode(rawurldecode(variable_get("ithit_bulk_cart_".$user->uid, NULL)));
      $nid_cart = array();
      $nodes_cart = array();
      $title_cart = array();
      // Reach all nid and transform it to a path (available with folders)
      foreach($selected_items_json as $select){
          $node = node_load($select->url);
          $nodes_cart[$node->nid] = $node;
          // We need only one location in order to have a 1:1 nid:path mapping
          $path = gofast_og_get_first_available_space_location($node);
          array_push($nid_cart, $path.'/'.$node->title);
          array_push($title_cart, $node->title);
      }
      foreach($nid_cart as $key=>$path_cart){
          $selected_items_json[$key]->url = '/alfresco/webdav' . $path_cart;
      }
      variable_del("ithit_bulk_cart_".$user->uid);
  }
  
  if (module_exists("gofast_naming_rules")) {
    $message = html_entity_decode(t(htmlentities("The selected category has the following naming rule: <rule></rule>"), [], ["context" => "gofast:gofast_naming_rules"]));    $callback = "Gofast.namingRules.events.toggleWarningOnSelect";
    $form["gofast_naming_rules_warning"] = array(
      "#type" => "markup",
      "#markup" => theme("gofast_naming_rules_warning", ["message" => $message, "callback" => $callback, "selector" => ".modal select[id^='edit-category']"]),
    );
  }

  $attributes_keywords = [
        'class' => ['form-control-tags js-tagify'],
        'data-enforce' => '', //  Comment : Do not allow putting data that dose not exist | Decomment : allow putting data that dose not exist
        //'data-user' => '', // show ac users
        //'data-node' => '', // show ac node
        //'data-userlist' => '', // show ac userlist
        'data-taxonomy_term' => '', // show ac taxonomy term
        'data-vid' => GOFAST_VID_TAGS
      ];

  $keywords = array(
    '#title' => t('Labels', array(), array('context' => 'gofast')),
    '#type' => 'textfield',
    '#prefix' => '<div class="col-md-9">',
    '#suffix' => '</div>',
    '#default_value' => '',
    '#maxlength' => '', // no maxlength
    //'#autocomplete_path' => 'taxonomy/tags_autocomplete',
    '#attributes' => $attributes_keywords,
    '#name' => 'ac-list-tags-field-keywords'
  );

  $field_date = array(
    '#title' => t('Deadline', array(), array('context' => 'gofast')),
    '#type' => 'textfield',
    '#prefix' => '<div class="col">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'class' => array('gofastDatepicker'),
      'data-toggle' => array('datepicker')
    ),
  );

  $allowed_taxonomy_state = taxonomy_allowed_values(field_info_field('field_state'));
  foreach ($allowed_taxonomy_state as $tid => $term){
    if($term == "Archived"){
        unset($allowed_taxonomy_state[$tid]);
    }
    $localized_term = i18n_taxonomy_localize_terms(taxonomy_term_load($tid));
    $allowed_taxonomy_state[$localized_term->tid] = $localized_term->name;
  }

  $state = array(
    '#title' => t('State', array(), array('context' => 'gofast')),
    '#type' => 'select',
    '#prefix' => '<div class="col">',
    '#suffix' => '</div>',
    '#options' => array(0 => t('No change', array(), array('context' => 'gofast')), -1 => t('None', array(), array('context' => 'gofast'))) + $allowed_taxonomy_state,
  );

  $categories_standard = array();
  $categories_custom = array();

  $terms = taxonomy_term_load_multiple(FALSE, array('vid' => GOFAST_VID_CATEGORY));

  //sort form table
    usort($terms, function ($a, $b) {
      return (i18n_taxonomy_localize_terms($a)->name < i18n_taxonomy_localize_terms($b)->name) ? -1 : 1;
    });

  foreach ($terms as $term) {

    $allowed_term = gofast_taxonomy_category_allowed($term, $nodes_cart);

    if($allowed_term) {
      $localized_term = i18n_taxonomy_localize_terms($term);
      if($term->field_standard_gf[LANGUAGE_NONE][0]['value'] == 1){
        $categories_standard[$localized_term->tid] = $localized_term->name;
      }else{
        $categories_custom[$localized_term->tid] = $localized_term->name;
      }
    }
  }

  $categories[t('Standard', array(), array('context' => 'gofast'))] = $categories_standard;
  $categories[t("@site_name's categories", array('@site_name' => variable_get('site_name') ), array('context' => 'gofast'))] = $categories_custom;

  $category = array(
    '#title' => t('Category', array(), array('context' => 'gofast')),
    '#type' => 'select',
    '#prefix' => '<div class="col">',
    '#suffix' => '</div>',
    '#options' => array(0 => t('No change', array(), array('context' => 'gofast')), -1 => t('None', array(), array('context' => 'gofast'))) + $categories,
  );

  $language = array(
    '#title' => t('Language', array(), array('context' => 'gofast')),
    '#type' => 'select',
    '#prefix' => '<div class="col-md-3">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'style' => array('width: 100%;')
    ),
    '#options' => array(0 => t('No change', array(), array('context' => 'gofast'))) + array_merge(array(LANGUAGE_NONE => t("Language neutral")), locale_language_list('name', TRUE)),
  );

  $allowed_taxonomy_state = taxonomy_allowed_values(field_info_field('field_criticity'));
  foreach ($allowed_taxonomy_state as $tid => $term){
    $localized_term = i18n_taxonomy_localize_terms(taxonomy_term_load($tid));
    $allowed_taxonomy_state[$localized_term->tid] = $localized_term->name;
  }

  $criticity = array(
    '#title' => t('Criticity', array(), array('context' => 'gofast')),
    '#prefix' => '<div class="col">',
    '#suffix' => '</div>',
    '#type' => 'select',
    '#options' => array(0 => t('No change', array(), array('context' => 'gofast')), -1 => t('None', array(), array('context' => 'gofast'))) + $allowed_taxonomy_state,
  );

  $allowed_taxonomy_classification = taxonomy_allowed_values(field_info_field('field_classification'));
  foreach ($allowed_taxonomy_classification as $tid => $term){
    $localized_term = i18n_taxonomy_localize_terms(taxonomy_term_load($tid));
    $allowed_taxonomy_classification[$localized_term->tid] = $localized_term->name;
  }
  $classification = array(
    "#title" => t("Classification", array(), array("context" => "gofast")),
    "#prefix" => '<div class="col">',
    "#suffix" => '</div>',
    "#type" => 'select',
    "#options" => array(0 => t('No change', array(), array('context' => 'gofast')), -1 => t('None', array(), array('context' => 'gofast'))) + $allowed_taxonomy_classification,
  );

  $form['first_row'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('row', 'row-cols-5'),
    ),
    'category'=> $category,
    'classification' => $classification,
    'criticity' => $criticity,
    'state' => $state,
    'field_date' => $field_date,
  );
  
  $form['second_row'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('row'),
    ),
    'keywords' => $keywords,
    'language' => $language,
  );

  // Sorting the items received in parameter (Folders first, then Resource)
  usort($selected_items_json, function($a, $b) {
    return $a->type > $b->type;
  });

  $items_by_type = array();
  foreach ($selected_items_json as $selected_item_type) {
    $items_by_type[$selected_item_type->type][] = $selected_item_type->url;
  }

  $form_state['selected_item_by_type'] = $items_by_type;
  $form['selected_item_by_type'] = array(
      '#type' => 'textfield',
      '#maxlength' => "99999",
      '#default_value' => json_encode($items_by_type),
    );
  $form['selected_item_by_type']['#attributes']['class'][] = "gofast_display_none";

  $rendered_items = '<h2>' . t('Folders and documents concerned by this modification:', array(), array('context' => 'gofast:gofast_taxonomy')) . '</h2>';
  foreach ($items_by_type as $key => $items) {
    $rendered_items .= '<ul><li>' .  str_replace("/_", "/", str_replace("/Sites", "", str_replace("/alfresco/webdav", "", implode('</li><li>', $items)))) . '</li></ul>';
  }

  $form['selected_items'] = array(
    '#markup' => $rendered_items,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Save", array(), array('context' => 'gofast')),
  );

  return $form;
}

/**
 * Hook form validate
 * Filling the selected keywords in the "keywords" form value.
 * @param type $form
 * @param array $form_state
 */
function gofast_taxonomy_manage_taxonomy_form_validate($form, &$form_state){

  $json_keyword_values = (array) json_decode($form_state['input']['ac-list-tags-field-keywords']);
  $keywords_mixed = array_map(function($element) {
    if(is_object($element)) {
      return $element->name;
    } else {
      return $element;
    }
  }, $json_keyword_values);

  $form_state['values']['keywords'] = implode(',', $keywords_mixed);
}

/**
 * Hook form submit (for manage_taxonomy_form)
 * @param type $form
 * @param type $form_state
 */
function gofast_taxonomy_manage_taxonomy_form_submit($form, &$form_state) {
  $updated_nids = array();
  //Insert a general progress bar for mass taxonomy
  $html = "";
  foreach (json_decode($form_state["values"]['selected_item_by_type']) as $type => $items_by_type) {
    if ($type === 'Folder') {
      foreach ($items_by_type as $item_path) {
        //Force replication of this content if it's not yet replicated
        $_GET['href'] = $item_path;
        gofast_cmis_replicate(FALSE);

        $alfresco_path = str_replace("/alfresco/webdav", "", $item_path);
        $folder_item = gofast_cmis_item_get_by_path($alfresco_path);
        $descendants = gofast_cmis_item_get_children($folder_item->id, FALSE, 'documents');
        foreach ($descendants as $descendants) {
          if (isset($descendants->nid)) {
            $selected_nids[$descendants->nid] = $descendants->path;
          }else{
            $selected_nids[rand(-9999999, -1)] = $descendants->path;
          }
        }
      }
    } else {
      foreach ($items_by_type as $item_path) {
        //Force replication of this content if it's not yet replicated
        $_GET['href'] = $item_path;
        gofast_cmis_replicate(FALSE);

        $alfresco_path = str_replace("/alfresco/webdav", "", $item_path);
        $item = gofast_cmis_item_get_by_path($alfresco_path);
        if(isset($item->id) && isset($item->properties['gofast:nid'])) {
                if($item->properties['gofast:nid'] == 0){
                  $selected_nids[rand(-9999999, -1)] = $alfresco_path;
                }else{
                  $selected_nids[$item->properties['gofast:nid']] = $alfresco_path;
                }
        }else if(isset($item->id) && isset($item->properties['alfcmis:nodeRef'])){
          $reference = $item->properties['alfcmis:nodeRef'];
          $nid = gofast_ajax_file_browser_get_nid_from_reference($reference);
          if(is_numeric($nid) && $nid > 0){
            $selected_nids[$nid] = $alfresco_path;
          }
        }
      }
    }
  }
  $updated_nids = array_keys($selected_nids);

 if(count($updated_nids) > 0){
    foreach($updated_nids as $nid) {
      $node = node_load($nid);
      $title = gofast_get_node_title($nid);
      if(empty($title)){
        $title = array_pop(explode("/",  urldecode($selected_nids[$nid])));
        $nid = NULL;
      }

      $keywords = explode(',', $form_state['values']['keywords']);
      if($keywords[0] == ""){
        unset($keywords[0]);
        $keywords = array_values($keywords);
      }
      $keywords_terms = gofast_xeditable_terms_get_from_array(GOFAST_VID_TAGS, $keywords);
      $new_keywords = array();
      $node_new_keywords = array();
      $node_keywords = array();
      $map_tid = function($element) {
        if (is_array($element)) {
          return $element['tid'];
        }
        else {
          return $element->tid;
        }
      };
      if(isset($node->{'field_tags'}[LANGUAGE_NONE])) {
        $node_keywords = $node->{'field_tags'}[LANGUAGE_NONE];
        $new_keywords = array_diff(array_map($map_tid, $keywords_terms), array_map($map_tid, $node_keywords));
      } else {
        $new_keywords = array_map($map_tid, $keywords_terms);
      }

      foreach($new_keywords as $new_keyword_tid) {
        $node_new_keywords[]['tid'] = $new_keyword_tid;
      }

      $merged_keywords = array_merge($node_keywords, $node_new_keywords);

      if(count($new_keywords) > 0) {
        $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_tags', 'value' => $merged_keywords, 'vid' => GOFAST_VID_TAGS));
      }

      if ($form_state['values']['language'] !== '0') {
        $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'language', 'value' => $form_state['values']['language']));
      }
      if($form_state['values']['category'] !== '0') {
        // If the value is -1 it means we want to reset the category
        if($form_state['values']['category'] === '-1') {
          $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_category', 'value' => "", 'vid' => GOFAST_VID_CATEGORY));
        } else {
          $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_category', 'value' => $form_state['values']['category'], 'vid' => GOFAST_VID_CATEGORY));
        }
      }
      if($form_state['values']['state'] !== '0') {
        // If the value is -1 it means we want to reset the state
        if($form_state['values']['state'] === '-1') {
          $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_state', 'value' => "", 'vid' => GOFAST_VID_STATE));
        } else {
          $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_state', 'value' => $form_state['values']['state'], 'vid' => GOFAST_VID_STATE));
        }
      }
      if($form_state['values']['criticity'] !== '0') {
        // If the value is -1 it means we want to reset the state
        if($form_state['values']['criticity'] === '-1') {
          $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_criticity', 'value' => "", 'vid' => GOFAST_VID_CRITICITY));
        } else {
          $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_criticity', 'value' => $form_state['values']['criticity'], 'vid' => GOFAST_VID_CRITICITY));
        }
      }
      if($form_state['values']['classification'] !== '0') {
        // If the value is -1 it means we want to reset the state
        if($form_state['values']['classification'] === '-1') {
          $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_classification', 'value' => "", 'vid' => GOFAST_VID_CLASSIFICATION));
        } else {
          $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_classification', 'value' => $form_state['values']['classification'], 'vid' => GOFAST_VID_CLASSIFICATION));
        }
      }
      if($form_state['values']['field_date'] !== '') $html .= theme('gofast_taxonomy_manage_taxonomy_progression', array('nid' => $nid, 'title' => $title, 'field' => 'field_date', 'value' => $form_state['values']['field_date']));
    }
    $commands = array();
    if($html === ""){
      $commands[] = gofast_command_toast_message(t("No metadata was added.", array(), array('context' => 'gofast')), "warning");
      $commands[] = ctools_modal_command_dismiss();
    }else{
      $html = '<div class="progress mb-4" id="locations-panels-progress"><div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0 / ' . count((array) json_decode($form_state["values"]['selected_item_by_type'])) . '</div></div>' . $html;
      $commands[] = ctools_modal_command_dismiss();
      $commands[] = ctools_modal_command_display(t("In progress", array(), array('context' => 'gofast:taxonomy')), $html);
      $commands[] = gofast_command_callback('Gofast.taxonomy_manage_taxonomy_process');
    }
    print ajax_render($commands);
    exit;
  }
}

/*
 * Process an item of the massive taxonomy management
 */
function gofast_taxonomy_manage_taxonomy_process(){
  $nid = $_POST['process_nid'];
  $vid = $_POST['process_vid'];
  $field = $_POST['process_field'];
  $value = $_POST['process_value'];
  $node = node_load($nid);

  //Make the change
  unset($_POST);
  //$_POST["value"] = $locations;
  $_POST["pk"] = $nid;
  $_POST["name"] = $field;

  switch($field){
    case 'language':
      $_POST["value"] = $value;
      gofast_update_node_field();
      $node = node_load($nid, NULL, TRUE);
      $return = $node->language;
      break;
    case 'field_tags':
      $tags = explode(",", $value);
      foreach($tags as $k => $tag){
        $tags[$k] = taxonomy_term_load($tag)->name;
      }
      $_POST["value"] = $tags;
      $_POST["vid"] = $vid;
      gofast_update_node_field();
      $node = node_load($nid, NULL, TRUE);
      $return = json_encode($node->field_tags[LANGUAGE_NONE]);
      break;
    case 'field_state':
      $_POST["value"] = taxonomy_term_load($value)->name;
      $_POST["vid"] = $vid;
      gofast_update_node_field();
      $node = node_load($nid, NULL, TRUE);
      $return = $node->field_state[LANGUAGE_NONE][0]['tid'];
      break;
    case 'field_category':
      $_POST["value"] = taxonomy_term_load($value)->name;
      $_POST["vid"] = $vid;
      gofast_update_node_field();
      $node = node_load($nid, NULL, TRUE);
      $return = $node->field_category[LANGUAGE_NONE][0]['tid'];
      break;
    case 'field_classification':
      $_POST["value"] = taxonomy_term_load($value)->name;
      $_POST["vid"] = $vid;
      gofast_update_node_field();
      $node = node_load($nid, NULL, TRUE);
      $return = $node->field_classification[LANGUAGE_NONE][0]['tid'];
      break;
    case 'field_criticity':
      $_POST["value"] = taxonomy_term_load($value)->name;
      $_POST["vid"] = $vid;
      gofast_update_node_field();
      $node = node_load($nid, NULL, TRUE);
      $return = $node->field_criticity[LANGUAGE_NONE][0]['tid'];
      break;
    case 'field_date':
      $_POST["value"] = $value;
      gofast_update_node_field();
      $node = node_load($nid, NULL, TRUE);
      $return = $node->field_date[LANGUAGE_NONE][0]['value'];
      break;
  }


  print($return);
  exit;
}

function gofast_taxonomy_ac_display_value($entity_type, $entity, $key, $value, $options) {
  switch ($entity_type) {
    case 'taxonomy_term':
      $metadata = '<span class="labelize-metadata gofast_display_none" '
              . 'data-type="' . $entity_type . '" '
              . 'data-name="' . $value . '" '
              . 'data-id="' . $key . '"/></snap>';
      $item = $metadata . $value;
      return $item;
  }
}

function gofast_taxonomy_tags_is_tag_standard($term) {
  if(is_numeric($term)) {
    $term = taxonomy_term_load($term);
  }
  return in_array(strtolower($term->name), ["template", "courrier", "publication", "no-coedition", "no-edition"]);
}

function gofast_taxonomy_tags_autocomplete($str) {
  $str = trim($str);
  if (empty($str)) {
    drupal_json_output();
  }

  $matches = array();
  $result = db_select('taxonomy_term_data', 't')
          ->fields('t')
          ->condition('vid', GOFAST_VID_TAGS)
          ->condition('name', '%' . db_like($str) . '%', 'LIKE')
          ->execute();

  foreach ($result as $row) {
    $matches[$row->name] = gofast_taxonomy_ac_display_value("taxonomy_term", NULL, $row, $row->name, array());
  }

  drupal_json_output($matches);
}

function gofast_taxonomy_tag_autocomplete($str) {
  $str = trim($str);

  if (empty($str) || strlen($str) < 2) {
    // This prevents returning irrelevant results, though it should be handled
    // clientside in order to avoid useless requests.
    drupal_json_output(array());
    exit;
  }

  $options_ac_tag = array(
    'bundle' => array('tags'),
    'format_value_callback' => 'gofast_ac_format_value'
  );

  $matches = gofast_ac_query($str, 'taxonomy_term', $options_ac_tag);

  // Highlighting string matches.
  foreach ($matches as $key => &$value) {
    $value = preg_replace(array('/[\n\r]+/', '/(<[^<>]*>)([^<>]*?)(' . preg_quote($str, '/') . ')/i'), array('', '$1$2<b>$3</b>'), $value);
  }

  drupal_json_output($matches);
  exit;
}

/**
 * This form allow to set some metadata of selected items from ITHit.
 * @param type $form
 * @param array $form_state
 * @return type
 */
function gofast_taxonomy_add_locations_form($form, &$form_state)
{
  global $user;
  $selected_items_json = array();
  if (variable_get("ithit_bulk_" . $user->uid, NULL)) {
    $selected_items_json = json_decode(rawurldecode(variable_get("ithit_bulk_" . $user->uid, NULL)));
    variable_del("ithit_bulk_" . $user->uid);
  }

  //Add the functionnality in the cart
  if (variable_get("ithit_bulk_cart_" . $user->uid, NULL)) {

    //Get all nid node in the cart
    $selected_items_json = json_decode(rawurldecode(variable_get("ithit_bulk_cart_" . $user->uid, NULL)));

    $nid_cart = array();
    $title_cart = array();
    // Reach all nid and transform it to a path (available with folders)

    foreach ($selected_items_json as $select) {
      $node = node_load($select->url);
      $path = $node->{GOFAST_CMIS_MAIN_LOCATION_FIELD}[LANGUAGE_NONE][0];
      array_push($nid_cart, $path['value'] . '/' . $node->title);
      array_push($title_cart, $node->title);
    }
    foreach ($nid_cart as $key => $path_cart) {
      $selected_items_json[$key]->url = '/alfresco/webdav' . $path_cart;
    }
    variable_del("ithit_bulk_cart_" . $user->uid);
  }

  // Sorting the items received in parameter (Folders first, then Resource)
  usort($selected_items_json, function ($a, $b) {
    return $a->type > $b->type;
  });

  $items_by_type = array();
  foreach ($selected_items_json as $selected_item_type) {
    $items_by_type[$selected_item_type->type][] = $selected_item_type->url;
  }

  $selected_nids = array();
  foreach ($items_by_type['Resource'] as $key => $item_path) {
    //Force replication of this content if it's not yet replicated
    $_GET['href'] = $item_path;
    gofast_cmis_replicate(FALSE);

    $alfresco_path = str_replace("/alfresco/webdav", "", $item_path);
    $item = gofast_cmis_item_get_by_path($alfresco_path);
    if (isset($item->id)) {
      if (isset($item->properties['gofast:nid'])) {
        if ($item->properties['gofast:nid'] == 0) {
          $selected_nids[rand(-9999999, -1)] = $alfresco_path;
        } else {
          $selected_nids[$item->properties['gofast:nid']] = $alfresco_path;
        }
      } else {
        if (gofast_ajax_file_browser_get_nid_from_reference($item->properties['alfcmis:nodeRef']) == 0) {
          $selected_nids[rand(-9999999, -1)] = $alfresco_path;
        } else {
          $selected_nids[gofast_ajax_file_browser_get_nid_from_reference($item->properties['alfcmis:nodeRef'])] = $alfresco_path;
        }
      }
    }
  }

  $form_state['selected_nids'] = array_keys($selected_nids);
  $form['selected_nids'] = array(
    '#type' => 'textfield',
    '#title' => t(''),
    '#default_value' => json_encode(array_keys($selected_nids)),
    '#maxlength' => "99999"
      );
    $form['selected_nids']['#attributes']['class'][] = "gofast_display_none";

    $all_og = array();
    $bundles = gofast_og_node_types();
    unset($bundles['private_space']);
  foreach (gofast_og_get_spaces_by_bundle(array_keys($bundles)) as $space_bundle) {
    $bundle_ogs = array_combine(array_keys($space_bundle), array_keys($space_bundle));
    $all_og += $bundle_ogs;
  }
  $private_space_nid = gofast_og_get_user_private_space()->nid;
  $all_og[$private_space_nid] = intval($private_space_nid);

  $form[GOFAST_OG_CONTENT_MEMBERSHIP_FIELD] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $all_og,
    '#attributes' => array("class" => array("gofast_display_none"))
  );


  $form['locations_checks'] = array(
    '#type' => 'item',
    '#title' => '',
    '#suffix' => "<div class='ui-locations-check' style='min-width:800px;margin-bottom:10px;'><i>" . t('You have not chosen locations to add...') . "</i></div>",
  );

  //Get root spaces
  $groups = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Groups");
  $organisations = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Organisations");
  $extranet = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Extranet");
  $public = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Public");
  $ztree = array(
    $groups => "/Sites/_Groups",
    $organisations => "/Sites/_Organisations",
    $extranet => "/Sites/_Extranet",
    $public => "/Sites/_Public",
  );

  $is_internal = isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Internal Distribution";
  $is_confidential = isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Confidential Data";

  $is_internal = false;
  $is_confidential = false;

  foreach (array_keys($selected_nids) as $nid) {
    $node = node_load($nid);
    if (isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Internal Distribution") {
      $is_internal = true;
    }
    if (isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Confidential Data") {
      $is_confidential = true;
    }
  }

  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#multiple'] = TRUE;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#title'] = t("Select locations where your selected documents will be added", array(), array('context' => 'gofast'));

  if ($is_internal && $is_confidential) {
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#description'] = '<p class="text-danger" role="alert">' .
    t("Extranets Spaces not available: document for Internal Distribution only (level of importance)", array(), array('context' => 'gofast'))
    . '</p>
     <p class="text-danger" role="alert">' .
    t("Public Spaces not available: confidential document (level of importance)", array(), array('context' => 'gofast'))
    . '</p>';
    $form[GOFAST_CMIS_LOCATIONS_FIELD]["#attributes"]["class"][] = "gofast_is_internal_document_form";
    $form[GOFAST_CMIS_LOCATIONS_FIELD]["#attributes"]["class"][] = "gofast_is_confidential_document_form";
  }elseif ($is_internal) {
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#description'] = '<p class="text-danger" role="alert">' . t("Extranets Spaces not available: document for Internal Distribution only (level of importance)", array(), array('context' => 'gofast')) . '</p>';
    $form[GOFAST_CMIS_LOCATIONS_FIELD]["#attributes"]["class"][] = "gofast_is_internal_document_form";
  } elseif ($is_confidential) {
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#description'] = '<p class="text-danger" role="alert">' . t("Public Spaces not available: confidential document (level of importance)", array(), array('context' => 'gofast')) . '</p>';
    $form[GOFAST_CMIS_LOCATIONS_FIELD]["#attributes"]["class"][] = "gofast_is_confidential_document_form";
  }

  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#required'] = FALSE;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#type'] = 'select';
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#options'] = $ztree;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#value'] = $ztree;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]["#attributes"]["class"][] = "gofast_display_none";

  if (gofast_user_is_broadcaster($user)) {
    $attributes = [
      'class' => [' form-control-tags js-tagify'],
      //'data-enforce'=>'', //  Comment : Do not allow putting data that dose not exist | Decomment : allow putting data that dose not exist
      'data-user' => '', // show ac users
      'data-node' => '', // show ac node
      //'data-userlist' => '', // show ac userlist
      // 'data-taxonomy_term' => '' // show ac taxonomy term
      'data-broadcast' => '', //Caution : Override all permissions to allow broadcasting
    ];

    $form['broadcast_og'] = array(
     '#title' => t("Broadcast : Share this document to a space you're not in"),
     '#type' => 'textfield',
     '#name' => 'ac-list-tags-broadcast',
     '#maxlength' => '', // no maxlength
     '#default_value' => '',
     '#prefix' => "<div style='clear:both;'>",
     '#suffix' => "</div>",
     '#description' => "<p class='text-muted'>" . t("Start typing the name of a space or a user"),
     '#attributes' => $attributes
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Save", array(), array('context' => 'gofast')),
  );

  variable_del("ithit_bulk_async_" . $user->uid);

  return $form;
}

/**
 * Hook form validate
 * Filling the selected keywords in the "keywords" form value.
 * @param type $form
 * @param array $form_state
 */
function gofast_taxonomy_add_locations_form_validate($form, &$form_state){
  $selected_locations = (array) $form_state['input']['field_emplacement'];
  $broadcast_values = $form_state['input']['ac-list-tags-broadcast'];
  $broadcast_array = (array) json_decode(trim($broadcast_values));

  if (count($selected_locations) == 0 && count($broadcast_array) == 0 && $broadcast_array[0] == "") {
    $commands = array();
    $commands[] = gofast_command_toast_message(t("You need to select at least 1 location", array(), array('context' => 'gofast')), "warning");
    print ajax_render($commands);
    exit;
  }

}

/**
 * Hook form submit (for manage_taxonomy_form)
 * @param type $form
 * @param type $form_state
 */
function gofast_taxonomy_add_locations_form_submit($form, &$form_state) {

  $broadcast_values = $form_state['input']['ac-list-tags-broadcast'];
  $broadcast_array = json_decode(trim($broadcast_values));
  if(count((array) $broadcast_array) > 0 && $broadcast_array[0] != ""){
	global $cmis_as_publisher;
	global $cmis_sudo_admin;
	$cmis_as_publisher = true;
	$cmis_sudo_admin = true;
	foreach($broadcast_array as $key => $broadcast_object){
    if($broadcast_object->type == "user"){
      $private_gid = gofast_og_get_user_private_space(user_load($broadcast_object->value), FALSE);
      $form_state['input']["og_group_content_ref"][] = array("target_id" => $private_gid, "field_mode" => "default");
      $form_state['input']["field_emplacement"][] = $private_gid;
    }else{
      $form_state['input']["og_group_content_ref"][] = array("target_id" => $broadcast_object->value, "field_mode" => "default");
      $form_state['input']["field_emplacement"][] = $broadcast_object->value;
    }
  }
    }

    $selected_locations = $form_state['input']['field_emplacement'];
    $selected_nids = json_decode($form['selected_nids']['#value'], true);
    $html = "";

    if(!empty($selected_nids)){
        $progress_bar = theme('gofast_progress_bar');
        $html .= $progress_bar;
	foreach($selected_nids as $nid) {
	    $title = gofast_get_node_title($nid);
	    if(empty($title)){
	      $title = array_pop(explode("/",  urldecode($_SESSION['selected_file_path'][$nid])));
	      $nid = NULL;
	    }
	    $html .= theme('gofast_taxonomy_add_location_progression', array('nid' => $nid, 'title' => $title, 'locations' => $selected_locations, "is_broadcast" => $cmis_as_publisher));
	}
    }

    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
    $commands[] = ctools_modal_command_display(t("In progress", array(), array('context' => 'gofast:taxonomy')), $html);
    $commands[] = gofast_command_callback('Gofast.taxonomy_add_locations_process');
    print ajax_render($commands);
    exit;
}

/*
 * Process an item of the massive location management
 */
function gofast_taxonomy_add_locations_process(){

    ## retrieve informations
    $nid = $_POST['process_nid'];
    $locations = json_decode($_POST['process_locations']);
    $is_broadcast = $_POST['broadcast'];
    ## treat broadcast
    if($is_broadcast == 1){
        global $cmis_as_publisher;
        global $cmis_sudo_admin;
        $cmis_as_publisher = true;
        $cmis_sudo_admin = true;
    }
    $node = node_load($nid);

    $parents_formatted = array();
    $parent = gofast_cmis_item_get_parent($node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value']);
    if(count($parent->objectList) > 0){
	foreach($parent->objectList as $myparent){
	    $parents_formatted[] = $myparent->properties["cmis:path"];
        }
    }

    $locations_paths = array_unique(array_merge($parents_formatted,$locations));

    ## update location of the node
    unset($_POST);
    $_POST["value"] = $locations_paths;
    $_POST["pk"] = $nid;
    $_POST["name"] = "field_emplacement";
    gofast_update_node_field();

    //Then, we retrieve once again the locations to check if everything is ok
    gofast_cmis_static_cache(node_load($nid, NULL, true)->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value'] . '_parents', TRUE);

    $parent_after = gofast_cmis_item_get_parent($node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value']);
    $parents_formatted_after = array();
    if(count($parent_after->objectList) > 0){
	foreach($parent_after->objectList as $myparent_after){
            if(in_array($myparent_after->properties["cmis:path"], $locations)){
                $parents_formatted_after[] = $myparent_after->properties["cmis:path"];
            }
	}
    }
    print(json_encode($parents_formatted_after));
    exit;
}
/**
 * This form allow to set some metadata of selected items from ITHit.
 * @param type $form
 * @param array $form_state
 * @return type
 */
function gofast_taxonomy_manage_locations_form($form, &$form_state) {
    global $user;

    $nid = $form_state['build_info']['args'][0];
    global $user;
    $node = node_load($nid);
    $form['#node'] = $node;
    $paths_target = array();
    $selected_items_json = array();

    if($node->type == "webform" || $node->type == "forum"){
        $locations_ids = $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE];
        $array_locations = array();
        foreach($locations_ids as $locations_id){
            $article_path = gofast_cmis_space_get_webdav_path($locations_id['target_id']);
            array_push($paths_target, $article_path . '/' . $node->title);
            $array_locations[$locations_id['target_id']] = $article_path;
        }
    }else{
        $paths = $node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE];
        foreach($paths as $path){
            array_push($paths_target, $path['value'] . '/' . $node->title);
        }
    }
    foreach($paths_target as $key=>$path_target){
      $selected_items_json[$key] = new stdClass();
      $selected_items_json[$key]->url = '/alfresco/webdav' . $path_target;
    }

  // Sorting the items received in parameter (Folders first, then Resource)
  usort($selected_items_json, function($a, $b) {
    return $a->type > $b->type;
  });

  $items_by_type = array();
  foreach ($selected_items_json as $selected_item_type) {
    $items_by_type[$selected_item_type->type][] = $selected_item_type->url;
  }

  $selected_nids = array();
  $selected_folders = array();
  foreach ($items_by_type as $type => $items) {
    if ($type === 'Folder') {
      ## in the case of a file, we locate the parents of it in order to pre-select them in the ztree
      foreach ($items as $item_path) {
        $alfresco_path = str_replace("/alfresco/webdav", "", $item_path);
        $folder_item = gofast_cmis_item_get_by_path($alfresco_path);
        $selected_folders[$folder_item->properties['alfcmis:nodeRef']] = gofast_og_get_group_id_from_title_2($folder_item->properties['cmis:path']);
        $parent_folder_item = gofast_cmis_item_get_object_parent($folder_item->properties['alfcmis:nodeRef']);
        $parent_is_folder = (empty($parent_folder_item->objectList[0]->properties['gofast:nid']) ? TRUE : FALSE);
        if ($parent_is_folder) {
          $parents_paths = gofast_cmis_get_all_paths_node_multifiled_by_folder($folder_item->properties['alfcmis:nodeRef']);
          foreach ($parents_paths as $parent_path) {
            $gid = null;
            while (!isset($gid) && !is_numeric($gid)) {
              $parent_path = $parent_path = explode('/', $parent_path);

              //Delete the last element of the path
              unset($parent_path[0]);
              array_pop($parent_path);
              $parent_path = '/' . implode("/", $parent_path);

              //We try to get the gid
              $parent_item = gofast_cmis_item_get_by_path($parent_path);
              $gid = $parent_item->properties['gofast:nid'];
            }
            $selected_folders_parents_gids[$gid] = $gid;
          }
        } else {
          $parents_ref = gofast_cmis_webservice_get_parents_folder_path($folder_item->properties['alfcmis:nodeRef']);
          foreach ($parents_ref as $key => $parent_ref) {
            $parent_nid = gofast_og_get_nid_from_folder_reference($parent_ref);
            $selected_folders_parents_gids[$parent_nid] = $parent_nid;
          }
        }
      }
      $form_state['selected_folders'] = array_keys($selected_folders);
      $form['selected_folders'] = array(
        '#type' => 'textfield',
        '#title' => t('Selected folders'),
        '#default_value' => json_encode(array_keys($selected_folders)),
        '#maxlength' => "99999",
        '#attributes' => array("class" => array("gofast_display_none"))
      );
    } else {
    foreach ($items as $item_path) {
      //Force replication of this content if it's not yet replicated
      if($node->type == "alfresco_item"){
        $_GET['href'] = $item_path;
        gofast_cmis_replicate(FALSE);
      }

      $alfresco_path = str_replace("/alfresco/webdav", "", $item_path);
      $item = gofast_cmis_item_get_by_path($alfresco_path);
      if (isset($item->id)) {
          if(isset($item->properties['gofast:nid'])){
              if($item->properties['gofast:nid'] == 0){
                $selected_nids[rand(-9999999, -1)] = $alfresco_path;
              }else{
                $selected_nids[$item->properties['gofast:nid']] = $alfresco_path;
              }
          }else{
              if(gofast_ajax_file_browser_get_nid_from_reference($item->properties['alfcmis:nodeRef']) == 0){
                $selected_nids[rand(-9999999, -1)] = $alfresco_path;
              }else{
                $selected_nids[gofast_ajax_file_browser_get_nid_from_reference($item->properties['alfcmis:nodeRef'])] = $alfresco_path;
              }
          }
      }else{
          $selected_nids = $array_locations;
      }
    }
  }
  }
  //used later into async request
  variable_set("ithit_bulk_async_".$user->uid, $nid);

  $form_state['selected_locations_ids'] = array_keys($selected_nids);
  $form['selected_locations_ids'] = array(
      '#type' => 'textfield',
      '#title' => '',
      '#default_value' => json_encode(array_keys($selected_nids)),
      '#maxlength' => "99999"
    );
  $form['selected_locations_ids']['#attributes']['class'][] = "gofast_display_none";

  $form['selected_nid'] = array(
      '#type' => 'textfield',
      '#title' => '',
      '#default_value' => $nid,
      '#maxlength' => "99999"
    );
  $form['selected_nid']['#attributes']['class'][] = "gofast_display_none";

  // if the node is an article, its ztree has radio buttons setting and so it has only one checked node at once
  // so we use the same ui-single-location class we use in the article form ztree to prevent JS-side accumulated display of previously checked nodes
  $locations_tag_classes = array("ui-locations-check");
  if($node->type == "article") {
    $locations_tag_classes[] = "ui-single-location";
  }

  $form['locations_checks'] = array(
	'#type' => 'item',
	'#title' => "",
	'#suffix' => "<div class='" . implode(" ", $locations_tag_classes) . "' style='min-width:800px;margin-bottom:10px;'><i>" . t('You did not choose locations ...') ."</i></div>",
  );

  $selected_spaces = array();
  $selected_locations = array();
  $map_id_locations = array();
  $disabled_locations = array();
  if($node->type == "webform" || $node->type == "forum"){
        $node_locations_paths = $array_locations;
        foreach($node_locations_paths as $node_location_path) {
          // For every location we retrieve the node id
          if(!isset($map_id_locations[$node_location_path])) {
            $item = gofast_cmis_item_get_by_path($node_location_path);
            $item_nid = $item->properties['gofast:nid'];
            if(isset($item_nid)) {
              $map_id_locations[$node_location_path] = $item_nid;
            } else {
              $map_id_locations[$node_location_path] = $node_location_path;
            }
            $paths_parts = explode('/', $node_location_path);
            while(count($paths_parts) > 3) {
              array_pop($paths_parts);
              $parent_path = implode("/", $paths_parts);
              if(!isset($map_id_locations[$parent_path])) {
                $item = gofast_cmis_item_get_by_path($parent_path);
                $item_nid = $item->properties['gofast:nid'];
                if(isset($item_nid)) {
                  $map_id_locations[$parent_path] = $item_nid;
                } else {
                  $map_id_locations[$parent_path] = $parent_path;
                }
            }
          }
        }
        $selected_locations[$map_id_locations[$node_location_path]] = $map_id_locations[$node_location_path];
      }
      $node_parents = gofast_og_get_parent($node);
      $selected_spaces = array_merge($selected_spaces, $node_parents);
      // For every parent we check the permission, disable check if not member
      foreach ($node_parents as $node_parent) {
        if (!node_access('view', node_load($node_parent))) {
          $disabled_locations[$node_parent] = gofast_cmis_space_get_webdav_path($node_parent);
        }
      }
    } else {
      foreach (node_load_multiple(array_keys($selected_nids)) as $node) {
        $node_locations_paths = gofast_cmis_webservice_get_node_parents($node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value']);
        foreach ($node_locations_paths as $node_location_path) {

          $gid = gofast_og_get_group_id_from_title_2($node_location_path, TRUE, TRUE);
          $selected_spaces[$gid] = $gid;

          $item = gofast_cmis_item_get_by_path($node_location_path);
          $nid = $item->properties['gofast:nid'];
          if(empty($nid)){
            $map_id_locations[$node_location_path] = $node_location_path;
            $selected_locations[$node_location_path] = $node_location_path;
          }else{
            $map_id_locations[$node_location_path] = $gid;
            $selected_locations[$node_location_path] = $gid;
          }
        }
        $node_parents = gofast_og_get_parent($node);
        $selected_spaces = array_unique(array_merge($selected_spaces, $node_parents));
        // For every parent we check the permission, disable check if not member
        foreach ($node_parents as $node_parent) {
          if (!node_access('view', node_load($node_parent))) {
            $disabled_locations[$node_parent] = gofast_cmis_space_get_webdav_path($node_parent);
          }
        }
      }
  }

  $selected_paths = array_flip($map_id_locations);

  $all_og = array();
  $bundles = gofast_og_node_types();
  unset($bundles['private_space']);
  foreach (gofast_og_get_spaces_by_bundle(array_keys($bundles)) as $space_bundle) {
    $bundle_ogs = array_combine(array_keys($space_bundle), array_keys($space_bundle));
    $all_og += $bundle_ogs;
  }
  $private_space_nid = gofast_og_get_user_private_space()->nid;
  $all_og[$private_space_nid] = intval($private_space_nid);

  $form[GOFAST_OG_CONTENT_MEMBERSHIP_FIELD] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $all_og,
    '#default_value' => $selected_spaces,
    '#attributes' => array("class" => array("gofast_display_none"))
  );

  $user_available_paths = gofast_ztree_get_paths();

  $all_paths = $user_available_paths + $selected_paths + $selected_locations;
  array_unique($all_paths);

  $is_internal = isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Internal distribution";
  $is_confidential = isset($node->field_criticity['und'][0]['tid']) && taxonomy_term_load($node->field_criticity['und'][0]['tid'])->name == "Confidential Data";

  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#multiple'] = ($node->type != "article"); // TRUE only if current node is not a wiki article
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#title'] = t("Select locations where your selected documents will be multi-filed", array(), array('context' => 'gofast'));
  if($is_internal){
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#description'] = '<p class="text-danger" role="alert">'.t("Extranets Spaces not available: document for Internal Distribution only (level of importance)", array(), array('context' => 'gofast')).'</p>';
  }elseif($is_confidential){
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#description'] = '<p class="text-danger" role="alert">' . t("Public Spaces not available: confidential document (level of importance)", array(), array('context' => 'gofast')) . '</p>';
  }
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#required'] = FALSE;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#type'] = 'select';
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#options'] = $all_paths;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#default_value'] = $selected_locations;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#value'] = $selected_locations;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#options_check_disabled'] = $disabled_locations;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]["#attributes"]["class"][] = "gofast_display_none";

  if ($node->type == "article") {
    $form[GOFAST_CMIS_LOCATIONS_FIELD]['#prefix'] = '<div class="font-weight-bolder">' . t("A wiki article can be shared in one unique location. Therefore, you can modify but not add a location.", array(), array("context" => "gofast:gofast_taxonomy")) . '</div>';
    $form['#ztree_options'] = array(
      "chkStyle" => "radio",
      "radioType" => "all",
    );
  } else {
    $form['#ztree_options'] = array(
      "chkStyle" => "checkbox",
    );
  }

  if(!empty($selected_nids)){
    $_SESSION['selected_file_path'] = $selected_nids;
  }

    if (gofast_user_is_broadcaster($user)) {
        $attributes = [
          'class' => [' form-control-tags js-tagify'],
          //'data-enforce'=>'', //  Comment : Do not allow putting data that dose not exist | Decomment : allow putting data that dose not exist
          'data-user' => '', // show ac users
          'data-node' => '', // show ac node
          //'data-userlist' => '', // show ac userlist
          // 'data-taxonomy_term' => '' // show ac taxonomy term
          'data-broadcast' => '', //Caution : Override all permissions to allow broadcasting
        ];

        $form['broadcast_og'] = array(
         '#title' => t("Broadcast : Share this document to a space you're not in"),
         '#type' => 'textfield',
         '#name' => 'ac-list-tags-broadcast',
         '#maxlength' => '', // no maxlength
         '#default_value' => '',
         '#prefix' => "<div style='clear:both;'>",
         '#suffix' => "</div>",
         '#description' => "<p class='text-muted'>" . t("Start typing the name of a space or a user"),
         '#attributes' => $attributes
        );
    }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Save", array(), array('context' => 'gofast')),
  );

  variable_del("ithit_bulk_async_".$user->uid);

  return $form;
}

/**
 * Hook form validate
 * Filling the selected keywords in the "keywords" form value.
 * @param type $form
 * @param array $form_state
 */
function gofast_taxonomy_manage_locations_form_validate($form, &$form_state){
  $node = $form['#node'];
  // if (isset($node->book['bid']))  {
  //   $commands = array();
  //   $commands[] = gofast_command_toast_message(t("Wiki articles can not be multifiled", array(), array('context' => 'gofast')), "warning");
  //   print ajax_render($commands);
  //   exit;
  // }
  $selected_locations = $form_state['input']['field_emplacement'];
  // if we handle a wiki article and only one location is selected, we still want an array to avoid breaking other validation lagic
  if (is_numeric($selected_locations)) {
    $selected_locations = array($selected_locations);
  }

  $broadcast_values = $form_state['input']['ac-list-tags-broadcast'];
  $broadcast_array = json_decode(trim($broadcast_values));

  if (count($selected_locations) == 0 && count($broadcast_array) == 0 && $broadcast_array[0] == "") {
    $commands = array();
    $commands[] = gofast_command_toast_message(t("You need to select at least 1 location", array(), array('context' => 'gofast')), "warning");
    print ajax_render($commands);
    exit;
  }

  //Disable the possibility to remove the location of the home space when the article is an homepage
  $node = node_load($form_state['input']['selected_nid']);
  $main_emplacement_id = gofast_cmis_item_get_by_path(str_replace("/Wikis", "", $node->{GOFAST_CMIS_MAIN_LOCATION_FIELD}[LANGUAGE_NONE][0]['value']));
  $is_homespace_removed = !(in_array($main_emplacement_id->{'properties'}['gofast:nid'], $selected_locations) || in_array($node->{GOFAST_CMIS_MAIN_LOCATION_FIELD}[LANGUAGE_NONE][0]['value'], $selected_locations));
  if($node->{'field_is_homepage'}[LANGUAGE_NONE][0]['value'] === "1" && $is_homespace_removed) {
      $commands = array();
      $commands[] = gofast_command_toast_message(t("You can't remove the location of the space where this Article is the homepage", array(), array('context' => 'gofast')), "warning");
      print ajax_render($commands);
      exit;
  }

  $form_state['selected_locations'] = $selected_locations;
}

/**
 * Hook form submit (for manage_taxonomy_form)
 * @param type $form
 * @param type $form_state
 */
function gofast_taxonomy_manage_locations_form_submit($form, &$form_state) {
    $broadcast_values = $form_state['input']['ac-list-tags-broadcast'];
    $broadcast_array = json_decode(trim($broadcast_values));
     if(isset($broadcast_array) && count($broadcast_array) > 0 && $broadcast_array[0] != ""){
         global $cmis_as_publisher;
         global $cmis_sudo_admin;
         $cmis_as_publisher = true;
         $cmis_sudo_admin = true;
         foreach($broadcast_array as $key => $broadcast_object){
           if($broadcast_object->type == "user"){
             $private_gid = gofast_og_get_user_private_space(user_load($broadcast_object->value), FALSE);
             $form_state['input']["og_group_content_ref"][] = array("target_id" => $private_gid, "field_mode" => "default");
             $form_state['input']["field_emplacement"][] = $private_gid;
           }else{
             $form_state['input']["og_group_content_ref"][] = array("target_id" => $broadcast_object->value, "field_mode" => "default");
             $form_state['input']["field_emplacement"][] = $broadcast_object->value;
           }
         }
     }
     if (!is_array($form_state['input']["field_emplacement"])) {
      $form_state['input']["field_emplacement"] = [$form_state['input']["field_emplacement"]];
     }
    $selected_locations = $form_state['selected_locations'] + $form_state['input']["field_emplacement"];
    if(!empty($form['selected_nid']['#value'])){
        $selected_nid = $form['selected_nid']['#value'];
        $html = "";

        $progress_bar = theme('gofast_progress_bar');
        $html .= $progress_bar;
        $title = gofast_get_node_title($selected_nid);
        $type = gofast_get_node_type($selected_nid, TRUE);
        if(empty($title)){
          $title = array_pop(explode("/",  urldecode($_SESSION['selected_file_path'][$selected_nid])));
          $nid = NULL;
        }
        $html .= theme('gofast_taxonomy_manage_location_progression', array('nid' => $selected_nid, 'title' => $title, 'type' => $type, 'locations' => $selected_locations, "is_broadcast" => $cmis_as_publisher));

        $commands = array();
        $commands[] = ctools_modal_command_dismiss();
        $commands[] = ctools_modal_command_display(t("In progress", array(), array('context' => 'gofast:taxonomy')), $html);
        $commands[] = gofast_command_callback('Gofast.taxonomy_manage_locations_process');
        print ajax_render($commands);
        exit;
    }else{
        $selected_nids = json_decode($form['selected_locations_ids']['#value'], true);
        $html = "";

        $progress_bar = theme('gofast_progress_bar');
        $html .= $progress_bar;
        foreach($selected_nids as $nid) {
          $title = gofast_get_node_title($nid);
          if(empty($title)){
            $title = array_pop(explode("/",  urldecode($_SESSION['selected_file_path'][$nid])));
            $nid = NULL;
          }
          $html .= theme('gofast_taxonomy_manage_location_progression', array('nid' => $nid, 'title' => $title, 'locations' => $selected_locations, "is_broadcast" => $cmis_as_publisher));
        }

        $commands = array();
        $commands[] = ctools_modal_command_dismiss();
        $commands[] = ctools_modal_command_display(t("In progress", array(), array('context' => 'gofast:taxonomy')), $html);
        $commands[] = gofast_command_callback('Gofast.taxonomy_manage_locations_process');
        print ajax_render($commands);
        exit;
    }
}

/*
 * Process an item of the massive location management
 */
function gofast_taxonomy_manage_locations_process(){

    ## retrieve informations
    $nid = $_POST['process_nid'];
    $locations = json_decode($_POST['process_locations']);
    $is_broadcast = $_POST['broadcast'];
    ## treat broadcast
    if($is_broadcast == 1){
      global $cmis_as_publisher;
      global $cmis_sudo_admin;
      $cmis_as_publisher = true;
      $cmis_sudo_admin = true;
    }
    $node = node_load($nid);
    //Move the node in the /Wikis folder if it's an article
    if($node->type == "article") {
        foreach($locations as &$value) {
            $value = (strpos($value, "/Wikis") === FALSE) ? $value . "/Wikis" : $value;
        }
    }
    ## WEBFORM / FORUM
    if($node->type == "webform" || $node->type == "forum"){
        foreach($locations as $location){
            ## for node we have access
            $item_nid = gofast_ajax_file_browser_get_nid_from_href($location);
            ## if we don't have access
            if(empty($item_nid)){
                ## get group id we don't have access to
                $gid = gofast_og_get_gid_from_webdav_path_without_cmis($location);
                ## if it's not a group
                if(empty($gid)){
                    ## get private space id
                    $is_private_space = str_replace("/Sites/_" , "", $location);
                    $account = user_load_by_name($is_private_space);
                    if(!empty($account)){
                        $private_gid = gofast_og_get_user_private_space($account, FALSE);
                        $locations_nid[] = $private_gid;
                    }
                }else{
                    $locations_nid[] = $gid;
                }
            }else{
                $locations_nid[] = $item_nid;
            }
        }
        #update location of the node
        unset($_POST);
        $_POST["value"] = $locations_nid;
        $_POST["pk"] = $nid;
        $_POST["name"] = "og_group_content_ref";
        gofast_update_node_field();
        $node = node_load($nid, NULL, true);

        ## get the emplacements of the node and return them
        $parents = $node->{GOFAST_OG_CONTENT_MEMBERSHIP_FIELD}[LANGUAGE_NONE];
        $parents_formatted = array();
        if(count($parents) > 0){
            foreach($parents as $myparent){
                $parents_formatted[] = gofast_cmis_space_get_webdav_path($myparent['target_id']);
            }
        }
    }else{
        ## update location of the node
        unset($_POST);
        $_POST["value"] = $locations;
        $_POST["pk"] = $nid;
        $_POST["name"] = "field_emplacement";
        gofast_update_node_field();

        //Then, we retrieve once again the locations to check if everything is ok
        gofast_cmis_static_cache(node_load($nid, NULL, true)->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value'] . '_parents', TRUE);

        ## get the emplacements of the node and return them
        $parents_formatted = array();
        $parents_formatted = gofast_cmis_webservice_get_node_parents($node->{GOFAST_CMIS_REFERENCE_FIELD}[LANGUAGE_NONE][0]['value']);
    }

    print(json_encode($parents_formatted));
    exit;
}

function gofast_taxonomy_manage_folder_locations_form($form, &$form_state){

  global $user;

  // Variables
  $map_id_locations = array();
  $selected_folders_parents_gids = array();
  $folder_path = "";

  $folder_path = $_GET['path'];
  $folder_path = str_replace("/alfresco/webdav", "", $folder_path);
  $folder_reference = gofast_ajax_file_browser_get_reference_from_href($folder_path);

  // Get parents folder
  $cmis_get_parents = gofast_cmis_webservice_get_node_parents($folder_reference);

  $parents_paths = array();
  foreach($cmis_get_parents as $parent_path){
    $parents_paths[$parent_path] = $parent_path;
  }

  // Reach parents
  foreach ($parents_paths as $key => $parent_path) {

    // If emplacement already set
    if(isset($map_id_locations[$parent_path])){
      continue;
    }

    // Get parent
    $item = gofast_cmis_item_get_by_path($parent_path);

    // Get parent type (folder or space)
    $item_nid = $item->properties['gofast:nid'];

    // In case of space(private space, orga,group,extranet or public)
    if(!empty($item_nid)){
      $map_id_locations[$parent_path] = $item_nid;
      $selected_folders_parents_gids[$item_nid] = $item_nid;
    }else{ // case of folder
      $parent_is_folder = TRUE;
      $map_id_locations[$parent_path] = $parent_path;
    }
  }

  $map_id_locations = array();
  if ($parent_is_folder) {
    foreach ($parents_paths as $parent_path) {
      $node_location_path = $parent_path;
      $gid = null;
      // For every location we retrieve the node id
      if (!isset($map_id_locations[$node_location_path])) {
        $item = gofast_cmis_item_get_by_path($node_location_path);
        $item_nid = $item->properties['gofast:nid'];
        if (isset($item_nid)) {
          $map_id_locations[$node_location_path] = $item_nid;
        } else {
          $map_id_locations[$node_location_path] = $node_location_path;
        }
        $paths_parts = explode('/', $node_location_path);
        array_pop($paths_parts);
        $folder_parent_path = implode("/", $paths_parts);
        if (!isset($map_id_locations[$folder_parent_path])) {
            $item = gofast_cmis_item_get_by_path($folder_parent_path);
            $item_nid = $item->properties['gofast:nid'];
            if (isset($item_nid)) {
              $map_id_locations[$folder_parent_path] = $item_nid;
            } else {
              $map_id_locations[$folder_parent_path] = $folder_parent_path;
          }
        }
      }
        $selected_locations[$map_id_locations[$node_location_path]] = $map_id_locations[$node_location_path];
        $parent_item = gofast_cmis_item_get_by_path($parent_path);
        if(empty($parent_item)){
            while (!isset($gid) && !is_numeric($gid)) {
            $parent_item = gofast_cmis_item_get_by_path($parent_path);

            $parent_path = $parent_path = explode('/', $parent_path);
            $parent_path = array_filter($parent_path);

              //Delete the last element of the path
            array_pop($parent_path);
            $parent_path = '/' . implode("/", $parent_path);

            //We try to get the gid
            $parent_item = gofast_cmis_item_get_by_path($parent_path);
            $gid = $parent_item->properties['gofast:nid'];
          }
        }else{
          $gid = $parent_item->properties['gofast:nid'];
        }
      $folders_parents_gids[gofast_cmis_space_get_webdav_path($gid)] = $gid;
      $selected_folders_parents_gids[$gid] = $gid;
    }
  } else {
    $parents_ref = gofast_cmis_webservice_get_parents_folder_path($folder_reference);

    foreach ($parents_ref as $key => $parent_ref) {
      $parent_ref = str_replace(array("\r", "\n"), '', $parent_ref);
      $parent_nid = gofast_cmis_item_get($parent_ref, TRUE)->properties['gofast:nid'];
      $folders_parents_gids[gofast_cmis_space_get_webdav_path($parent_nid)] = $parent_nid;
      $selected_folders_parents_gids[$parent_nid] = $parent_nid;
      $selected_locations[gofast_cmis_space_get_webdav_path($parent_nid)] = gofast_cmis_space_get_webdav_path($parent_nid);
    }
  }
  if (empty($map_id_locations)) {
    $selected_paths =  $selected_locations;
  } else {
    $selected_paths = array_flip($map_id_locations);
  }
  $all_og = array();
  $bundles = gofast_og_node_types();
  unset($bundles['private_space']);
  foreach (gofast_og_get_spaces_by_bundle(array_keys($bundles)) as $space_bundle) {
    $bundle_ogs = array_combine(array_keys($space_bundle), array_keys($space_bundle));
    $all_og += $bundle_ogs;
  }
  $private_space_nid = gofast_og_get_user_private_space()->nid;
  $all_og[$private_space_nid] = intval($private_space_nid);


  $form['selected_folder'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => $folder_reference,
    '#maxlength' => "99999"
  );
  $form['selected_folder']['#attributes']['class'][] = "gofast_display_none";

  $form['locations_checks'] = array(
    '#type' => 'item',
    '#suffix' => "<div class='ui-locations-check' style='min-width:800px;margin-bottom:10px;'><i>" . t('You did not choose locations ...') . "</i></div>",
  );

  $form[GOFAST_OG_CONTENT_MEMBERSHIP_FIELD] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $all_og,
    '#default_value' => $selected_folders_parents_gids,
    '#attributes' => array("class" => array("gofast_display_none"))
  );

  $user_available_paths = gofast_ztree_get_paths();
  $all_paths = $user_available_paths + $selected_paths + $selected_locations;
  array_unique($all_paths);

  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#multiple'] = TRUE;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#title'] = t("Select locations where your selected documents will be multi-filed", array(), array('context' => 'gofast'));
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#required'] = FALSE;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#type'] = 'select';
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#options'] = $all_paths;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#default_value'] = $selected_locations;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]['#value'] = $selected_locations;
  $form[GOFAST_CMIS_LOCATIONS_FIELD]["#attributes"]["class"][] = "gofast_display_none";

  if (gofast_user_is_broadcaster($user)) {
    $attributes = [
      'class' => [' form-control-tags js-tagify'],
      //'data-enforce'=>'', //  Comment : Do not allow putting data that dose not exist | Decomment : allow putting data that dose not exist
      'data-user' => '', // show ac users
      'data-node' => '', // show ac node
      //'data-userlist' => '', // show ac userlist
      // 'data-taxonomy_term' => '' // show ac taxonomy term
      'data-broadcast' => '', //Caution : Override all permissions to allow broadcasting
    ];

    $form['broadcast_og'] = array(
     '#title' => t("Broadcast : Share this document to a space you're not in"),
     '#type' => 'textfield',
     '#name' => 'ac-list-tags-broadcast',
     '#maxlength' => '', // no maxlength
     '#default_value' => '',
     '#prefix' => "<div style='clear:both;'>",
     '#suffix' => "</div>",
     '#description' => "<p class='text-muted'>" . t("Start typing the name of a space or a user"),
     '#attributes' => $attributes
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Save", array(), array('context' => 'gofast')),
  );

  return $form;

}


/**
 * Hook form validate
 * Filling the selected keywords in the "keywords" form value.
 * @param type $form
 * @param array $form_state
 */
function gofast_taxonomy_manage_folder_locations_form_validate($form, &$form_state)
{
  $selected_locations = $form_state['input']['field_emplacement'];
  $broadcast_values = $form_state['input']['ac-list-tags-broadcast'];
  $broadcast_array = json_decode(trim($broadcast_values));

  if (count($selected_locations) == 0 && count($broadcast_array) == 0 && $broadcast_array[0] == "") {
    $commands = array();
    $commands[] = gofast_command_toast_message(t("You need to select at least 1 location", array(), array('context' => 'gofast')), "warning");
    print ajax_render($commands);
    exit;
  }

  $form_state['selected_locations'] = $selected_locations;
}

/**
 * Hook form submit (for manage_taxonomy_form)
 * @param type $form
 * @param type $form_state
 */
function gofast_taxonomy_manage_folder_locations_form_submit($form, &$form_state)
{
  $html = "";
  $broadcast_values = $form_state['input']['ac-list-tags-broadcast'];
  $broadcast_array = json_decode(trim($broadcast_values));
  if(isset($broadcast_array) && count($broadcast_array) > 0 && $broadcast_array[0] != ""){
       global $cmis_as_publisher;
       global $cmis_sudo_admin;
       $cmis_as_publisher = true;
       $cmis_sudo_admin = true;
       foreach($broadcast_array as $key => $broadcast_object){
         if($broadcast_object->type == "user"){
           $private_gid = gofast_og_get_user_private_space(user_load($broadcast_object->value), FALSE);
           $form_state['input']["og_group_content_ref"][] = array("target_id" => $private_gid, "field_mode" => "default");
           $form_state['input']["field_emplacement"][] = $private_gid;
         }else{
           $form_state['input']["og_group_content_ref"][] = array("target_id" => $broadcast_object->value, "field_mode" => "default");
           $form_state['input']["field_emplacement"][] = $broadcast_object->value;
         }
       }
   }

  $selected_locations = $form_state['input']['field_emplacement'];
  $folder_reference = trim($form_state['values']['selected_folder']);
  $folder_item = gofast_cmis_item_get($folder_reference);
  $title = $folder_item->properties['cmis:name'];
  $html .= theme('gofast_taxonomy_manage_folders_location_progression', array('folder' => $folder_reference, 'title' => $title, 'locations' => $selected_locations, "is_broadcast" => $cmis_as_publisher));

  $commands = array();
  $commands[] = ctools_modal_command_dismiss();
  $commands[] = ctools_modal_command_display(t("In progress", array(), array('context' => 'gofast:taxonomy')), $html);
  $commands[] = gofast_command_callback('Gofast.taxonomy_manage_folders_locations_process');
  print ajax_render($commands);
  exit;
}

/*
 * Process an item of the massive location management
 */
function gofast_taxonomy_manage_folders_locations_process()
{
  $folder_ref = $_POST['process_folder'];
  $locations = json_decode($_POST['process_locations']);
  $is_broadcast = $_POST['broadcast'];


  ## manage location for a folder
  $folder_item = gofast_cmis_item_get($folder_ref);

  ## get all parents reference into an array
  $old_parents_ref = gofast_cmis_webservice_get_parents_folder_path($folder_ref);
  $old_parents_ref = array_map('trim', $old_parents_ref);

  ## get all parent reference
  $removed_locations = array();
  $added_locations = array();

  foreach ($locations as $key => $location){
    $reference = gofast_ajax_file_browser_get_reference_from_href($location, TRUE);
    $diff_reference[$location] = $reference;
  }

  $added_locations = array_diff($diff_reference, $old_parents_ref);
  ## we take care not removing added locations (e. g. when two mirrored folders are in the same location)
  $removed_locations = array_diff($old_parents_ref, $diff_reference, $added_locations);

  ## make a diff beetween old parents and new. If some are no longer in the new list then they are removed from the missing location
  if (!empty($removed_locations)) {
    foreach ($removed_locations as $key => $removed_location) {
      ## api to remove multifile a folder from a location
      gofast_cmis_webservice_remove_multifile_folder(trim($folder_ref), trim($removed_location));
    }
  }

  $children_folder_names = [];
  foreach($added_locations as $location => $added_location){
    $children_paths = array_values(gofast_cmis_webservice_item_get_descendants($added_location, "folders",true));
    $explored_mirrored_folder = [];
    foreach($children_paths as $children_path){
      $alreadyCheckedPath = false;
      $path_depth = array_search(basename($location),explode("/",$children_path));
      if(gofast_cmis_check_mirroring($children_path)){
        if(empty($explored_mirrored_folder)){
          // if not in the array, we add it
          if(!in_array($children_path, $explored_mirrored_folder)){
            $explored_mirrored_folder[] = $children_path;
          }
        } else{
          foreach($explored_mirrored_folder as $mirrored_path){
            if(str_contains($children_path, $mirrored_path)){
              $alreadyCheckedPath = true;
              break;
            }
            if(!in_array($children_path, $explored_mirrored_folder)){
              $explored_mirrored_folder[] = $children_path;
            }
          }

        }
        if(!$alreadyCheckedPath){
          $item = gofast_cmis_item_get_by_path($children_path);
          $children_folder_names[] = $item->properties['cmis:name'];
        }
      } else {
        $children_folder_names[] = explode("/",$children_path)[$path_depth+1];
      }
    }
  }



  ## call custom api to multifile the folder in all locations given
  //$descendants_folders_path = gofast_cmis_webservice_item_get_descendants($folder_ref, 'folders');
  $parents_formatted = [];
  foreach ($added_locations as $key => $added_location) {
    if($added_location != $site_reference){
      gofast_cmis_webservice_multifile_folder($folder_ref, $added_location);
      $folders_children = gofast_cmis_get_children($folder_item->properties['cmis:path'], 'folders');
      $array_locations = array_values($folders_children);
    }
    if(in_array($folder_item->properties['cmis:name'],$children_folder_names)){
      $parents_formatted[strval($key)] = "alreadyExist";
  }
  }
  ## get emplacements of the folder in order to assign folder permissions
  $folders = gofast_cmis_webservice_get_node_parents($folder_ref);
  foreach($folders as $folder){
    $parents_formatted[$folder] = "";
    
  }
  
  $parents_formatted_backup = $parents_formatted;
  $parents_formatted = gofast_cmis_webservice_get_node_parents($folder_ref);
  
  ## update locations of all node multifiled
  $descendants = gofast_cmis_webservice_item_get_descendants($folder_ref, 'documents');
  foreach ($descendants['nid'] as $nid) {
    if (is_numeric($nid)) {
      $node = node_load($nid);
      //Make the change
      unset($_POST);
      $_POST["value"] = $array_locations;
      $_POST["pk"] = $nid;
      $_POST["name"] = "field_emplacement";
      gofast_update_node_field();
    } else {
    }
  }
  foreach ($parents_formatted as $parent_formatted) {
    $node_parent_nid = gofast_og_get_group_id_from_title_2($parent_formatted, TRUE, TRUE);
    $node_parent = node_load($node_parent_nid);
    $space_dn = rawurlencode(gofast_ldap_space_cn($node_parent));
    if (gofast_og_is_user_private_space($node_parent)) {
      $private_space[] = $space_dn;
    }
    else {
      $groups[] = $space_dn;
    }
  }
  ## update permissions for all folders
  if (!empty($groups) || !empty($private_space)) {
    gofast_cmis_webservice_item_assign_permissions($folder_ref, $groups, $private_space);
  }

  print(json_encode($parents_formatted_backup));
  exit;
}


function gofast_taxonomy_manage_folders_sync_permissions(){
  $folder_ref = $_POST['folder'];

  // Get all parents locations of the folder
  $parents = gofast_cmis_webservice_get_node_parents($folder_ref);

  foreach ($parents as $parent) {
    $node_parent_nid = gofast_og_get_group_id_from_title_2($parent, TRUE, TRUE);
    $node_parent = node_load($node_parent_nid);
    $space_dn = rawurlencode(gofast_ldap_space_cn($node_parent));
    if (gofast_og_is_user_private_space($node_parent)) {
      $private_space[] = $space_dn;
    }
    else {
      $groups[] = $space_dn;
    }
  }
  // Reach all documents of the folder
  $descendants = gofast_cmis_webservice_item_get_descendants($folder_ref, 'documents', false, true);
  foreach ($descendants as $reference => $descendant) {

    // Assign new permissions
    gofast_cmis_webservice_item_assign_permissions($reference, $groups, $private_space);
  }

  return 'OK';

}

/*
 * Implements gofast_api_RESSOURCE_ACTION
 * @ressource taxobomy
 * @action terms
 * @methods GET
 */
function gofast_api_taxonomy_terms($params){
    switch($params['method']){
        case 'GET':
            gofast_api_get_taxonomy_terms($params);
            break;
        default:
            gofast_api_not_implemented("This method");
            break;
    }
}

function gofast_api_get_taxonomy_terms($params){
    //Check content type
    if(strpos($params['Content-Type'], "application/json") === FALSE){
        return gofast_api_not_implemented("This Content-Type");
    }

    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Check if we have a vocabulary_name param
    if(isset($params['vocabulary_name'])){
        $vname = $params['vocabulary_name'];
    }else{
        gofast_api_mandatory_parameter("vocabulary_name");
    }

    //Get vocabulary ID
    foreach(taxonomy_get_vocabularies() as $vocabulary){
        if($vocabulary->machine_name == $vname){
            $vid = $vocabulary->vid;
        }
    }

    //Check if we have a vid
    if(empty($vid)){
        gofast_api_not_found("Vocabulary " . $vname . " not found.");
    }

    //Load all terms related to this vocabulary
    $tree = taxonomy_get_tree($vid);

    //Prepare output
    $output = array();
    foreach($tree as $term){
        $output[$term->name] = array(
            'tid' => $term->tid,
            'description' => $term->description,
            'uuid' => $term->uuid
        );
    }

    gofast_api_success($output);
}

/*
 * Implements gofast_api_RESSOURCE_ACTION
 * @ressource taxobomy
 * @action vocabularies
 * @methods GET
 */
function gofast_api_taxonomy_vocabularies($params){
    switch($params['method']){
        case 'GET':
            gofast_api_get_taxonomy_vocabularies($params);
            break;
        default:
            gofast_api_not_implemented("This method");
            break;
    }
}

function gofast_api_get_taxonomy_vocabularies($params){
    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    //Get vocabularies and prepare output
    $output = array();
    foreach(taxonomy_get_vocabularies() as $vocabulary){
        $output[$vocabulary->machine_name] = array(
            'vid' => $vocabulary->vid,
            'display_name' => $vocabulary->name,
            'description' => $vocabulary->description,
        );
    }

    gofast_api_success($output);
}

/**
 * Add/remove automatic template tag to the given node when needed.
 */
function gofast_taxonomy_update_template_tag (&$node) {
  $tpl_tag = taxonomy_get_term_by_name('Template', 'tags');
  $tpl_tag = array_shift(array_values($tpl_tag));

  $is_tpl = FALSE;

  // Iterate locations and check for TEMPLATES in path.
  foreach ($node->{GOFAST_CMIS_LOCATIONS_FIELD}[LANGUAGE_NONE] as $location) {
    if (strpos($location['value'], TEMPLATES_FOLDER_NAME) !== FALSE) {
      $is_tpl = TRUE;
      break;
    }
  }

  // Check if tag is set
  foreach ($node->{'field_tags'}[LANGUAGE_NONE] as $key => $tag) {
    if ($tag['tid'] == $tpl_tag->tid) {
      $has_tpl_tag = TRUE;
    }
  }

  // Else add it if necessary.
  if ($is_tpl && !$has_tpl_tag) {
    $node->{'field_tags'}[LANGUAGE_NONE][]['tid'] = $tpl_tag->tid;
  }
}

function gofast_taxonomy_tags_uppercase_all_tags($restrict_to = []) {
  $terms = taxonomy_get_tree(GOFAST_VID_TAGS);
  $terms_name_to_tid_map = array();
  $terms_tid_to_duplicates_map = array();

  foreach ($terms as $term) {
    // don't handle untargeted tags if targets are specified
    if (!empty($restrict_to) && !in_array($term->tid, $restrict_to)) {
      continue;
    }
    $upper_name = strtoupper($term->name);
    // if the name is not to become a duplicated name after being uppercased, add it to the map
    if (!in_array($upper_name, array_keys($terms_name_to_tid_map))) {
      $terms_name_to_tid_map[$upper_name] = $term->tid;
    // else keep track of the future duplicates to merge them
    } else {
      // first met tid is also the oldest in the database
      $first_met_tid = $terms_name_to_tid_map[$upper_name];
      $terms_tid_to_duplicates_map[$first_met_tid][] = $term->tid;
    }

    if ($term->name == $upper_name) {
      continue;
    // update term name only if it's not already upper case
    } else {
      $term->name = $upper_name;
      taxonomy_term_save($term);
    }

    // clean duplicates up
    foreach($terms_tid_to_duplicates_map as $target_tid => $duplicated_tids) {
      gofast_admin_tags_set_nodes_tag($target_tid, $duplicated_tids);
      foreach($duplicated_tids as $duplicated_tid) {
        taxonomy_term_delete($duplicated_tid);
      }
    }
  }
}

function gofast_taxonomy_tags_config_form($form, &$form_state) {
  $form = array();
  $form['tags']['set_case_bs_switch'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force all added tags to be uppercased', array(), array('context' => 'gofast:gofast_taxonomy')),
    '#default_value' => variable_get("gofast_taxonomy_tags_force_case", 0),
    '#description' => "<div class='my-2 label label-light-danger label-pill label-inline label-xl'><i class='fas fa-warning'></i>&nbsp;" . t("WARNING: this change will be applied on ALL future tags on the platform", array(), array("context" => "gofast:gofast_taxonomy")) . "</&div>"
  );
  $form['tags']['convert_case_bs_switch'] = array(
    '#type' => 'checkbox',
    '#title' => t('Convert all existing tags as uppercase tags', array(), array('context' => 'gofast:gofast_taxonomy')),
    '#description' => "<div class='my-2 label label-light-danger label-pill label-inline label-xl'><i class='fas fa-warning'></i>&nbsp;" . t("WARNING: this change will be applied on ALL existing tags on the platform", array(), array("context" => "gofast:gofast_taxonomy")) . "</&div>"
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save', array(), array('context' => 'gofast')),
  );
  return $form;
}

function gofast_taxonomy_tags_config_form_validate($form, &$form_state) {
  global $user;

  if (!user_access("administer tags configuration", $user)) {
    form_set_error(t("You don't have the permission to rename tags", [], ["context" => "gofast:gofast_admin"]));
  }
}

function gofast_taxonomy_tags_config_form_submit($form, &$form_state) {
  gofast_taxonomy_tags_uppercase_all_tags([]);
  variable_set("gofast_taxonomy_tags_forced_cases", $form_state['values']['convert_case_bs_switch']);
  if ($form_state['values']['convert_case_bs_switch']) {
    drupal_set_message(t("Succesfully converted all tags to uppercase", array(), array('context' => 'gofast:gofast_taxonomy')), "status");
  }
  variable_set("gofast_taxonomy_tags_force_case", $form_state['values']['set_case_bs_switch']);
  if ($form_state['values']['set_case_bs_switch']) {
    drupal_set_message(t("Newly created tags will be automatically uppercased", array(), array('context' => 'gofast:gofast_taxonomy')), "status");
  }
  $form_state['redirect'] = 'admin/config/gofast/global#edit-tags';
}

function gofast_taxonomy_modal_tags_config($js) {
  drupal_get_messages();
  if (!$js) {
    return drupal_goto("admin/config/gofast/global");
  }
  ctools_include('modal');
  ctools_include('ajax');
  drupal_set_title(t("Tags configuration", [], ["context" => "gofast:gofast_metadata"]));
  $form_id = 'gofast_taxonomy_tags_config_form';
  $form_state = array(
    'modal' => TRUE,
    'ajax' => TRUE,
    're_render' => FALSE,
    'no_redirect' => TRUE,
  );

  $commands = ctools_modal_form_wrapper($form_id, $form_state);

  // Handle if submit with errors
  if (isset($commands[0])) {
    $commands[0]['output'] = gofast_normalize_string_from_ajaxifying($commands[0]['output']);
  }

  if ($form_state['executed']) {
    $commands[] = ctools_modal_command_dismiss();
    $commands = array_merge($commands, gofast_ajaxification_get_toast_messages());
  }
  if (empty($commands)) {
    $commands[] = ctools_modal_command_dismiss();
  }

  print ajax_render($commands);
}

function gofast_taxonomy_tags_case_edit_form($form, &$form_state) {
  $form = array();
  $terms_markup = "<h3> ". t("The following tags will be uppercased:", array(), array("context" => "gofast:gofast_taxonomy")) . "</h3>";
  $terms_markup .= "<ul>";
  foreach ($form_state["#selected_tags"] as $term) {
    $term = taxonomy_term_load($term);
    $terms_markup .= "<li>" . $term->name . "</li>";
  }
  $terms_markup .= "</ul>";
  $form["info"] = array(
    "#type" => "markup",
    "#markup" => $terms_markup,
  );

  gofast_modal_set_form_buttons($form);
  $form['#validate'] = ['gofast_taxonomy_tags_case_edit_form_validate'];
  $form['#submit'] = ['gofast_taxonomy_tags_case_edit_form_submit'];
  return $form;
}

function gofast_taxonomy_tags_case_edit_form_validate($form, &$form_state) {
  global $user;

  if (!user_access("administer tags configuration", $user)) {
    form_set_error(t("You don't have the permission to rename tags", [], ["context" => "gofast:gofast_admin"]));
  }
}

function gofast_taxonomy_tags_case_edit_form_submit($form, &$form_state) {
  gofast_taxonomy_tags_uppercase_all_tags($form_state["#selected_tags"] );
  drupal_set_message(t("Succesfully updated case for tags", array(), array('context' => 'gofast:gofast_taxonomy')), "status");
  $form_state['redirect'] = 'admin/config/gofast/global#edit-tags';
}

function gofast_taxonomy_modal_tags_case_edit($js, $selected = "") {
  drupal_get_messages();
  if (!$js) {
    return drupal_goto("admin/config/gofast/global");
  }
  ctools_include('modal');
  ctools_include('ajax');
  drupal_set_title( t("Capitalize tags", [], ["context" => "gofast:gofast_metadata"]));
  $form_id = 'gofast_taxonomy_tags_case_edit_form';
  $form_state = array(
    'modal' => TRUE,
    'ajax' => TRUE,
    're_render' => FALSE,
    'no_redirect' => TRUE,
  );

  if (!empty($selected)) {
    $form_state["#selected_tags"] = explode("-", $selected);
  }

  $commands = ctools_modal_form_wrapper($form_id, $form_state);

  // Handle if submit with errors
  if (isset($commands[0])) {
    $commands[0]['output'] = gofast_normalize_string_from_ajaxifying($commands[0]['output']);
  }

  if ($form_state['executed']) {
    $commands[] = ctools_modal_command_dismiss();
    $commands = array_merge($commands, gofast_ajaxification_get_toast_messages());
  }
  if (empty($commands)) {
    $commands[] = ctools_modal_command_dismiss();
  }

  print ajax_render($commands);
}

/**
 * Update pivot file used by Alfresco to get taxonomy translations.
 */
function gofast_taxonomy_write_alfresco_translation($term, $langcode, $translated_name) {
  // 1. Are we in a taxonomy where a pivot file exists?
  $file_prefix = "";
  if ($term->vid == GOFAST_VID_CATEGORY) {
    $file_prefix = "gofast_categories_";
  }
  if ($term->vid == GOFAST_VID_STATE) {
    $file_prefix = "gofast_states_";
  }
  if (!strlen($file_prefix)) {
    return;
  }

  // 2. Are we in a langcode where a pivot file exists?
  $file_path = "/etc/shared/gofast/{$file_prefix}{$langcode}.json";
  $file = fopen($file_path, "r+");
  if (!$file) {
    return;
  }

  // 3. Read and update the translations
  $json_content = fread($file, filesize($file_path));
  $translations = json_decode($json_content, TRUE);
  if ($translations === null) {
      fclose($file);
      return;
  }
  $translations[$term->name] = $translated_name;
  $new_json_content = json_encode($translations);
  fclose($file);
  // 4. Write new translations to the file
  $file = fopen($file_path, "w+");
  fwrite($file, $new_json_content);
  fclose($file);
}

/**
 * Programmatically add/update translation of a taxonomy term regardless of its uuid
 */
function gofast_taxonomy_add_translation_by_term_name($term_name, $langcode, $translated_name, $translated_description = FALSE) {
  if (is_numeric($term_name)) {
    $term = taxonomy_term_load($term_name);
  } else {
    $term = taxonomy_get_term_by_name($term_name);
    $term = reset($term);
  }
  if (!$term) {
    return;
  }
  gofast_taxonomy_write_alfresco_translation($term, $langcode, $translated_name);

  $translatables = ["name" => "taxonomy:term:" . $term->uuid . ":name", "description" => "taxonomy:term;" . $term->uuid . ":description"]; // name and description
  if (!$translated_description) {
    unset($translatables["description"]);
  }
  foreach($translatables as $key => $translatable) {
      $lid = i18n_string_get_string($translatable)->lid;

      // insert translatable string as such if it's not already a translatable string
      if (!$lid) {
        db_insert("locales_source")->fields(array("location", "textgroup", "source", "context", "version"))->values(array(
          "location" => $translatable,
          "textgroup" => "taxonomy",
          "source" => $term->{$key},
          "context" => "",
          "version" => 1,
        ))->execute();
        $lid = i18n_string_get_string($translatable)->lid;
      }
      $translation = $key == "name" ? $translated_name : $translated_description;
      $already_translated = db_select("locales_target", "lt")
        ->fields("lt", array("lid"))
        ->condition("lid", $lid)
        ->condition("language", $langcode)
        ->execute()
        ->fetchField();

      // if already translated, update translation, else update it
      if ($already_translated) {
        db_query("UPDATE {locales_target} SET translation = :translation WHERE lid = :lid AND language = :langcode", array(':translation' => $translation, ':lid' => $lid, ':langcode' => $langcode));
        continue;
      }
      db_insert("locales_target")
        ->fields(array(
          'lid' => $lid,
          'language' => $langcode,
          'translation' => $translation,
        ))
        ->execute();
  }
}

function gofast_taxonomy_categories_is_category_standard($term) {
  if(is_numeric($term)) {
    $term = taxonomy_term_load($term);
  }
  return (isset($term->field_standard_gf[LANGUAGE_NONE][0]['value']) && $term->field_standard_gf[LANGUAGE_NONE][0]['value'] == 1);
}

function gofast_taxonomy_categories_is_category_allowed_in_node($tid, $nid) {
  $is_allowed_in_all_spaces = gofast_taxonomy_categories_is_category_allowed_in_all_spaces($tid);
  if ($is_allowed_in_all_spaces) {
    return TRUE;
  }
  $gids = db_select("og_membership", "ogm")
    ->fields("ogm", array("gid"))
    ->condition('field_name', GOFAST_OG_CONTENT_MEMBERSHIP_FIELD)
    ->condition('entity_type', 'node')
    ->condition('etid', $nid)
    ->execute()->fetchCol();
  foreach ($gids as $gid) {
    $allowed = gofast_taxonomy_categories_is_category_allowed_in_space($tid, $gid);
    if ($allowed) {
      return TRUE;
    }
  }
  return FALSE;
}

function gofast_taxonomy_categories_is_category_allowed_in_space($tid, $gid, $include_parents_spaces =  TRUE) {
  $gids = [$gid];
  if ($include_parents_spaces) {
    $parents_gids = gofast_og_get_children($gid, TRUE, FALSE, TRUE, TRUE);
    $gids = array_merge($gids, $parents_gids);
  }
  $tid_ogm_count = db_select("og_membership")
    ->condition('field_name', GOFAST_TAXONOMY_CATEGORY_MEMBERSHIP_FIELD)
    ->condition('entity_type', 'taxonomy_term')
    ->condition('etid', $tid)
    ->condition('gid', $gids, 'IN')
    ->countQuery()->execute()->fetchField();
  return $tid_ogm_count > 0;
}

function gofast_taxonomy_categories_is_category_allowed_in_all_spaces($tid) {
  $tid_ogm_count = db_select("og_membership")
    ->condition('field_name', GOFAST_TAXONOMY_CATEGORY_MEMBERSHIP_FIELD)
    ->condition('entity_type', 'taxonomy_term')
    ->condition('etid', $tid)
    ->countQuery()->execute()->fetchField();
  return $tid_ogm_count == 0;
}

function gofast_taxonomy_categories_restrict_categories_to_spaces($tids, $gids, $include_subspaces = FALSE) {
  if (is_numeric($tids)) {
    $tids = [$tids];
  }
  if (is_numeric($gids)) {
    $gids = [$gids];
  }
  // reset memberships before setting them again with new values
  gofast_taxonomy_categories_delete_all_spaces_memberships($tids);
  foreach($gids as $gid) {
    $children_gids = [];
    if ($include_subspaces) {
      $children_gids = gofast_og_get_children($gids, TRUE, FALSE, TRUE);
    }
    foreach ($tids as $tid) {
      $tid_ogm = og_membership_create("node", $gid, "taxonomy_term", $tid, GOFAST_TAXONOMY_CATEGORY_MEMBERSHIP_FIELD, array());
      $tid_ogm->state = 1;
      $tid_ogm->save();
      foreach ($children_gids as $child_gid) {
        $tid_ogm = og_membership_create("node", $child_gid, "taxonomy_term", $tid, GOFAST_TAXONOMY_CATEGORY_MEMBERSHIP_FIELD, array());
        $tid_ogm->state = 1;
        $tid_ogm->save();
      }
    }
  }
}

/** deleting all memberships equates making the category available in all spaces */
function gofast_taxonomy_categories_delete_all_spaces_memberships($tids) {
  if (is_numeric($tids)) {
    $tids = [$tids];
  }
  db_delete("og_membership")
    ->condition('field_name', GOFAST_TAXONOMY_CATEGORY_MEMBERSHIP_FIELD)
    ->condition('entity_type', 'taxonomy_term')
    ->condition('etid', $tids, 'IN')
    ->execute();
}

function gofast_taxonomy_has_node_category_criticity($nid) {
  return FALSE;
  $query = db_select("field_data_field_category_criticity", "cc")
    ->fields("cc", array("field_category_criticity_tid"));
  $query->leftJoin("field_data_field_category", "fc", "fc.field_category_tid = cc.entity_id");
  $query->condition("fc.entity_id", $nid);
  $locked_criticity = $query->execute()->fetchCol();
  return count($locked_criticity) > 0;
}

/** only returns tid, recommended when better performances are needed and full term is not needed */
function gofast_taxonomy_get_tid_by_vid_and_name($vid, $term_name = "", $multiple = FALSE) {
  $query = db_select("taxonomy_term_data", "t")
    ->fields("t", array("tid"));
  if (!empty($term_name)) {
    $query->condition("t.name", $term_name);
  }
  $query->condition("t.vid", $vid);
  $result = $query->execute()->fetchCol();
  if (!$multiple) {
    $result = $result[0] ?: FALSE;
  }
  return $result;
}
