<?php

function gofast_stats_menu() {
  $items = array();
  $items['gofast_stats/list_docs'] = array(
    'page callback' => 'gofast_stats_list_docs',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );
  $items['gofast_stats/dashboard'] = array(
    'page callback' => 'gofast_stats_dashboard_ui',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('access statistics'),
  );
  $items['gofast_stats/space_stats'] = array(
    'page callback' => 'gofast_stats_space_stats_genere_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );

  $items['gofast_stats/global_space_stats'] = array(
    'page callback' => 'gofast_stats_global_space_stats_genere_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );

  $items['gofast_stats/user_stats'] = array(
    'page callback' => 'gofast_stats_user_stats_genere_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );

  $items['gofast_stats/download/%'] = array(
    'page callback' => 'gofast_stats_retrieve_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );

   $items['gofast_stats/space_stats_async'] = array(
    'page callback' => 'gofast_stats_space_stats_async',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

 return $items;
}

function gofast_stats_space_stats_async(){
    global $base_url;
    $render = '
      <script type="text/javascript" src="'.$base_url.'/sites/all/modules/gofast/gofast_stats/js/apexcharts.js" ?>"></script>
      <script type="text/javascript" src="'.$base_url.'/sites/all/modules/gofast/gofast_stats/js/gofast_stats_space.js" ?>"></script>
     '.theme("gofast_stats_space_dashboard", ["gid" => gofast_xss_clean($_POST["currentGid"])]);

    print $render;
}

function gofast_stats_init(){
      drupal_add_js(drupal_get_path('module', 'gofast_stats') . "/js/gofast_stats.js");
}

/*
 * Return the UI of the global dashboard without data
 */
function gofast_stats_dashboard_ui(){
  $path = drupal_get_path('module', 'gofast_stats');

  $output = "";

  $dashboard = theme('gofast_stats_global_dashboard');
  $output .= $dashboard;
  return $output;
}

function gofast_stats_list_docs(){
  drupal_set_title(t("Export documents list"));
  $output = drupal_get_form("gofast_stats_list_docs_form");
  return $output;
}

function gofast_stats_list_docs_form($form, &$form_state){
    global $user;
    $myuser = user_load($user->uid);

    $all_groups = gofast_og_get_spaces_by_user($myuser);
    $all_titles = gofast_get_node_title_multiple(array_values($all_groups));
    $i = 0;

    foreach($all_groups as $gid){      
      if(!in_array($gid, array("4","5","6","7"), TRUE)){
        $spaces_options[$gid] = $all_titles[$i];
      }
      
      $i++;
    }
    
   $form["og"] = array(
        '#type'=> 'checkboxes',
        '#title' => t("Collaborative space"),
        '#description' => t("Choose one or more collaborative spaces"),
        '#options' => $spaces_options,
        '#multiple' => TRUE,
    );

   //TODO get datepicker
   $form['date'] = array(
      '#type' => 'textfield',
      '#title' => t("Date"),
      '#description' => t("Documents created or modified after this date"),
      '#size' => 10,
      '#required'  => FALSE,
      '#suffix' => '<script type="text/javascript"> jQuery( "#edit-date" ).datepicker({dateFormat : "dd/mm/yy"});</script>',
      '#weight' => 2,
   );

   $fields_options = gofast_stats_get_available_fields_export_excel();

   $form["list_fields"] = array(
        '#type'=>'checkboxes',
        '#title' => t("Fields"),
        '#description' => t("Choose fields you want to export into the generated file"),
        '#options' => $fields_options,
        '#multiple' => TRUE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t("Submit"),
      '#submit' => array('gofast_stats_list_docs_form_submit'),
      '#weight' => 3,

   );

    return $form;
}

function gofast_stats_list_docs_form_submit($form,&$form_state){
    $a = strptime($form_state["values"]["date"], '%d/%m/%Y');

    $timestamp = mktime(0, 0, 0, $a['tm_mon']+1, $a['tm_mday'], $a['tm_year']+1900);

    //we add 24h to the timestamp to exclude the selected day
    $timestamp = $timestamp+(1*60*60*24);

    $batch = array(
                    'title' => 'Construction de la liste',
                    'operations' => array(
                      array('gofast_stats_list_genere_file_batch', array($form_state["values"]["og"], $timestamp, $form_state["values"]["list_fields"])),
                    ),
                    'finished' => 'gofast_stats_list_genere_file_finished',
                    'progress_message' => "",
                  );
                batch_set($batch);
                // Only needed if not inside a form _submit handler.
                // Setting redirect in batch_process.
                batch_process("node");


}

function gofast_stats_list_genere_file_batch($gid,$date,$list_fields,&$context) {

  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $all_nids = gofast_stats_list_get_nids($gid,$date);
    $context['sandbox']['max'] = count($all_nids);
  }


  $all_nids = gofast_stats_list_get_nids($gid,$date);

  $limit = 50;
  $cut_all_nids = array_slice($all_nids,$context['sandbox']['current_node'], $limit, true);
  global $cmis_sudo_admin;
  $cmis_sudo_admin = true;
  $context['results']["params"] = array("gids" => $gid, "date" => $date);
  foreach($cut_all_nids as $key => $nid){
    $node = node_load($nid, NULL, TRUE);
     if($node->type !== "alfresco_item" ){
        $context['sandbox']['progress']++;
        $context['sandbox']['current_node'] = $key+1;
         continue;
     }
    $repository_id = gofast_cmis_get_repository();
    $doc=cmisapi_getObject($repository_id, $node->reference);
    $wrapper = entity_metadata_wrapper("node", $node);

    $array_infos = array();

    //mandatory infos
    $array_infos["nid"]   = $node->nid;
    $array_infos["title"] = $node->title;

    $options = array('absolute' => TRUE);
    $url = url('node/' . $node->nid, $options);
    $array_infos["link"]  = $url;

    //optionnals infos
    if(isset($list_fields["path"])){
        $parentFolder=cmisapi_getFolderParent($repository_id,  $node->reference);
        $path = $parentFolder->objectList[0]->properties["cmis:path"];
        $array_infos["path"] = $path;
    }
    if(isset($list_fields["last_version"])){
        $array_infos["last_version"] = $doc->properties["cmis:versionLabel"];
    }
    if(isset($list_fields["popularity"])){
        $array_infos["popularity"] = $node->field_popularity[LANGUAGE_NONE][0]["radioactivity_energy"];
    }
    if(isset($list_fields["views"])){
        $array_infos["views"] = isset(nodeviewcountcount_count_node_views($node, NULL, TRUE)[0]) ? nodeviewcountcount_count_node_views($node, NULL, TRUE)[0]->expression : 0;
    }
    if(isset($list_fields["state"])){
        $state = $wrapper->{'field_state'}->value();
        $array_infos["state"] = $state ? i18n_taxonomy_localize_terms($state)->name : '';
    }
    if(isset($list_fields["category"])){
        $category = $wrapper->{'field_category'}->value();
        $array_infos["category"] = $category ? i18n_taxonomy_localize_terms($category)->name : '';
    }
    if(isset($list_fields["created"])){
        $array_infos["created"] = format_date( $node->created, 'custom', "d/m/Y");
    }
    if(isset($list_fields["created_by"])){
        $creator = user_load($node->uid);
        $array_infos["created_by"] =  $creator->ldap_user_givenname[LANGUAGE_NONE][0]["value"]." ".$creator->ldap_user_sn[LANGUAGE_NONE][0]["value"];
    }
    if(isset($list_fields["modified"])){
        $array_infos["modified"] = format_date( $node->changed, 'custom', "d/m/Y");
    }
    if(isset($list_fields["modified_by"])){
        $modifier = user_load($node->revision_uid);
        $array_infos["created_by"] =  $modifier->ldap_user_givenname[LANGUAGE_NONE][0]["value"]." ".$modifier->ldap_user_sn[LANGUAGE_NONE][0]["value"];
    }


    $context['results'][$node->nid] = $array_infos ;
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $key+1;
    $context['message'] = $node->title;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}


function gofast_stats_list_genere_file_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural(count($results), 'One post processed.', '@count posts processed.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
  // Providing data for the redirected page is done through $_SESSION.
  gofast_stats_list_genere_file($results);


}

function gofast_stats_space_stats_get_values(){
  $values = array();

  $activity = gofast_api_stats_get_top_spaces(array("params" => array('activity', TRUE)));
  if(!empty($activity['data']['data'])){
      $activity['data'] = $activity['data']['data'];
  }

  foreach($activity['data']['labels'] as $id => $label){
    $values['activity'][$label] = $activity['data']['datasets'][0]['data'][$id];
  }

  $activity = gofast_api_stats_get_top_spaces(array("params" => array('members', TRUE)));
  if(!empty($activity['data']['data'])){
      $activity['data'] = $activity['data']['data'];
  }

  foreach($activity['data']['labels'] as $id => $label){
    $values['members'][$label] = $activity['data']['datasets'][0]['data'][$id];
  }

  $activity = gofast_api_stats_get_top_spaces(array("params" => array('content', TRUE)));
  if(!empty($activity['data']['data'])){
      $activity['data'] = $activity['data']['data'];
  }

  foreach($activity['data']['labels'] as $id => $label){
    $values['content'][$label] = $activity['data']['datasets'][0]['data'][$id];
  }

  return $values;
}

function gofast_stats_space_stats_genere_file(){
  set_time_limit(0);
  require_once libraries_get_path('excel_reader').'/Classes/PHPExcel.php';
  /** PHPExcel_Writer_Excel2007 */
  require_once libraries_get_path('excel_reader').'/Classes/PHPExcel/Writer/Excel2007.php';

  $fid = rand(0, getrandmax());

  //Release Apache session
  print $fid;
  fastcgi_finish_request();
  $filename = "export_".$fid.".xlsx";
  // Create new PHPExcel object
  $objPHPExcel = new PHPExcel();
  $objPHPExcel->getActiveSheet()->setTitle(t("Activity", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->addSheet(new PHPExcel_Worksheet());
  $objPHPExcel->setActiveSheetIndex(1);
  $objPHPExcel->getActiveSheet()->setTitle(t("Members", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->addSheet(new PHPExcel_Worksheet());
  $objPHPExcel->setActiveSheetIndex(2);
  $objPHPExcel->getActiveSheet()->setTitle(t("Content", array(), array('context' => 'gofast_stats')));

  $values = gofast_stats_space_stats_get_values();

  //Activity tab
  $objPHPExcel->setActiveSheetIndex(0);
  $objPHPExcel->getActiveSheet()->SetCellValue('A1', "#");
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Space"));
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Activity", array(), array('context' => 'gofast_stats')));

  $position = 1;

  foreach ($values['activity'] as $title => $activity){
    $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($position+1), $position);
    $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($position+1), $title);
    $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($position+1), $activity);
    $position++;
  }

  //Members tab
  $objPHPExcel->setActiveSheetIndex(1);
  $objPHPExcel->getActiveSheet()->SetCellValue('A1', "#");
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Space"));
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Members", array(), array('context' => 'gofast_stats')));

  $position = 1;

  foreach ($values['members'] as $title => $activity){
    $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($position+1), $position);
    $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($position+1), $title);
    $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($position+1), $activity);
    $position++;
  }

  //Activity tab
  $objPHPExcel->setActiveSheetIndex(2);
  $objPHPExcel->getActiveSheet()->SetCellValue('A1', "#");
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Space"));
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Content", array(), array('context' => 'gofast_stats')));

  $position = 1;

  foreach ($values['content'] as $title => $activity){
    $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($position+1), $position);
    $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($position+1), $title);
    $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($position+1), $activity);
    $position++;
  }

  // Save Excel 2007 file

    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save("/var/www/d7/sites/default/files/".$filename);
}

function gofast_stats_global_space_stats_genere_file(){
  set_time_limit(0);
  require_once libraries_get_path('excel_reader').'/Classes/PHPExcel.php';
  /** PHPExcel_Writer_Excel2007 */
  require_once libraries_get_path('excel_reader').'/Classes/PHPExcel/Writer/Excel2007.php';

  $fid = rand(0, getrandmax());

  //Release Apache session
  print $fid;
  fastcgi_finish_request();

  $filename = "export_".$fid.".xlsx";
  // Create new PHPExcel object
  $objPHPExcel = new PHPExcel();
  $objPHPExcel->getActiveSheet()->setTitle(t("Spaces", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->addSheet(new PHPExcel_Worksheet());

  $objPHPExcel->getActiveSheet()->SetCellValue('A1', "#");
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', "ID");
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Title", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('D1', t("Type", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('E1', t("Path", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('F1', t("Administrators", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('G1', t("Contributors", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('H1', t("Read only", array(), array('context' => 'gofast_stats')));

  //Get root spaces
  $groups = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Groups");
  $organisations = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Organisations");
  $extranet = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Extranet");
  $public = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Public");

  $i = 2;

  //Fetch into root spaces
  foreach(array($groups, $organisations, $extranet, $public) as $root_gid){
      $childrens = gofast_og_get_children($root_gid, TRUE, TRUE, TRUE);

      //Fetch into childrens
      foreach($childrens as $children){
        //Basic informations
        $objPHPExcel->getActiveSheet()->SetCellValue('A' . $i, $i-1);
        $objPHPExcel->getActiveSheet()->SetCellValue('B' . $i, $children->nid);
        $objPHPExcel->getActiveSheet()->SetCellValue('C' . $i, $children->title);
        $objPHPExcel->getActiveSheet()->SetCellValue('D' . $i, ucfirst($children->type));

        //Get path
        $path = gofast_cmis_space_get_webdav_path($children->nid);
        $objPHPExcel->getActiveSheet()->SetCellValue('E' . $i, $path);

        //Get space members
        $members = gofast_og_get_members_userlist_included($children, "active");
        $members_role = array();

        foreach($members as $memberid){
            $role = gofast_og_get_user_final_roles_for_space("node", $children->nid, $memberid);
            $members_role[array_shift($role)][] = gofast_user_get_login($memberid);
        }

        $objPHPExcel->getActiveSheet()->SetCellValue('F' . $i, implode(";", $members_role['administrator member']));
        $objPHPExcel->getActiveSheet()->SetCellValue('G' . $i, implode(";", $members_role['group contributor']));
        $objPHPExcel->getActiveSheet()->SetCellValue('H' . $i, implode(";", $members_role['read only member']));
        $i++;
      }
  }

  // Save Excel 2007 file

  $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
  $objWriter->save("/var/www/d7/sites/default/files/".$filename);
}

/*
 * Generate a userstats excel file
 */
function gofast_stats_user_stats_genere_file(){
  set_time_limit(0);
  require_once libraries_get_path('excel_reader').'/Classes/PHPExcel.php';
  /** PHPExcel_Writer_Excel2007 */
  require_once libraries_get_path('excel_reader').'/Classes/PHPExcel/Writer/Excel2007.php';

  $fid = rand(0, getrandmax());

  //Release Apache session
  print $fid;
  fastcgi_finish_request();
  $filename = "export_".$fid.".xlsx";

  //Get filters
  if(!empty($_GET['xid'])){
    $filters = explode(",", $_GET['xid']);
  }
  // Create new PHPExcel object
  $objPHPExcel = new PHPExcel();
  $objPHPExcel->getActiveSheet()->setTitle(t("Users", array(), array('context' => 'gofast_stats')));

  $values = entity_load('user');

  //Users tab
  $objPHPExcel->setActiveSheetIndex(0);
  $objPHPExcel->getActiveSheet()->SetCellValue('A1', t("User ID", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Login", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("E-mail", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('D1', t("First name", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('E1', t("Last name", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('F1', t("Register date", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('G1', t("Last login"));
  $objPHPExcel->getActiveSheet()->SetCellValue('H1', t("Status", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('I1', t(GOFAST_ROLE_SUPER_ADMIN_VALUE, array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('J1', t("Space admin", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('K1', t("Broadcaster", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('L1', t("Extranet", array(), array('context' => 'gofast_stats')));

  $position = 1;

  foreach ($values as $user){
    if($user->uid == 0 || $user->uid == 1){
        continue;
    }
    if(!$user->access){
        $uaccess = "X";
    }else{
        $uaccess = format_date($user->access, "short");
    }
    $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($position+1), $user->uid);
    $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($position+1), $user->name);
    $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($position+1), $user->mail);
    $objPHPExcel->getActiveSheet()->SetCellValue('D' . ($position+1), $user->ldap_user_givenname[LANGUAGE_NONE][0]['value']);
    $objPHPExcel->getActiveSheet()->SetCellValue('E' . ($position+1), $user->ldap_user_sn[LANGUAGE_NONE][0]['value']);
    $objPHPExcel->getActiveSheet()->SetCellValue('F' . ($position+1), format_date($user->created, "short"));
    $objPHPExcel->getActiveSheet()->SetCellValue('G' . ($position+1), $uaccess);
    $objPHPExcel->getActiveSheet()->SetCellValue('H' . ($position+1), $user->status);
    $objPHPExcel->getActiveSheet()->SetCellValue('I' . ($position+1), gofast_user_is_adm($user));
    $objPHPExcel->getActiveSheet()->SetCellValue('J' . ($position+1), gofast_user_is_manager($user));
    $objPHPExcel->getActiveSheet()->SetCellValue('K' . ($position+1), gofast_user_is_broadcaster($user));
    $objPHPExcel->getActiveSheet()->SetCellValue('L' . ($position+1), gofast_user_is_extranet($user));
    $position++;
  }

  $i = 1;
  foreach($filters as $filter){
      $space = node_load($filter);

      //Add sheet for the space filters
      $objPHPExcel->addSheet(new PHPExcel_Worksheet());
      $objPHPExcel->setActiveSheetIndex($i);
      $objPHPExcel->getActiveSheet()->setTitle($space->title);

      //Add first row
      $objPHPExcel->getActiveSheet()->SetCellValue('A1', t("User ID", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Login", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("E-mail", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('D1', t("First name", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('E1', t("Last name", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('F1', t("Role", array(), array('context' => 'gofast_stats')));

      $members = gofast_og_get_members_userlist_included($space);
      $j = 1;
      foreach($members as $uid){
        $user = user_load($uid);
        if(!$user->status || $user->uid == 0 || $user->uid == 1){
            continue;
        }
        $final_role = array_shift(gofast_og_get_user_final_roles_for_space('node', $space->nid, $uid));
        if(empty($final_role)){
            $final_role = t("Pending", array(), array('context' => "gofast:gofast_stats"));
        }else{
            $final_role = t(ucfirst($final_role), array(), array('context' => "gofast:gofast_stats"));
        }

        //Add members informations
        $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($j+1), $uid);
        $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($j+1), $user->name);
        $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($j+1), $user->mail);
        $objPHPExcel->getActiveSheet()->SetCellValue('D' . ($j+1), $user->ldap_user_givenname[LANGUAGE_NONE][0]['value']);
        $objPHPExcel->getActiveSheet()->SetCellValue('E' . ($j+1), $user->ldap_user_sn[LANGUAGE_NONE][0]['value']);
        $objPHPExcel->getActiveSheet()->SetCellValue('F' . ($j+1), $final_role);
        $j++;
      }
      $i++;
  }

  // Save Excel 2007 file

    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save("/var/www/d7/sites/default/files/".$filename);
}

/*
 * Retrieve a stats file by id
 */
function gofast_stats_retrieve_file($fid){
    $filename = "export_".$fid.".xlsx";
    $file = '/var/www/d7/sites/default/files/'.$filename;

    if (file_exists($file)) {
      header('Content-Description: File Transfer');
      header('Content-Type: application/octet-stream');
      header('Content-Disposition: attachment; filename='.basename($file));
      header('Content-Transfer-Encoding: binary');
      header('Expires: 0');
      header('Cache-Control: must-revalidate');
      header('Pragma: public');
      header('Content-Length: ' . filesize($file));
      ob_clean();
      flush();
      readfile($file);
      exit;
    }else{
        print "Waiting";
        exit;
    }
}


function gofast_stats_list_genere_file($results){
    set_time_limit(0);
    require_once libraries_get_path('excel_reader').'/Classes/PHPExcel.php';
    /** PHPExcel_Writer_Excel2007 */
    require_once libraries_get_path('excel_reader').'/Classes/PHPExcel/Writer/Excel2007.php';

    $filename = "liste_documents.xlsx";
    $fields_options = gofast_stats_get_available_fields_export_excel();



    // Create new PHPExcel object
    $objPHPExcel = new PHPExcel();
    $objPHPExcel->setActiveSheetIndex(0);
    $objPHPExcel->getActiveSheet()->SetCellValue('A1', "nid");
    $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Title"));
    $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Link to document"));

    //add header for each facultative field
    $first_result = array_slice($results, 1, 1);
    $alphabet = range('A', 'Z');
    $i = 3;

    foreach($first_result[0] as $field_name=>$field_value){
        if($field_name == "nid" || $field_name == "title" || $field_name == "link"){
            continue;
        }
       $objPHPExcel->getActiveSheet()->SetCellValue($alphabet[$i].'1', $fields_options[$field_name]);
       $i++;
    }


    //iterate each result to fill the excel file
    $j = 1;
    foreach($results as $nid=>$result){
        if($j == 1){
            $j++;
            continue;
        }
        $k = 0;
        foreach($result as $field_name=>$field_value){
           $objPHPExcel->getActiveSheet()->SetCellValue($alphabet[$k].$j, $field_value);
           $k++;
        }

         $j++;
    }
    // Save Excel 2007 file

    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save("/var/www/d7/sites/default/files/".$filename);

    $file = '/var/www/d7/sites/default/files/'.$filename;

    if (file_exists($file)) {
        header('Content-Description: File Transfer');
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename='.basename($file));
        header('Content-Transfer-Encoding: binary');
        header('Expires: 0');
        header('Cache-Control: must-revalidate');
        header('Pragma: public');
        header('Content-Length: ' . filesize($file));
        ob_clean();
        flush();
        readfile($file);
        exit;
    }


}

function gofast_stats_list_get_nids($gid, $date){
    $nids = array();
    $sql_nodes = "SELECT n.nid FROM {node} n INNER JOIN {og_membership} o ON n.nid = o.etid WHERE n.changed > '".$date."' AND n.status = 1 AND o.gid IN (".implode(",",$gid).") AND o.field_name = 'og_group_content_ref' ORDER BY n.changed DESC";

     $result_nodes=db_query($sql_nodes);
     foreach($result_nodes as $node){
     //while ($row_node = db_fetch_object($result_nodes)) {
         $nids[] = $node->nid ;
     }

     return $nids;
}

function gofast_stats_get_available_fields_export_excel(){
  $fields_options = array("path" => t("Path"), "popularity" => t("Popularity"), "views" => t("Counter views"), "category" => t("Category"),
                           "created" => t("Creation date"), "created_by" => t("Created by"), "modified" => t("Modification date"), "modified_by" => t("Modified by"),
                            "last_version" => t("Current version"));

  return $fields_options;
}

function gofast_stats_theme(){
  return array(
    'gofast_stats_global_dashboard' => array(
      'template'  => 'tpl/global_dashboard',
    ),
      'gofast_stats_global_dashboard_content' => array(
      'template'  => 'tpl/global_dashboard_content',
    ),
    'gofast_stats_space_dashboard' => array(
      'template'  => 'tpl/space_dashboard',
    ),
  );
}


/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_new_users
 * @params
 *    $period : Can be 1week, 1month, 1year, 2year, 3year
 *
 * Return the current gofast version
 */
function gofast_api_stats_get_users_chart($params){
  //Retrieve params
  $params = $params['params'];
  $period = empty($params[0]) ? "1week" : $params[0];
  $gid = empty($params[1]) ? null : $params[1];
  $gids = empty($params[2]) ? array() : $params[2];

  $output = array();

  //Define step between values
  if($period == "1week" || $period == "1month"){
    $step = "day";
  }else{
    $step = "month";
  }

  if(!empty($gid)){
    $label = "members";
  }else{
    $label = "users";
  }

  $values = array(
    'labels' => gofast_format_date_array(gofast_stats_get_labels_by_period($period), 'privatemsg_years'),
    'datasets' => array(
      array(
        'name'             => t('New '. $label, array(), array('context' => 'gofast:stats')),
        'data'              => call_user_func("gofast_stats_get_new_${label}_values", gofast_stats_get_labels_by_period($period), $step, $gid, $gids),
      ),
      array(
        'name'             => t('Connected ' . $label, array(), array('context' => 'gofast:stats')),
        'data'              => gofast_stats_get_active_users_values(gofast_stats_get_labels_by_period($period), $step, $gid, $gids),
      ),
    ),

  );
  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_top_spaces
 * @params
 *    $criteria
 *
 * Return the 10 top spaces, according to passed criteria
 */
function gofast_api_stats_get_top_spaces($params){
  //Retrieve params
  $params = $params['params'];
  $criteria = empty($params[0]) ? "activity" : $params[0];
  $full = empty($params[1]) ? FALSE : $params[1];

  $output = array();
    $data = gofast_api_stats_get_top_spaces_values($criteria, $full);

    $values = array(
      'labels' => array_values(gofast_get_node_title_multiple(array_keys($data), array(), TRUE)),
      'datasets' => array(
        array(
          'name'    => array(t(ucfirst($criteria), array(), array('context' => 'gofast:stats'))),
          'data'    => array_values($data),
        ),
      ),
    );

  return gofast_api_success(array('data' => $values),"200 OK","application/json",null,TRUE);
  }

/*
 * Return the 10 top spaces, according to passed criteria
 */
function gofast_api_stats_get_top_spaces_values($criteria, $full = FALSE){
  if($criteria === "activity"){
    $activities = array();
    $activity_documents = db_query("select gid,COUNT(gid) from node_revision INNER JOIN og_membership ON og_membership.etid=node_revision.nid where node_revision.timestamp>=:date AND og_membership.field_name='og_group_content_ref' AND gid!=0 group by gid order by COUNT(gid) desc", array(":date" => (time() - 2629746)))->fetchAll();
    $activity_comments = db_query("select gid,COUNT(gid) from comment INNER JOIN og_membership ON og_membership.etid=comment.nid where comment.changed>=:date AND og_membership.field_name='og_group_content_ref' AND gid!=0 group by gid order by COUNT(gid) desc", array(":date" => (time() - 2629746)))->fetchAll();

    $count_var = "COUNT(gid)";
    foreach($activity_comments as $activity){
      $activities[$activity->gid] = $activity->$count_var;
    }

    foreach($activity_documents as $activity){
      $activities[$activity->gid] = $activities[$activity->gid] + $activity->$count_var;
    }

    arsort($activities);
    return $full ? $activities : array_slice($activities, 0, 10, TRUE);
  }else if($criteria == "members"){
    $count_var = "COUNT(gid)";
    $top_memebers = db_query("select gid,COUNT(gid) from og_membership INNER JOIN node on og_membership.gid=node.nid where field_name='og_user_node' and node.type!='public' AND gid NOT IN('0', '4', '5', '6', '7') group by gid order by COUNT(gid) desc")->fetchAll();

    foreach($top_memebers as $activity){
      $activities[$activity->gid] = $activities[$activity->gid] + $activity->$count_var;
    }

    arsort($activities);
    return $full ? $activities : array_slice($activities, 0, 10, TRUE);
  }elseif($criteria == "content"){
    $count_var = "COUNT(gid)";
    $top_content = db_query("select gid,COUNT(gid) from og_membership where field_name='og_group_content_ref' AND gid!=0 group by gid order by COUNT(gid) desc")->fetchAll();

    foreach($top_content as $activity){
      $activities[$activity->gid] = $activities[$activity->gid] + $activity->$count_var;
    }

    arsort($activities);
    return $full ? $activities : array_slice($activities, 0, 10, TRUE);
  }
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_documents_chart
 * @params
 *    $period : Can be 1week, 1month, 1year, 2year, 3year
 *    $mode : Evolution or Periodic
 *    $gid : Filter by group ID
 *
 * Return the current gofast version
 */
function gofast_api_stats_get_documents_chart($params){
  //Retrieve params
  $params = $params['params'];
  $period = empty($params[0]) ? "1week" : $params[0];
  $mode = empty($params[1]) ? "evolution" : $params[1];
  $gid = empty($params[2]) ? NULL : $params[2];


  $output = array();

  //Define step between values
  if($period == "1week" || $period == "1month"){
    $step = "day";
  }else{
    $step = "month";
  }

  if(isset($gid)){
    $funct = "gofast_stats_get_space_documents_values";
  }else{
    $funct = "gofast_stats_get_documents_values";
  }
  $values = array(
    'labels' => gofast_format_date_array(gofast_stats_get_labels_by_period($period), 'privatemsg_years'),
    'datasets' => array(
      array(
        'name'             => t('Documents', array(), array('context' => 'gofast:stats')),
        'data'              => call_user_func($funct, gofast_stats_get_labels_by_period($period), $step, NULL, $mode, $gid),
      ),
    ),
  );

  $formats = db_query('SELECT tid,name FROM taxonomy_term_data WHERE vid=:vid' , array(":vid" => GOFAST_VID_FORMAT));

  while($format = $formats->fetch()){
    $data = call_user_func($funct, gofast_stats_get_labels_by_period($period), $step, $format->tid, $mode, $gid);
    $display = FALSE;
    foreach ($data as $value){
      if($value != 0){
        $display = TRUE;
      }
    }
    if($display === TRUE){
      $values['datasets'][] = array(
        'name'             => t($format->name, array(), array('context' => 'gofast')),
        'data'              => $data,
      );
    }
  }

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_spaces_chart
 * @params
 *    $period : Can be 1week, 1month, 1year, 2year, 3year
 *    $mode : Evolution or Periodic
 *
 * Return the current gofast version
 */
function gofast_api_stats_get_spaces_chart($params){
  //Retrieve params
  $params = $params['params'];
  $period = empty($params[0]) ? "1week" : $params[0];
  $mode = empty($params[1]) ? "evolution" : $params[1];

  $output = array();

  //Define step between values
  if($period == "1week" || $period == "1month"){
    $step = "day";
  }else{
    $step = "month";
  }

  $values = array(
    'labels' => gofast_format_date_array(gofast_stats_get_labels_by_period($period), 'privatemsg_years'),
    'datasets' => array(
      array(
        'name'             => t('Spaces', array(), array('context' => 'gofast:stats')),
        'data'             => gofast_stats_get_spaces_values(gofast_stats_get_labels_by_period($period), $step, NULL, $mode),
      ),
    ),
  );

  $types = array('group', 'organisation', 'public', 'extranet', 'private_space');

  foreach($types as $type){
    $data = gofast_stats_get_spaces_values(gofast_stats_get_labels_by_period($period), $step, $type, $mode);
    $display = FALSE;
    foreach ($data as $value){
      if($value != 0){
        $display = TRUE;
      }
    }
    if($display === TRUE){
      switch($type){
        case 'group':
          $label = "Groups";
          break;
        case 'organisation':
          $label = "Organisations";
          break;
        case 'public':
          $label = "Public spaces";
          break;
        case 'extranet':
          $label = "Extranet spaces";
          break;
        case 'private_space':
          $label = "Personal spaces";
          break;
      }
      $values['datasets'][] = array(
        'name'             => t($label, array(), array('context' => 'gofast:stats')),
        'data'              => $data,
      );
    }
  }

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_state
 * @param gid filter
 *
 * Provide informations about the states of the users
 */
function gofast_api_stats_get_users_doughnut_state($params){
  //Retrieve params
  $params = $params['params'];
  $gid = empty($params[0]) ? NULL : $params[0];
  $gids = empty($params[1]) ? array() : $params[1];

  $output = array();

  if(!empty($gid)){
    $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid=:gid AND (field_name='og_user_node' OR field_name='og_private')", array(":gid" => $gid))->fetchAllAssoc("etid");
    $filter_uids = array_values($filter_uids);
    foreach($filter_uids as $etid){
      $array_filter_uids[] = $etid->etid;
    }
    $sql_filter_uids = "AND uid IN (" . implode(",", $array_filter_uids) . ")";
    $label = "members";
  }else{
    $label = "users";
  }

  if(!empty($gids)){
      if(!empty($gid)){
        $sql_filter_space = "AND etid IN (" . implode(",", $array_filter_uids) . ")";
      }
      $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid IN(".implode(',', $gids).") AND (field_name='og_user_node' OR field_name='og_private') " . $sql_filter_space)->fetchAllAssoc("etid");
      $filter_uids = array_values($filter_uids);
      $array_filter_uids = array();
      foreach($filter_uids as $etid){
        $array_filter_uids[] = $etid->etid;
      }
      $sql_filter_uids = "AND uid IN (" . implode(",", $array_filter_uids) . ")";
    }

  $count_str = "COUNT(uid)";
  $allowed_users = db_query("SELECT COUNT(uid) FROM users WHERE status=1 ".$sql_filter_uids)->fetch()->$count_str;
  $blocked_users = db_query("SELECT COUNT(uid) FROM users LEFT JOIN field_data_field_left ON uid=entity_id WHERE status=0 AND uid>1 AND field_left_value!=1 ".$sql_filter_uids)->fetch()->$count_str;
  $disabled_users = db_query("SELECT COUNT(uid) FROM users LEFT JOIN field_data_field_left ON uid=entity_id WHERE status=0 AND uid>1 AND field_left_value=1 ".$sql_filter_uids)->fetch()->$count_str;

  $values = array(
    'labels' => array(t("Allowed ".$label, array(), array('context' => 'gofast:stats')), t("Blocked ".$label, array(), array('context' => 'gofast:stats')), t("Disabled ".$label, array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
        'data'  => array(intval($allowed_users), intval($blocked_users), intval($disabled_users)),
    ),

  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_category
 * @param gid : filter
 *
 * Provide informations about the category metadata
 */
function gofast_api_stats_get_category($params){
  //Retrieve params
  $params = $params['params'];
  $gid = empty($params[0]) ? NULL : $params[0];

  $output = array();
  $labels = array();
  $datav = array();

  if(isset($gid)){
    $spaces = array_values(gofast_og_get_children($gid, TRUE, FALSE, TRUE));
    $spaces[] = $gid;
    $sql_spaces = implode(",", $spaces);
  }

  $formats = db_query('SELECT tid,name FROM taxonomy_term_data WHERE vid=' . GOFAST_VID_CATEGORY);
  $total = 0;
  $percentage_associations = [];
  while($format = $formats->fetch()){
    if(isset($gid)){
      $count_var = 'COUNT(DISTINCT(etid))';
      $data = db_query("select COUNT(DISTINCT(etid)) from field_data_field_category INNER JOIN og_membership ON entity_id=etid WHERE gid IN (".$sql_spaces.") AND field_category_tid=".$format->tid)->fetchAll()[0]->$count_var;
    }else{
      $count_var = 'COUNT(field_category_tid)';
      $data = db_query("select COUNT(field_category_tid) from field_data_field_category where field_category_tid=".$format->tid)->fetchAll()[0]->$count_var;
    }
    if($data == "0"){
      continue;
    }
    $labels[] = t($format->name, array(), array('context' => 'gofast'));
    $datav[] = intval($data);
    $total += intval($data);
  }

  if(empty($datav)){
      $datav[] = 1;
      $total = 1;
      $labels[] = "N/A";
  }

  //Associate values with percentages
  foreach($datav as &$val){
      $percentage_associations[intval(($val/$total)*100)] = $val;
      $val = (intval($val/$total*100));
  }

  $total_label = count($datav) > 1 ? "TOTAL" : $labels[0];

  $values = array(
    'labels' => $labels,
    'datasets' => array(
        'data'  => $datav,
        'percentage' => $percentage_associations,
        'total_label' => $total_label
    ),
  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_criticity
 * @params gid : filter
 *
 * Provide informations about the criticity metadata
 */
function gofast_api_stats_get_criticity($params){
  //Retrieve params
  $params = $params['params'];
  $gid = empty($params[0]) ? NULL : $params[0];

  $output = array();
  $labels = array();
  $datav = array();

  if(isset($gid)){
    $spaces = array_values(gofast_og_get_children($gid, TRUE, FALSE, TRUE));
    $spaces[] = $gid;
    $sql_spaces = implode(",", $spaces);
  }

  $formats = db_query('SELECT tid,name FROM taxonomy_term_data WHERE vid=' . GOFAST_VID_CRITICITY);
  while($format = $formats->fetch()){
    if(isset($gid)){
      $count_var = 'COUNT(DISTINCT(etid))';
      $data = db_query("select COUNT(DISTINCT(etid)) from field_data_field_criticity INNER JOIN og_membership ON entity_id=etid WHERE gid IN (".$sql_spaces.") AND field_criticity_tid=".$format->tid)->fetchAll()[0]->$count_var;
    }else{
      $count_var = 'COUNT(field_criticity_tid)';
      $data = db_query("select COUNT(field_criticity_tid) from field_data_field_criticity where field_criticity_tid=".$format->tid)->fetchAll()[0]->$count_var;
    }
    if($data == "0"){
      continue;
    }
    $labels[] = t($format->name, array(), array('context' => 'gofast'));
    $datav[] = intval($data);
    $total += intval($data);
  }

  if(empty($datav)){
      $datav[] = 1;
      $total = 1;
      $labels[] = "N/A";
  }

  //Associate values with percentages
  foreach($datav as &$val){
      $percentage_associations[intval(($val/$total)*100)] = $val;
      $val = (intval($val/$total*100));
  }

  $total_label = count($datav) > 1 ? "TOTAL" : $labels[0];

  $values = array(
    'labels' => $labels,
    'datasets' => array(
        'data'  => $datav,
        'percentage' => $percentage_associations,
        'total_label' => $total_label
    ),
  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_state
 * @params : gid filter
 *
 * Provide informations about the state metadata
 */
function gofast_api_stats_get_state($params){
  //Retrieve params
  $params = $params['params'];
  $gid = empty($params[0]) ? NULL : $params[0];

  $output = array();
  $labels = array();
  $datav = array();

  if(isset($gid)){
    $spaces = array_values(gofast_og_get_children($gid, TRUE, FALSE, TRUE));
    $spaces[] = $gid;
    $sql_spaces = implode(",", $spaces);
  }

  $formats = db_query('SELECT tid,name FROM taxonomy_term_data WHERE vid=' . GOFAST_VID_STATE);
  while($format = $formats->fetch()){
    if(isset($gid)){
      $count_var = 'COUNT(DISTINCT(etid))';
      $data = db_query("select COUNT(DISTINCT(etid)) from field_data_field_state INNER JOIN og_membership ON entity_id=etid WHERE gid IN (".$sql_spaces.") AND field_state_tid=".$format->tid)->fetchAll()[0]->$count_var;
    }else{
      $count_var = 'COUNT(field_state_tid)';
      $data = db_query("select COUNT(field_state_tid) from field_data_field_state where field_state_tid=".$format->tid)->fetchAll()[0]->$count_var;
    }
    if($data == "0"){
      continue;
    }
    $labels[] = t($format->name, array(), array('context' => 'gofast'));
    $datav[] = intval($data);
    $total += intval($data);
  }

  if(empty($datav)){
      $datav[] = 1;
      $total = 1;
      $labels[] = "N/A";
  }

  //Associate values with percentages
  foreach($datav as &$val){
      $percentage_associations[intval(($val/$total)*100)] = $val;
      $val = (intval($val/$total*100));
  }

  $total_label = count($datav) > 1 ? "TOTAL" : $labels[0];

  $values = array(
    'labels' => $labels,
    'datasets' => array(
        'data'  => $datav,
        'percentage' => $percentage_associations,
        'total_label' => $total_label
    ),
  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_storage
 *
 * Provide informations about the current storage of the machine
 */
function gofast_api_stats_get_documents_storage(){
  $output = array();
  $free_storage = disk_free_space("/var/alfresco");
  $used_storage = (disk_total_space("/var/alfresco") - $free_storage);

  $formated_free_storage = formatBytes($free_storage);
  $formated_used_storage = formatBytes($used_storage);

  // print_r($formated_free_storage); exit;

  $values = array(
    'labels' => array(t("Free hard storage", array(), array('context' => 'gofast:stats')) . " (" . $formated_free_storage['unit'] . ")", t("Used hard storage", array(), array('context' => 'gofast:stats')) . " (" . $formated_used_storage['unit'] . ")"),
    'datasets' => array(
        'data'              => array($formated_free_storage['result'], $formated_used_storage['result']),
    ),

  );

  gofast_api_success(array('data' => $values));
}

function formatBytes($bytes, $precision = 2) {
  $units = array('B', 'KB', 'MB', 'GB', 'TB');

  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);




  // Uncomment one of the following alternatives
  $bytes /= pow(1024, $pow);
  // $bytes /= (1 << (10 * $pow));

  $result = round($bytes, $precision);

  return array('result' => $result, 'unit' => $units[$pow]);
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_storage
 *
 * Provide informations about the current indexation
 */
function gofast_api_stats_get_documents_indexation(){
  require_once drupal_get_path('module', 'gofast_search') . '/gofast_search.admin.inc';
  $output = array();

  $stats = gofast_search_get_stats(GOFAST_SEARCH_ENV_ID, TRUE);

  $pending = $stats['pending'] + $stats['queued'];
  $not_indexed = count(variable_get('gofast_search_index_node_exclude', array()));
  $not_tika = count(variable_get('gofast_search_tika_node_exclude', array()));
  $indexed = $stats['indexed'];

  $values = array(
    'labels' => array(t("Indexed documents", array(), array('context' => 'gofast:stats')), t("Pending for indexation", array(), array('context' => 'gofast:stats')), t("Not indexed", array(), array('context' => 'gofast:stats')), t("Only metadata indexed", array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
        'data'  => array($indexed, $pending, $not_indexed, $not_tika),
    ),

  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_active
 * @params gid filter
 *
 * Provide informations about the activity of the users (# of active/inactive)
 */
function gofast_api_stats_get_users_doughnut_active($params){
  //Retrieve params
  $params = $params['params'];
  $gid = empty($params[0]) ? NULL : $params[0];
  $gids = empty($params[1]) ? array() : $params[1];

  $output = array();

  if(!empty($gid)){
    $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid=".$gid." AND (field_name='og_user_node' OR field_name='og_private')")->fetchAllAssoc("etid");
    $filter_uids = array_values($filter_uids);
    foreach($filter_uids as $etid){
      $array_filter_uids[] = $etid->etid;
    }
    $sql_filter_uids = "uid IN (" . implode(",", $array_filter_uids) . ") AND";
    $label = "members";
  }else{
    $label = "users";
  }

  if(!empty($gids)){
      if(!empty($gid)){
        $sql_filter_space = "AND etid IN (" . implode(",", $array_filter_uids) . ")";
      }
      $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid IN(".implode(',', $gids).") AND (field_name='og_user_node' OR field_name='og_private') " . $sql_filter_space)->fetchAllAssoc("etid");
      $filter_uids = array_values($filter_uids);
      $array_filter_uids = array();
      foreach($filter_uids as $etid){
        $array_filter_uids[] = $etid->etid;
      }
      $sql_filter_uids = "uid IN (" . implode(",", $array_filter_uids) . ") AND";
  }

  $count_str = "COUNT(uid)";
  $active_users = db_query("SELECT COUNT(uid) FROM users WHERE ".$sql_filter_uids." login>" . (time()-7889238))->fetch()->$count_str;
  $inactive_users = db_query("SELECT COUNT(uid) FROM users WHERE ".$sql_filter_uids." login<=" . (time()-7889238))->fetch()->$count_str;

  $values = array(
    'labels' => array(t("Active ".$label, array(), array('context' => 'gofast:stats')), t("Inactive ".$label, array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
      'data' => array(intval($active_users), intval($inactive_users)),
    ),

  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_roles
 *
 * Provide informations about the roles and permissions of the users
 */
function gofast_api_stats_get_users_doughnut_roles(){
  $output = array();

  $count_str = "COUNT(users_roles.uid)";
  $count_strb = "COUNT(entity_id)";
  $platform_admin = db_query("select COUNT(users_roles.uid) from users_roles INNER JOIN role on users_roles.rid=role.rid WHERE name='administrator'")->fetch()->$count_str;
  $manager = db_query("select COUNT(users_roles.uid) from users_roles INNER JOIN role on users_roles.rid=role.rid WHERE name='manager'")->fetch()->$count_str;
  $broadcaster = db_query("select COUNT(entity_id) from field_data_is_broadcaster WHERE is_broadcaster_value=1")->fetch()->$count_strb;
  $extranet = db_query("select COUNT(entity_id) from field_data_is_extranet WHERE is_extranet_value=1")->fetch()->$count_strb;

  $values = array(
    'labels' => array(t("Admins", array(), array('context' => 'gofast:stats')), t("Space admins", array(), array('context' => 'gofast:stats')), t("Broadcasters", array(), array('context' => 'gofast:stats')), t("Extranet", array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
      array(
        'data'  => array($platform_admin, $manager, $broadcaster, $extranet),
      ),
    ),

  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_members_doughnut_roles
 * @params gid filter
 *
 * Provide informations about the roles of the users in a space
 */
function gofast_api_stats_get_members_doughnut_roles($params){
  //Retrieve params
  $params = $params['params'];
  $gid = $params[0];

  $output = array();
  $admins = 0;
  $contribs = 0;
  $ro = 0;
  $requesters = 0;

  $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid=".$gid." AND (field_name='og_user_node' OR field_name='og_private')")->fetchAllAssoc("etid");
  $filter_uids = array_values($filter_uids);
  foreach($filter_uids as $etid){
    $array_filter_uids[] = $etid->etid;
  }

  foreach($array_filter_uids as $uid){
    $role = array_values(gofast_og_get_user_roles($gid, $uid));
    $role = $role[0];
    if($role == "administrator member"){
      $admins++;
    }else if($role == "group contributor"){
      $contribs++;
    }else if($role == "read only member"){
      $ro++;
    }else{
      $requesters++;
    }
  }
  $values = array(
    'labels' => array(t("Administrators", array(), array('context' => 'gofast:stats')), t("Contributors", array(), array('context' => 'gofast:stats')), t("Read only", array(), array('context' => 'gofast:stats')), t("Requesters", array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
      array(
        'data'              => array($admins, $contribs, $ro, $requesters),
        'backgroundColor' => array('rgba(255,99,132, 0.2)', 'rgba(255,206,86,0.2)', 'rgba(153,102,255,0.2)', 'rgba(54,162,235,0.2)'),
        'borderColor'     => array('rgba(255, 99, 132, 1)', 'rgba(255,206,86,1)', 'rgba(153,102,255,1)', 'rgba(54,162,235,1)'),
        'borderWidth'     => 1,
      ),
    ),

  );

  gofast_api_success(array('data' => $values));
}

/*
 * Return labels, regarding the passed period
 * @params $period
 * Return an array
 */
function gofast_stats_get_labels_by_period($period){
  switch ($period){
    case '1week' :
      $return = gofast_time_range(strtotime('today midnight -1 week +1 day'), strtotime('today midnight'), "+1 day");
      break;
    case '1month' :
      $return = gofast_time_range(strtotime('today midnight -1 month +1 day'), strtotime('today midnight'), "+1 day");
      break;
    case '1year' :
      $return = gofast_time_range(strtotime('first day of midnight -1 year +1 day'), strtotime('first day of midnight'), "+1 month");
      break;
    case '2year' :
      $return = gofast_time_range(strtotime('first day of midnight -2 year +1 day'), strtotime('first day of midnight'), "+1 month");
      break;
    case '3year' :
      $return = gofast_time_range(strtotime('first day of midnight -3 year +1 day'), strtotime('first day of midnight'), "+1 month");
      break;
    default:
      break;
  }

  return $return;
}

/*
 * Return nomber of repeat, regarding the passed period
 * @params $period
 * Return an array
 */
function gofast_stats_get_repeat_by_period($period){
  switch ($period){
    case '1week' :
      $return = 8;
      break;
    case '1month' :
      $return = 32;
      break;
    case '1year' :
      $return = 366;
      break;
    case '2year' :
      $return = 366*2;
      break;
    case '3year' :
      $return = 366*3;
      break;
    default:
      break;
  }

  return $return;
}

/*
 * Return nomber of new users, regarding the times and the step params
 * @params $times
 * @params $step
 * Return an array
 */
function gofast_stats_get_new_users_values($times, $step, $gid = NULL, $gids=array()){
  $return = array();

  foreach($times as $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }
    $count_attr = "COUNT (uid)";

    if(!empty($gids)){
      $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid IN(".implode(',', $gids).") AND (field_name='og_user_node' OR field_name='og_private')")->fetchAllAssoc("etid");
      $filter_uids = array_values($filter_uids);
      $array_filter_uids = array();
      foreach($filter_uids as $etid){
        $array_filter_uids[] = $etid->etid;
      }
      $sql_filter_uids = "AND uid IN (" . implode(",", $array_filter_uids) . ")";
    }

    $return[] = db_query("SELECT COUNT (uid) FROM users where created <=" . $to . " AND created >=" . $time . " " . $sql_filter_uids)->fetch()->$count_attr;
  }
  return $return;
}

/*
 * Return nomber of new users, regarding the times and the step params
 * @params $times
 * @params $step
 * @params $gid filter
 * Return an array
 */
function gofast_stats_get_new_members_values($times, $step, $gid, $gids = array()){
  $return = array();

  foreach($times as $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }

    if(!empty($gids)){
      $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid IN(".implode(',', $gids).") AND (field_name='og_user_node' OR field_name='og_private')")->fetchAllAssoc("etid");
      $filter_uids = array_values($filter_uids);
      $array_filter_uids = array();
      foreach($filter_uids as $etid){
        $array_filter_uids[] = $etid->etid;
      }
      $sql_filter_uids = "AND etid IN (" . implode(",", $array_filter_uids) . ")";
    }

    $count_attr = "COUNT(etid)";
    $return[] = db_query("SELECT COUNT(etid) FROM og_membership where (field_name='og_user_node' OR field_name='og_private') AND gid=".$gid." AND created <=" . $to . " AND created >=" . $time . " " . $sql_filter_uids)->fetch()->$count_attr;
  }
  return $return;
}

/*
 * Return nomber of documents, regarding the times, step and format params
 * @params $times
 * @params $step
 * @params $format
 * Return an array
 */
function gofast_stats_get_documents_values($times, $step, $format = NULL, $mode = "evolution"){
  $return = array();

  foreach($times as $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }
    $count_attr = "COUNT(nid)";
    if($mode == "periodic"){
      if(empty($format)){
        $return[] = db_query("SELECT COUNT(nid) from node INNER JOIN field_data_field_format ON nid=entity_id where type='alfresco_item' AND bundle='alfresco_item' AND node.status= 1 AND created <=" . $to . " AND created >" . $time)->fetch()->$count_attr;
      }else{
        $return[] = db_query("SELECT COUNT(nid) from node INNER JOIN field_data_field_format ON nid=entity_id where type='alfresco_item' AND bundle='alfresco_item' AND node.status= 1 AND created <=" . $to . " AND created>" . $time . " AND field_format_tid=" . $format)->fetch()->$count_attr;
      }
    }else{
      if(empty($format)){
        $return[] = db_query("SELECT COUNT(nid) from node INNER JOIN field_data_field_format ON nid=entity_id where type='alfresco_item' AND bundle='alfresco_item' AND node.status= 1 AND created <=" . $to)->fetch()->$count_attr;
      }else{
        $return[] = db_query("SELECT COUNT(nid) from node INNER JOIN field_data_field_format ON nid=entity_id where type='alfresco_item' AND bundle='alfresco_item' AND node.status= 1 AND created <=" . $to . " AND field_format_tid=" . $format)->fetch()->$count_attr;
      }
    }
  }
  return $return;
}

/*
 * Return nomber of documents, regarding the times, step, format and gid params
 * @params $times
 * @params $step
 * @params $format
 * @params $gid filter
 * Return an array
 */
function gofast_stats_get_space_documents_values($times, $step, $format = NULL, $mode = "evolution", $gid = NULL){
  $return = array();
  $spaces = array_values(gofast_og_get_children($gid, TRUE, FALSE, TRUE));
  $spaces[] = $gid;
  $sql_spaces = implode(",", $spaces);
  foreach($times as $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }
    $count_attr = "COUNT(DISTINCT(etid))";
    if($mode == "periodic"){
      if(empty($format)){
        $return[] = db_query("SELECT COUNT(DISTINCT(etid)) FROM og_membership INNER JOIN node ON etid=nid WHERE field_name='og_group_content_ref' AND node.status=1 AND gid IN (".$sql_spaces.") AND node.type='alfresco_item' AND node.created <=" . $to . " AND node.created >" . $time)->fetch()->$count_attr;
      }else{
        $return[] = db_query("SELECT COUNT(DISTINCT(etid)) FROM og_membership INNER JOIN node ON etid=nid INNER JOIN field_data_field_format ON nid=entity_id WHERE node.status= 1 AND field_format_tid=".$format." AND field_name='og_group_content_ref' AND gid IN (".$sql_spaces.") AND node.type='alfresco_item' AND node.created <=" . $to . " AND node.created >" . $time)->fetch()->$count_attr;
      }
    }else{
      if(empty($format)){
        $return[] = db_query("SELECT COUNT(DISTINCT(etid)) FROM og_membership INNER JOIN node ON etid=nid WHERE  node.status= 1 AND field_name='og_group_content_ref' AND gid IN (".$sql_spaces.") AND node.type='alfresco_item' AND node.created <=" . $to)->fetch()->$count_attr;
      }else{
        $return[] = db_query("SELECT COUNT(DISTINCT(etid)) FROM og_membership INNER JOIN node ON etid=nid INNER JOIN field_data_field_format ON nid=entity_id WHERE node.status= 1 AND field_format_tid=".$format." AND field_name='og_group_content_ref' AND gid IN (".$sql_spaces.") AND node.type='alfresco_item' AND node.created <=" . $to)->fetch()->$count_attr;
      }
    }
  }
  return $return;
}

/*
 * Return nomber of spaces, regarding the times, step and format params
 * @params $times
 * @params $step
 * @params $format
 * Return an array
 */
function gofast_stats_get_spaces_values($times, $step, $type = NULL, $mode = "evolution"){
  $return = array();

  foreach($times as $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }
    $count_attr = "COUNT(nid)";
    if($mode == "periodic"){
      if(empty($type)){
        $return[] = db_query("SELECT COUNT(DISTINCT nid) as 'COUNT(nid)' from node INNER JOIN field_data_field_format ON nid=entity_id where node.status=1 AND type IN('group', 'organisation', 'extranet', 'public', 'private_space') AND created <=:to  AND created >:time", array(":to" => $to, ":time" => $time))->fetch()->$count_attr;
      }else{
        $return[] = db_query("SELECT COUNT(DISTINCT nid) as 'COUNT(nid)' from node INNER JOIN field_data_field_format ON nid=entity_id where node.status=1 AND type=:type AND created <=:to AND created>:time", array(":type" => $type, ":to" => $to, ":time" => $time))->fetch()->$count_attr;
      }
    }else{
      if(empty($type)){
        $return[] = db_query("SELECT COUNT(DISTINCT nid) as 'COUNT(nid)' from node INNER JOIN field_data_field_format ON nid=entity_id where node.status=1 AND type IN('group', 'organisation', 'extranet', 'public', 'private_space') AND created <=:to", array(":to" => $to))->fetch()->$count_attr;
      }else{
        $return[] = db_query("SELECT COUNT(DISTINCT nid) as 'COUNT(nid)' from node INNER JOIN field_data_field_format ON nid=entity_id WHERE node.status=1 AND type=:type AND created <= :to", array(":type" => $type, ":to" => $to))->fetch()->$count_attr;
      }
    }
  }
  return $return;
}

/*
 * Return nomber of new users, regarding the times and the step params
 * @params $times
 * @params $step
 * @params $gid filter
 * Return an array
 */
function gofast_stats_get_active_users_values($times, $step, $gid = NULL, $gids = array()){
  $return = array();
  $array_filter_uids = array();

  if(!empty($gid)){
    $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid=:gid AND (field_name='og_user_node' OR field_name='og_private')", array(":gid" => $gid))->fetchAllAssoc("etid");
    $filter_uids = array_values($filter_uids);
    foreach($filter_uids as $etid){
      $array_filter_uids[] = $etid->etid;
    }
    $sql_filter_uids = "AND uid IN (" . implode(",", $array_filter_uids) . ")";
  }

  if(!empty($gids)){
    if(!empty($gid)){
      $sql_filter_space = "AND etid IN (" . implode(",", $array_filter_uids) . ")";
    }
    $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid IN(".implode(',', $gids).") AND (field_name='og_user_node' OR field_name='og_private') " . $sql_filter_space)->fetchAllAssoc("etid");
    $filter_uids = array_values($filter_uids);
    $array_filter_uids = array();
    foreach($filter_uids as $etid){
      $array_filter_uids[] = $etid->etid;
    }
    $sql_filter_uids = "AND uid IN (" . implode(",", $array_filter_uids) . ")";
  }

  foreach($times as $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }
    $count_attr = "COUNT(DISTINCT(uid))";
    $return[] = db_query("select COUNT(DISTINCT(uid)) from ceo_vision_audit where event_type='login' AND timestamp <=" . $to . " AND timestamp >=" . $time . " " . $sql_filter_uids)->fetch()->$count_attr;
  }
  return $return;
}

/*
 * Fake form for filter input
 */
function gofast_stats_global_filter_users_form($form, &$form_state){
  global $user;
  $gid = $form_state['build_info']['args'][0];
  $role = array_values(gofast_og_get_user_roles($gid, $user->uid))[0];
  $can_download_stats = $role == "administrator member" || gofast_user_is_business_admin($user);
  $apply_button = array(
      'apply' => array(
          '#value' => t('Apply', array(), array('context' => 'gofast:stats')),
          '#type' => 'button',
          '#id' => "users_stats_filter_apply",
          '#attributes' => [
            'class' => ['py-0 input-group-text'],
          ],
      ),
      'download' => $can_download_stats
        ? array(
          '#value' => "<i class='fa fa-file-excel-o'></i>",
          '#type' => 'button',
          '#id' => 'user_export_btn_group_xlsx',
          '#attributes' => array(
              'onClick' => 'event.preventDefault();Gofast.download_users_stats("user_stats")',
              'class' => ['input-group-text'],
          ),
        )
        : array(),
  );

  $attributes_list_filters = [
    'class' => [' form-control-tags js-tagify'],
    'data-node' => '', // show ac node
  ];

    $form['stats_filters'] = array(
    '#title' => t('Filter users statistics by space', array(), array('context' => 'gofast:stats')),
    '#type' => 'textfield',
    '#name' => 'ac-list-tags-list-filters',
    '#description' => t("You can select spaces in the text input to export memberships between users and these spaces", array(), array('context' => "gofast:gofast_stats")),
    '#size' => 99999,
    '#maxlength' => '', // no maxlength
    '#attributes' => $attributes_list_filters,
    '#field_suffix' => drupal_render($apply_button),
    '#input_group' => TRUE
  );

  return $form;
}
