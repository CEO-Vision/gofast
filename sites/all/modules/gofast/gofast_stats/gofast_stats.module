<?php

function gofast_stats_menu() {
  $items = array();
  $items['gofast_stats/list_docs'] = array(
    'page callback' => 'gofast_stats_list_docs',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );
  $items['gofast_stats/dashboard'] = array(
    'page callback' => 'gofast_stats_dashboard_ui',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('access statistics'),
  );
  $items['gofast_stats/global_doc_stats'] = array(
    'page callback' => 'gofast_stats_global_doc_stats_genere_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );
  $items['gofast_stats/space_stats'] = array(
    'page callback' => 'gofast_stats_space_stats_genere_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );

  $items['gofast_stats/global_space_stats'] = array(
    'page callback' => 'gofast_stats_global_space_stats_genere_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );

  $items['gofast_stats/user_stats'] = array(
    'page callback' => 'gofast_stats_user_stats_genere_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array('gofast_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );

  $items['gofast_stats/download/%'] = array(
    'page callback' => 'gofast_stats_retrieve_file',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'access arguments' => array('administer site configuration'),
    'access callback' => 'user_access',
  );

   $items['gofast_stats/space_stats_async'] = array(
    'page callback' => 'gofast_stats_space_stats_async',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

   $items['gofast_stats/space_document_stats_export'] = array(
    'page callback' => 'gofast_stats_space_document_stats_genere_file',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'access callback' => 'user_access',
  );

 return $items;
}

function gofast_stats_cronapi() {
  $items['gofast_stats_cache'] = array(
    'description' => 'Caches stats everyday',
    'rule' => '00 02 * * *', // Every night at 2AM
    'callback' => 'gofast_stats_cache',
    'file' => 'gofast_stats.module'
  );

  return $items;
}

function gofast_stats_get_cachable_stats() {
  return [
    "active_users",
    "new_users",
    "vocabulary",
    "documents_chart",
    "spaces_chart",
    "spaces_activity",
  ];
}

function gofast_stats_set_active_users_cache($available_periods, $available_modes) {
  foreach($available_periods as $period) {
    $times = gofast_stats_get_labels_by_period($period);
    $step = gofast_stats_get_step_by_period($period);
    foreach($times as $time) {
      $to = gofast_stats_get_end_time_by_start_time($step, $time);
      $count_attr = "COUNT(DISTINCT(uid))";
      $result = db_query("select COUNT(DISTINCT(uid)) from ceo_vision_audit where event_type='login' AND timestamp <=" . $to . " AND timestamp >=" . $time)->fetch()->$count_attr;
      $cid = "gofast_stats_get_active_users_values_{$time}";
      cache_set($cid, $result, "cache_gofast_stats", time() + 60*60*24);
    }
  }
}

function gofast_stats_set_new_users_cache($available_periods, $available_modes) {
  $user_types = ["all", "internal", "external"];
  foreach($available_periods as $period) {
    $times = gofast_stats_get_labels_by_period($period);
    $step = gofast_stats_get_step_by_period($period);
    foreach($times as $time) {
      foreach ($available_modes as $mode) {
        foreach($user_types as $user_type) {
          $to = gofast_stats_get_end_time_by_start_time($step, $time);
          $result = gofast_stats_get_new_users_values_query($to, $user_type, $mode, $time);
          $cid = "gofast_stats_get_new_users_values_{$time}_{$mode}_{$user_type}";
          cache_set($cid, $result, "cache_gofast_stats", time() + 60*60*24);
        }
      }
    }
  }
}

function gofast_stats_set_vocabulary_cache($available_periods, $available_modes) {
  $vids = [GOFAST_VID_CATEGORY, GOFAST_VID_STATE, GOFAST_VID_CRITICITY];
  foreach ($vids as $vid) {
    $query = gofast_stats_get_documents_count_query_from_vid($vid);
    $results = $query->execute()->fetchAll();
    $cid = "gofast_stats_get_vocabulary_values_{$vid}";
    cache_set($cid, $results, "cache_gofast_stats", time() + 60*60*24);
  }
}

function gofast_stats_set_documents_chart_cache($available_periods, $available_modes) {

  foreach ($available_periods as $period) {
    $step = gofast_stats_get_step_by_period($period);
    foreach ($available_modes as $mode) {      
      // Set cache for data from all formats
      $times = gofast_stats_get_labels_by_period($period);
      $result = gofast_stats_get_formats_values($times, $step, $mode);
      $cid = "gofast_stats_get_documents_formats_{$period}_{$mode}";
      cache_set($cid, $result, "cache_gofast_stats", time() + 60*60*24);

      // Set cache for all documents count
      $result = gofast_stats_get_documents_values_query($period, $step, null, $mode);
      $cid = "gofast_stats_get_documents_values_{$period}_{$mode}";
      cache_set($cid, $result, "cache_gofast_stats", time() + 60*60*24);
    }
  }
}

function gofast_stats_set_spaces_chart_cache($available_periods, $available_modes) {
  $types = array('group', 'organisation', 'public', 'extranet', 'private_space', NULL);
  foreach($available_periods as $period) {
    $times = gofast_stats_get_labels_by_period($period);
    $step = gofast_stats_get_step_by_period($period);
    foreach ($times as $time) {
      foreach ($available_modes as $mode) {
        foreach ($types as $type) {
          $result = gofast_stats_get_spaces_values_query($time, $step, $type, $mode);
          $cid = "gofast_stats_get_spaces_values_{$time}_{$type}_{$mode}";
          cache_set($cid, $result, "cache_gofast_stats", time() + 60*60*24);
        }
      }
    }
  }
}

function gofast_stats_set_spaces_activity_cache($available_periods, $available_modes) {
  $criterias = array('activity', 'members', 'content');
  $is_full = array(TRUE, FALSE);
  foreach($criterias as $criteria) {
    foreach ($is_full as $full) {
      $result = gofast_api_stats_get_top_spaces_query($criteria, $full);
      $full_string = $full ? "true" : "false";
      $cid = "gofast_stats_get_spaces_activity_values_{$criteria}_{$full_string}";
      cache_set($cid, $result, "cache_gofast_stats", time() + 60*60*24);
    }
  }
}

function gofast_stats_cache() {
  watchdog("gofast_stats", "Run cron for GoFAST stats caching", [], WATCHDOG_INFO);
  $available_periods = ["1week", "1month", "1year", "2year", "3year"];
  $available_modes = ["evolution", "periodic"];
  foreach (gofast_stats_get_cachable_stats() as $cachable_stat) {
    if (function_exists("gofast_stats_set_{$cachable_stat}_cache")) {
      call_user_func_array("gofast_stats_set_{$cachable_stat}_cache", [$available_periods, $available_modes]);
    }
  }
}

function gofast_stats_space_stats_async(){
    $render = theme("gofast_stats_space_dashboard", [
      "gid" => gofast_xss_clean($_POST["currentGid"]),
      "is_user_tab" => isset($_POST['is_user_tab']) ? gofast_xss_clean($_POST["is_user_tab"]) : FALSE,
      "is_document_tab" => isset($_POST['is_document_tab']) ? gofast_xss_clean($_POST["is_document_tab"]) : FALSE,
    ]);

    print $render;
}

/*
 * Return the UI of the global dashboard without data
 */
function gofast_stats_dashboard_ui(){
  $path = drupal_get_path('module', 'gofast_stats');

  $output = "";

  $dashboard = theme('gofast_stats_global_dashboard');
  $output .= $dashboard;
  return $output;
}

function gofast_stats_list_docs($only_form = false){
  drupal_set_title(t("Export documents list"));
  if($only_form) {
    return drupal_get_form("gofast_stats_list_docs_form", TRUE);
  }
  $output = '<div class="container-fluid h-100 py-0" id="kt_content"><div class="gofast-content h-100"><div id="gofastContainer" class="gofast-content--full mainContent fullScreen"><div class="mainContent">';  
  $output .= '<div class="card card-custom GofastForm__CardContainer"><div class="card-body">';  
  $output .= drupal_render(drupal_get_form("gofast_stats_list_docs_form"));  
  $output .= '</div></div></div></div></div></div>';
  return $output;
}

function gofast_stats_list_docs_form($form, &$form_state, $is_ajax = FALSE){
    global $user;
    $myuser = user_load($user->uid);

    $all_groups = gofast_og_get_spaces_by_user($myuser);
    $all_titles = gofast_get_node_title_multiple(array_values($all_groups));
    $i = 0;

    foreach($all_groups as $gid){      
      if(!in_array($gid, array("4","5","6","7"), TRUE)){
        $spaces_options[$gid] = $all_titles[$i];
      }
      
      $i++;
    }
    $form["lists"] = array(
      "#type" => "fieldset",
      "#body_attributes" => array("class" => array("d-flex", "mx-5", "justify-content-center", "flex-wrap")),
    );
   $form["lists"]["og"] = array(
        '#type'=> 'checkboxes',
        '#title' => t("Collaborative space"),
        '#description' => t("Choose one or more collaborative spaces"),
        '#options' => $spaces_options,
        '#multiple' => TRUE,
    );

   $form['date_container'] = array(
    "#type" => "fieldset",
    "#body_attributes" => array("class" => array("mx-20"))
   );
   $form['date_container']['date'] = array(
      '#type' => 'textfield',
      '#title' => t("Date"),
      '#description' => t("Documents created or modified after this date"),
      '#size' => 10,
      '#required'  => FALSE,
      '#attributes' => array("class" => array("gofastDatepicker")),
      '#weight' => 2,
   );

   $fields_options = gofast_stats_get_available_fields_export_excel();

   $form["lists"]["list_fields"] = array(
        '#type'=>'checkboxes',
        '#title' => t("Fields"),
        '#description' => t("Choose fields you want to export into the generated file"),
        '#options' => $fields_options,
        '#multiple' => TRUE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t("Submit"),
      '#attributes' => array("class" => array("d-flex", "mx-auto")),
      '#weight' => 3,
   );
   if ($is_ajax) {
    $form['submit']['#attributes']["onClick"] = "event.preventDefault();Gofast.download_stats('global_doc_stats');";
   } else {
    $form['submit']['#submit'] = array('gofast_stats_list_docs_form_submit');
   }

    return $form;
}

function gofast_stats_list_docs_form_submit($form, &$form_state){
    $a = date_parse_from_format('d/m/Y', $form_state["values"]["date"]);

    $timestamp = mktime(0, 0, 0, $a['month']+1, $a['day'], $a['year']+1900);

    //we add 24h to the timestamp to exclude the selected day
    $timestamp = $timestamp+(1*60*60*24);

    $batch = array(
      'title' => 'Construction de la liste',
      'operations' => array(
        array('gofast_stats_list_genere_file_batch', array($form_state["values"]["og"], $timestamp, $form_state["values"]["list_fields"])),
      ),
      'finished' => 'gofast_stats_list_genere_file_finished',
      'progress_message' => "",
    );
    batch_set($batch);
    // Only needed if not inside a form _submit handler.
    // Setting redirect in batch_process.
    batch_process("node");
}

function gofast_stats_list_genere_file_batch($gids, $date, $list_fields, &$context) {
  $all_nids = gofast_stats_list_get_nids($gids, $date);

  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = count($all_nids);
  }

  $limit = 50;
  $cut_all_nids = array_slice($all_nids,$context['sandbox']['current_node'], $limit, true);
  global $cmis_sudo_admin;
  $cmis_sudo_admin = true;
  $context['results']["params"] = array("gids" => $gids, "date" => $date);
  gofast_stats_list_genere_file_results($cut_all_nids, $list_fields, $context);
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function gofast_stats_list_genere_file_results($nids, $list_fields, &$context = FALSE) {
  $results = [];
  
  $nodes = node_load_multiple($nids, array(), TRUE);
  foreach($nodes as $key => $node){
    if($node->type !== "alfresco_item" && $node->type !== "article"){
      if ($context !== FALSE) {
        $context['sandbox']['progress']++;
        $context['sandbox']['current_node'] = $key+1;
      }
      continue;
    }

    $wrapper = entity_metadata_wrapper("node", $node);

    $array_infos = array();

    //mandatory infos
    $array_infos["nid"]   = $node->nid;
    $array_infos["title"] = $node->title;

    $options = array('absolute' => TRUE);
    $url = url('node/' . $node->nid, $options);
    $array_infos["link"]  = $url;
    //optional infos
    if(in_array("path",$list_fields)){
        $paths = [];
        foreach($node->field_emplacement[LANGUAGE_NONE] as $path){
          $paths[] = $path["value"];
        }
        $paths = '"'.implode('";"', $paths).'"';
        $array_infos["path"] = $paths;
    }
    if(in_array("last_version", $list_fields)){
      $array_infos["last_version"] = $node->field_current_version[LANGUAGE_NONE][0]["value"];
    }
    if(in_array("popularity", $list_fields)){
        $array_infos["popularity"] = $node->field_popularity[LANGUAGE_NONE][0]["radioactivity_energy"];
    }
    if(in_array("views", $list_fields)){
        $array_infos["views"] = isset(nodeviewcountcount_count_node_views($node, NULL, TRUE)[0]) ? nodeviewcountcount_count_node_views($node, NULL, TRUE)[0]->expression : 0;
    }
    if(in_array("state", $list_fields)){
        $state = $wrapper->{'field_state'}->value();
        $array_infos["state"] = $state ? i18n_taxonomy_localize_terms($state)->name : '';
    }
    if(in_array("category", $list_fields)){
        $category = $wrapper->{'field_category'}->value();
        $array_infos["category"] = $category ? i18n_taxonomy_localize_terms($category)->name : '';
    }
    if(in_array("created", $list_fields)){
        $array_infos["created"] = format_date( $node->created, 'custom', "d/m/Y");
    }
    if(in_array("created_by", $list_fields)){
        $creator = user_load($node->uid);
        $array_infos["created_by"] =  $creator->ldap_user_givenname[LANGUAGE_NONE][0]["value"]." ".$creator->ldap_user_sn[LANGUAGE_NONE][0]["value"];
    }
    if(in_array("modified", $list_fields)){
        $array_infos["modified"] = format_date( $node->changed, 'custom', "d/m/Y");
    }
    if(in_array("modified_by", $list_fields)){
        $modifier = user_load($node->revision_uid);
        $array_infos["created_by"] =  $modifier->ldap_user_givenname[LANGUAGE_NONE][0]["value"]." ".$modifier->ldap_user_sn[LANGUAGE_NONE][0]["value"];
    }
    $results[$node->nid] = $array_infos;
    if ($context !== FALSE) {
      $context['results'][$node->nid] = $array_infos;
      $context['sandbox']['progress']++;
      $context['sandbox']['current_node'] = $key+1;
      $context['message'] = $node->title;
    }
  }
  return $results;
}

function gofast_stats_list_genere_file_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural(count($results), 'One post processed.', '@count posts processed.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
  // Providing data for the redirected page is done through $_SESSION.
  gofast_stats_list_genere_file($results);
}

function gofast_stats_space_stats_get_values(){
  $values = array();

  $activity = gofast_api_stats_get_top_spaces(array("params" => array('activity', TRUE)));
  if(!empty($activity['data']['data'])){
      $activity['data'] = $activity['data']['data'];
  }

  foreach($activity['data']['labels'] as $id => $label){
    $values['activity'][$label] = $activity['data']['datasets'][0]['data'][$id];
  }

  $activity = gofast_api_stats_get_top_spaces(array("params" => array('members', TRUE)));
  if(!empty($activity['data']['data'])){
      $activity['data'] = $activity['data']['data'];
  }

  foreach($activity['data']['labels'] as $id => $label){
    $values['members'][$label] = $activity['data']['datasets'][0]['data'][$id];
  }

  $activity = gofast_api_stats_get_top_spaces(array("params" => array('content', TRUE)));
  if(!empty($activity['data']['data'])){
      $activity['data'] = $activity['data']['data'];
  }

  foreach($activity['data']['labels'] as $id => $label){
    $values['content'][$label] = $activity['data']['datasets'][0]['data'][$id];
  }

  return $values;
}

function gofast_stats_global_doc_stats_genere_file(){
  set_time_limit(0);
  $fid = rand(0, getrandmax());
  //Release Apache session
  print $fid;
  fastcgi_finish_request();

  $date = "";
  $gids = [];
  $list_fields = [];

  //Get filters
  if(!empty($_GET['xid'])){
    $filters = json_decode(base64_decode($_GET["xid"]), TRUE);
    if ($filters["date"]) {
      $date = $filters["date"];
    }
    if ($filters["spaces"]) {
      $gids = $filters["spaces"];
    }
    if ($filters["fields"]) {
      $list_fields = $filters["fields"];
    }
  }

  $nids = gofast_stats_list_get_nids($gids, $date);
  $results = gofast_stats_list_genere_file_results($nids, $list_fields);
  $filename = "export_".$fid.".xlsx";
  gofast_stats_list_genere_file($results, $filename);
}

function gofast_stats_space_stats_genere_file(){
  set_time_limit(0);
  /** PHPSpreadSheet */
  require_once libraries_get_path('phpspreadsheet').'/vendor/autoload.php';

  $fid = rand(0, getrandmax());

  //Release Apache session
  print $fid;
  fastcgi_finish_request();
  $filename = "export_".$fid.".xlsx";
  // Create new PHPExcel object
  $objPHPExcel = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
  $objPHPExcel->getActiveSheet()->setTitle(t("Activity", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->addSheet(new PhpOffice\PhpSpreadsheet\Worksheet\Worksheet());
  $objPHPExcel->setActiveSheetIndex(1);
  $objPHPExcel->getActiveSheet()->setTitle(t("Members", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->addSheet(new PhpOffice\PhpSpreadsheet\Worksheet\Worksheet());
  $objPHPExcel->setActiveSheetIndex(2);
  $objPHPExcel->getActiveSheet()->setTitle(t("Content", array(), array('context' => 'gofast_stats')));

  $values = gofast_stats_space_stats_get_values();

  //Activity tab
  $objPHPExcel->setActiveSheetIndex(0);
  $objPHPExcel->getActiveSheet()->SetCellValue('A1', "#");
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Space"));
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Activity", array(), array('context' => 'gofast_stats')));

  $position = 1;

  foreach ($values['activity'] as $title => $activity){
    $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($position+1), $position);
    $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($position+1), $title);
    $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($position+1), $activity);
    $position++;
  }

  //Members tab
  $objPHPExcel->setActiveSheetIndex(1);
  $objPHPExcel->getActiveSheet()->SetCellValue('A1', "#");
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Space"));
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Members", array(), array('context' => 'gofast_stats')));

  $position = 1;

  foreach ($values['members'] as $title => $activity){
    $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($position+1), $position);
    $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($position+1), $title);
    $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($position+1), $activity);
    $position++;
  }

  //Activity tab
  $objPHPExcel->setActiveSheetIndex(2);
  $objPHPExcel->getActiveSheet()->SetCellValue('A1', "#");
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Space"));
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Content", array(), array('context' => 'gofast_stats')));

  $position = 1;

  foreach ($values['content'] as $title => $activity){
    $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($position+1), $position);
    $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($position+1), $title);
    $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($position+1), $activity);
    $position++;
  }

  // Save Excel 2007 file

  $objWriter = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($objPHPExcel);
  $objWriter->save("/var/www/d7/sites/default/files/".$filename);
}

function gofast_stats_global_space_stats_genere_file(){
  set_time_limit(0);
  /** PHPSpreadSheet */
  require_once libraries_get_path('phpspreadsheet').'/vendor/autoload.php';

  $fid = rand(0, getrandmax());

  //Release Apache session
  print $fid;
  fastcgi_finish_request();

  $filename = "export_".$fid.".xlsx";
  // Create new PHPExcel object
  $objPHPExcel = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
  $objPHPExcel->getActiveSheet()->setTitle(t("Spaces", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->addSheet(new PhpOffice\PhpSpreadsheet\Worksheet\Worksheet());

  $objPHPExcel->getActiveSheet()->SetCellValue('A1', "#");
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', "ID");
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Title", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('D1', t("Type", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('E1', t("Path", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('F1', t("Administrators", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('G1', t("Contributors", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('H1', t("Read only", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('I1', t("Total Documents", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('J1', t("Total Enabled Members (Active + Blocked)", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('K1', t("Total Disabled Members", array(), array('context' => 'gofast_stats')));

  //Get root spaces
  $groups = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Groups");
  $organisations = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Organisations");
  $extranet = gofast_ajax_file_browser_get_nid_from_href("/Sites/_Extranet");

  $i = 2;

  //Fetch into root spaces
  foreach(array($groups, $organisations, $extranet) as $root_gid){
      $childrens = gofast_og_get_children($root_gid, TRUE, TRUE, TRUE);

      //Fetch into childrens
      foreach($childrens as $children){
        //Basic informations
        $objPHPExcel->getActiveSheet()->SetCellValue('A' . $i, $i-1);
        $objPHPExcel->getActiveSheet()->SetCellValue('B' . $i, $children->nid);
        $objPHPExcel->getActiveSheet()->SetCellValue('C' . $i, $children->title);
        $objPHPExcel->getActiveSheet()->SetCellValue('D' . $i, ucfirst($children->type));

        //Get path
        $path = gofast_cmis_space_get_webdav_path($children->nid);
        $objPHPExcel->getActiveSheet()->SetCellValue('E' . $i, $path);

        //Get space members
        $members = gofast_og_get_members_userlist_included($children, "active");
        $members_role = array();

        foreach($members as $memberid){
            $role = gofast_og_get_user_final_roles_for_space("node", $children->nid, $memberid);
            $members_role[array_shift($role)][] = gofast_user_get_login($memberid);
        }

        $documents_count_query = gofast_stats_get_all_documents_query($children->nid);
        $documents_count = $documents_count_query->countQuery()->execute()->fetchCol()[0];
        
        $objPHPExcel->getActiveSheet()->SetCellValue('F' . $i, implode(";", (array)$members_role['administrator member']));
        $objPHPExcel->getActiveSheet()->SetCellValue('G' . $i, implode(";", (array)$members_role['group contributor']));
        $objPHPExcel->getActiveSheet()->SetCellValue('H' . $i, implode(";", (array)$members_role['read only member']));
        $objPHPExcel->getActiveSheet()->SetCellValue('I' . $i, $documents_count);
        $objPHPExcel->getActiveSheet()->SetCellValue('J' . $i, count(gofast_stats_get_all_uids_of_spaces($children->nid, "enabled")));
        $objPHPExcel->getActiveSheet()->SetCellValue('K' . $i, count(gofast_stats_get_all_uids_of_spaces($children->nid, "disabled")));
        $i++;
      }
  }

  // Save Excel 2007 file

  $objWriter = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($objPHPExcel);
  $objWriter->save("/var/www/d7/sites/default/files/".$filename);
}

function gofast_stats_get_all_uids_of_spaces($gids, $user_status = "all"){
  $gids = (array) $gids; // Allow (int) value in $gids parameters

  $users_query = gofast_stats_get_all_members_of_spaces_query($gids);
  
  if($user_status === "disabled") {
    // The "COALESCE" is used to merge uid from userlist and uid from space
    $users_query->join("field_data_field_left", "fdfl", "fdfl.entity_id = u.uid");
    $users_query->condition("fdfl.field_left_value", 1, "=");
  } else if($user_status === "enabled") {
    // The "COALESCE" is used to merge uid from userlist and uid from space
    $users_query->join("field_data_field_left", "fdfl", "fdfl.entity_id = u.uid");
    $users_query->condition("fdfl.field_left_value", 0, "=");
  }

  $all_uids = $users_query->execute()
                        ->fetchCol(0); // Column 0 is the uid column
  return $all_uids;
}

/**
 * Returns a query of all members with their membership to space
 * It's possible to give gids to retrieve members of these spaces.
 * This query can be use to add more condition and others stuff (like in gofast_stats_get_all_uids_of_spaces())
 * The query has two field (u.uid and am.gid)
 */
function gofast_stats_get_all_members_of_spaces_query($gids = array()){

  $gids = (array) $gids;

  // Make subquery to link users to space from userlist membership
  $uids_from_space_query = db_select("og_membership", "om");
  $uids_from_space_query->fields("fdfum", array("field_userlist_members_value"));
  $uids_from_space_query->fields("om", array("gid"));
  $uids_from_space_query->join("field_data_field_userlist_members", "fdfum", "fdfum.entity_id = om.etid");
  $uids_from_space_query->condition("om.entity_type", "userlist", "=");

  // Make subquery to get membership of users to space
  $uids_from_userlist_query = db_select("og_membership", "om")
                              ->fields("om", array("etid", "gid"))
                              ->condition("om.field_name", "og_user_node", "=");

  // Union the two subqueries to have all members of each spaces without duplicates
  $all_members = $uids_from_space_query->union($uids_from_userlist_query);
  // Make a query from the union to be able to alter only one query
  $query = db_select($all_members, "am")
            ->fields("u", array("uid"))
            ->fields("am", array("gid"));
  $query->join("users", "u", "u.uid = am.field_userlist_members_value"); // Join users table to be able to use the uid field
  // If one or more gids are given, only fetch users members of these spaces
  if(!empty($gids)){
    $query->condition("am.gid", $gids, "IN");
  }
  return $query;
}

/**
 * Build a database query to retrieve space documents if $gids is given, otherwise retrieve all spaces documents
 */
function gofast_stats_get_all_documents_query($gids = array()) {
  $gids = (array) $gids; // Allow (int) value in $gids parameters
  $all_documents_query = db_select("node", "n")
                    ->fields("om", array("gid"));
  $all_documents_query->innerJoin("og_membership", "om", "om.etid = n.nid");
  $all_documents_query->condition("om.entity_type", "node", "=")
                  ->condition("n.status", 1, "=")
                  ->condition("n.type", ["alfresco_item", "article"], "IN");
  if(!empty($gids)){
    $all_documents_query->condition("om.gid", $gids, "IN");
  }

 return $all_documents_query;
}

/*
 * Generate a userstats excel file
 */
function gofast_stats_user_stats_genere_file(){
  set_time_limit(0);
  /** PHPSpreadSheet */
  require_once libraries_get_path('phpspreadsheet').'/vendor/autoload.php';

  $fid = rand(0, getrandmax());

  //Release Apache session
  print $fid;
  fastcgi_finish_request();
  $filename = "export_".$fid.".xlsx";

  //Get filters
  if(!empty($_GET['xid'])){
    $filters = explode(",", $_GET['xid']);
  }
  // Create new PHPExcel object
  $objPHPExcel = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
  $objPHPExcel->getActiveSheet()->setTitle(t("Users", array(), array('context' => 'gofast_stats')));

  $values = entity_load('user');

  //Users tab
  $objPHPExcel->setActiveSheetIndex(0);
  $objPHPExcel->getActiveSheet()->SetCellValue('A1', t("User ID", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Login", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("E-mail", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('D1', t("First name", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('E1', t("Last name", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('F1', t("Register date", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('G1', t("Last login"));
  $objPHPExcel->getActiveSheet()->SetCellValue('H1', t("Status", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('I1', t(GOFAST_ROLE_SUPER_ADMIN_VALUE, array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('J1', t("Space admin", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('K1', t("Broadcaster", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('L1', t("Extranet", array(), array('context' => 'gofast_stats')));
  $objPHPExcel->getActiveSheet()->SetCellValue('M1', t(GOFAST_ROLE_BUSINESS_ADMIN_VALUE, array(), array('context' => 'gofast:stats')));

  $position = 1;

  foreach ($values as $user){
    if($user->uid == 0 || $user->uid == 1){
        continue;
    }
    if(!$user->access){
        $uaccess = "X";
    }else{
        $uaccess = format_date($user->access, "short");
    }
    $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($position+1), $user->uid);
    $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($position+1), $user->name);
    $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($position+1), $user->mail);
    $objPHPExcel->getActiveSheet()->SetCellValue('D' . ($position+1), $user->ldap_user_givenname[LANGUAGE_NONE][0]['value']);
    $objPHPExcel->getActiveSheet()->SetCellValue('E' . ($position+1), $user->ldap_user_sn[LANGUAGE_NONE][0]['value']);
    $objPHPExcel->getActiveSheet()->SetCellValue('F' . ($position+1), format_date($user->created, "short"));
    $objPHPExcel->getActiveSheet()->SetCellValue('G' . ($position+1), $uaccess);
    $objPHPExcel->getActiveSheet()->SetCellValue('H' . ($position+1), $user->status);
    $objPHPExcel->getActiveSheet()->SetCellValue('I' . ($position+1), gofast_user_is_adm($user));
    $objPHPExcel->getActiveSheet()->SetCellValue('J' . ($position+1), gofast_user_is_manager($user));
    $objPHPExcel->getActiveSheet()->SetCellValue('K' . ($position+1), gofast_user_is_broadcaster($user));
    $objPHPExcel->getActiveSheet()->SetCellValue('L' . ($position+1), gofast_user_is_extranet($user));
    $objPHPExcel->getActiveSheet()->SetCellValue('M' . ($position+1), gofast_user_is_business_admin($user));
    $position++;
  }

  $i = 1;
  foreach($filters as $filter){
      $space = node_load($filter);

      //Add sheet for the space filters
      $objPHPExcel->addSheet(new PhpOffice\PhpSpreadsheet\Worksheet\Worksheet());
      $objPHPExcel->setActiveSheetIndex($i);
      $objPHPExcel->getActiveSheet()->setTitle(substr($space->title, 0, 30));

      //Add first row
      $objPHPExcel->getActiveSheet()->SetCellValue('A1', t("User ID", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Login", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("E-mail", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('D1', t("First name", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('E1', t("Last name", array(), array('context' => 'gofast_stats')));
      $objPHPExcel->getActiveSheet()->SetCellValue('F1', t("Role", array(), array('context' => 'gofast_stats')));

      $members = gofast_og_get_members_userlist_included($space);
      $j = 1;
      foreach($members as $uid){
        $user = user_load($uid);
        if(!$user->status || $user->uid == 0 || $user->uid == 1){
            continue;
        }
        $final_role = array_shift(gofast_og_get_user_final_roles_for_space('node', $space->nid, $uid));
        if(empty($final_role)){
            $final_role = t("Pending", array(), array('context' => "gofast:gofast_stats"));
        }else{
            $final_role = t(ucfirst($final_role), array(), array('context' => "gofast:gofast_stats"));
        }

        //Add members informations
        $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($j+1), $uid);
        $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($j+1), $user->name);
        $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($j+1), $user->mail);
        $objPHPExcel->getActiveSheet()->SetCellValue('D' . ($j+1), $user->ldap_user_givenname[LANGUAGE_NONE][0]['value']);
        $objPHPExcel->getActiveSheet()->SetCellValue('E' . ($j+1), $user->ldap_user_sn[LANGUAGE_NONE][0]['value']);
        $objPHPExcel->getActiveSheet()->SetCellValue('F' . ($j+1), $final_role);
        $j++;
      }
      $i++;
  }

  // Save Excel 2007 file

  $objWriter = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($objPHPExcel);
  $objWriter->save("/var/www/d7/sites/default/files/".$filename);
}

/*
 * Retrieve a stats file by id
 */
function gofast_stats_retrieve_file($fid){
    $filename = "export_".$fid.".xlsx";
    $file = '/var/www/d7/sites/default/files/'.$filename;

    if (file_exists($file)) {
      header('Content-Description: File Transfer');
      header('Content-Type: application/octet-stream');
      header('Content-Disposition: attachment; filename='.basename($file));
      header('Content-Transfer-Encoding: binary');
      header('Expires: 0');
      header('Cache-Control: must-revalidate');
      header('Pragma: public');
      header('Content-Length: ' . filesize($file));
      ob_clean();
      flush();
      readfile($file);
      exit;
    }else{
        print "Waiting";
        exit;
    }
}

function gofast_stats_list_genere_file($results, $filename = FALSE){
    set_time_limit(0);
    /** PHPSpreadSheet */
    require_once libraries_get_path('phpspreadsheet').'/vendor/autoload.php';

    $filename = $filename ? $filename : "liste_documents.xlsx";
    $fields_options = gofast_stats_get_available_fields_export_excel();

    // Create new PHPExcel object
    $objPHPExcel = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
    $objPHPExcel->setActiveSheetIndex(0);
    $objPHPExcel->getActiveSheet()->SetCellValue('A1', "nid");
    $objPHPExcel->getActiveSheet()->SetCellValue('B1', t("Title"));
    $objPHPExcel->getActiveSheet()->SetCellValue('C1', t("Link to document"));

    //add header for each facultative field
    $first_result = array_slice($results, 1, 1);
    $alphabet = range('A', 'Z');
    $i = 3;

    foreach($first_result[0] as $field_name=>$field_value){
        if($field_name == "nid" || $field_name == "title" || $field_name == "link"){
            continue;
        }
       $objPHPExcel->getActiveSheet()->SetCellValue($alphabet[$i].'1', $fields_options[$field_name]);
       $i++;
    }


    //iterate each result to fill the excel file
    $j = 1;
    foreach($results as $nid=>$result){
        if($j == 1){
            $j++;
            continue;
        }
        $k = 0;
        foreach($result as $field_name=>$field_value){
           $objPHPExcel->getActiveSheet()->SetCellValue($alphabet[$k].$j, $field_value);
           $k++;
        }

         $j++;
    }
    // Save Excel 2007 file

    $objWriter = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($objPHPExcel);
    $objWriter->save("/var/www/d7/sites/default/files/".$filename);

    $file = '/var/www/d7/sites/default/files/'.$filename;

    if (file_exists($file)) {
        header('Content-Description: File Transfer');
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename='.basename($file));
        header('Content-Transfer-Encoding: binary');
        header('Expires: 0');
        header('Cache-Control: must-revalidate');
        header('Pragma: public');
        header('Content-Length: ' . filesize($file));
        ob_clean();
        flush();
        readfile($file);
        exit;
    }


}

function gofast_stats_list_get_nids($gids, $date){
    $nids = array();
    $query = db_select("node", "n");
    $query->fields("n", ["nid"]);
    $query->condition("n.changed", $date, ">");
    $query->condition("n.status", 1);
    // always make the join so you get only nodes inside spaces
    $query->innerJoin("og_membership", "o", "n.nid = o.etid");
    $query->condition("o.field_name", "og_group_content_ref");
    if (!empty($gids)) {
      $query->condition("o.gid", $gids, "IN");
    };
    $query->orderBy("n.changed", "DESC");
    $nids = $query->execute()->fetchCol();

    return $nids;
}

function gofast_stats_get_available_fields_export_excel(){
  $fields_options = array("path" => t("Path"), "popularity" => t("Popularity"), "views" => t("Counter views"), "category" => t("Category"),
                           "created" => t("Creation date"), "created_by" => t("Created by"), "modified" => t("Modification date"), "modified_by" => t("Modified by"),
                            "last_version" => t("Current version"));

  return $fields_options;
}

function gofast_stats_theme(){
  return array(
    'gofast_stats_global_dashboard' => array(
      'template'  => 'tpl/global_dashboard',
    ),
      'gofast_stats_global_dashboard_content' => array(
      'template'  => 'tpl/global_dashboard_content',
    ),
    'gofast_stats_space_dashboard' => array(
      'template'  => 'tpl/space_dashboard',
    ),
    'gofast_stats_select_document_fields_modal' => array(
      'template' => 'tpl/gofast-stats-select-document-fields-modal',
    )
  );
}

function gofast_stats_get_end_time_by_start_time($step, $time) {
  if($step == 'day'){
    $to = $time + 86400;
  }else{
    $to = $time + 2679400;
  }
  return $to;
}

function gofast_stats_get_step_by_period($period) {
  if($period == "1week" || $period == "1month"){
    return "day";
  }else{
    return "month";
  }
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_new_users
 * @params
 *    $period : Can be 1week, 1month, 1year, 2year, 3year
 *
 * Return the current gofast version
 */
function gofast_api_stats_get_users_chart($params){
  //Retrieve params
  $params = $params['params'];
  $period = empty($params[0]) ? "1week" : $params[0];
  $gid = empty($params[1]) ? null : $params[1];
  $gids = empty($params[2]) ? array() : $params[2];
  $mode = empty($params[3]) ? "periodic" : $params[3];

  $output = array();

  //Define step between values
  $step = gofast_stats_get_step_by_period($period);

  if(!empty($gid)){
    $label = "members";
  }else{
    $label = "users";
  }

  $values = array(
    'labels' => gofast_format_date_array(gofast_stats_get_labels_by_period($period), 'privatemsg_years'),
    'datasets' => array(
      array(
        'name' => t('New '. $label, array(), array('context' => 'gofast:stats')),
        'data' => call_user_func("gofast_stats_get_new_{$label}_values", gofast_stats_get_labels_by_period($period), $step, $gid, $gids),
      ),
      array(
        'name' => t('Connected ' . $label, array(), array('context' => 'gofast:stats')),
        'data' => gofast_stats_get_active_users_values(gofast_stats_get_labels_by_period($period), $step, $gid, $gids),
      ),
      array(
        'name' => $mode == "periodic" ? t('New internal ' . $label, array(), array('context' => 'gofast:stats')) : t('Active internal ' . $label, array(), array('context' => 'gofast:stats')),
        'data' => call_user_func("gofast_stats_get_new_{$label}_values", gofast_stats_get_labels_by_period($period), $step, $gid, $gids, $mode, "internal"),
      ),
      array(
        'name' => $mode == "periodic" ? t('New extranet ' . $label, array(), array('context' => 'gofast:stats')) : t('Active extranet ' . $label, array(), array('context' => 'gofast:stats')),
        'data' => call_user_func("gofast_stats_get_new_{$label}_values", gofast_stats_get_labels_by_period($period), $step, $gid, $gids, $mode, "external"),
      ),
    ),
  );
  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_top_spaces
 * @params
 *    $criteria
 *
 * Return the 10 top spaces, according to passed criteria
 */
function gofast_api_stats_get_top_spaces($params){
  //Retrieve params
  $params = $params['params'];
  $criteria = empty($params[0]) ? "activity" : $params[0];
  $full = empty($params[1]) ? FALSE : $params[1];

  $full_string = $full ? "true" : "false";
  $cid = "gofast_stats_get_spaces_activity_values_{$criteria}_{$full_string}";
  $return = cache_get($cid, "cache_gofast_stats");
  if ($return) {
    $data = $return->data;
  } else {
    $data = gofast_api_stats_get_top_spaces_query($criteria, $full);
  }

  $values = array(
    'labels' => array_values(gofast_get_node_title_multiple(array_keys($data), array(), TRUE)),
    'datasets' => array(
      array(
        'name' => array(t(ucfirst($criteria), array(), array('context' => 'gofast:stats'))),
        'data' => array_values($data),
      ),
    ),
  );

  return gofast_api_success(array('data' => $values),"200 OK","application/json",null,TRUE);
  }

/*
 * Return the 10 top spaces, according to passed criteria
 */
 function gofast_api_stats_get_top_spaces_query($criteria, $full = FALSE){
  $activities = array();
  if($criteria === "activity"){
    $activity_documents = db_query("select gid,COUNT(gid) from node_revision INNER JOIN og_membership ON og_membership.etid=node_revision.nid where node_revision.timestamp>=:date AND og_membership.field_name='og_group_content_ref' AND gid!=0 group by gid order by COUNT(gid) desc", array(":date" => (time() - 2629746)))->fetchAll();
    $activity_comments = db_query("select gid,COUNT(gid) from comment INNER JOIN og_membership ON og_membership.etid=comment.nid where comment.changed>=:date AND og_membership.field_name='og_group_content_ref' AND gid!=0 group by gid order by COUNT(gid) desc", array(":date" => (time() - 2629746)))->fetchAll();
    
    $count_var = "COUNT(gid)";
    foreach($activity_comments as $activity){
      $activities[$activity->gid] = $activity->$count_var;
    }
    
    foreach($activity_documents as $activity){
      $activities[$activity->gid] = $activities[$activity->gid] + $activity->$count_var;
    }
    
    arsort($activities);
    return $full ? $activities : array_slice($activities, 0, 10, TRUE);
  }else if($criteria == "members"){
    $top_members_query = gofast_stats_get_all_members_of_spaces_query();
    $top_members_query->join("node", "n", "n.nid = am.gid");
    $top_members_query->condition("am.gid", [0, 4, 5, 6, 7], "NOT IN")
                      ->condition("n.type", "public", "!=");
    $top_members_query->addExpression("COUNT(am.gid)", "nb_members");
    $top_members_query->groupBy("am.gid")
                      ->orderBy("nb_members", "desc")
                      ->range(0,10);
    $top_members = $top_members_query->execute()->fetchAll();

    foreach($top_members as $activity){
      $activities[$activity->gid] = $activities[$activity->gid] + $activity->nb_members;
    }
    
    arsort($activities);
    return $full ? $activities : array_slice($activities, 0, 10, TRUE);
  }elseif($criteria == "content"){
    $top_documents_count_query = gofast_stats_get_all_documents_query();
    $top_documents_count_query->addExpression("COUNT(om.gid)", "documents_count");
    $top_documents_count_query->condition("om.gid", 0, "!=")
                              ->groupBy("om.gid")->orderBy("documents_count", "desc");
    if(!$full){
      $top_documents_count_query->range(0, 10);
    }
    $top_documents = $top_documents_count_query->execute()->fetchAll();

    foreach($top_documents as $top_document){
      $activities[$top_document->gid] = (int)$top_document->documents_count;
    }

    return $activities;
  }
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_documents_chart
 * @params
 *    $period : Can be 1week, 1month, 1year, 2year, 3year
 *    $mode : Evolution or Periodic
 *    $gid : Filter by group ID
 *
 * Return the current gofast version
 */
function gofast_api_stats_get_documents_chart($params){
  //Retrieve params
  $params = $params['params'];
  $period = empty($params[0]) ? "1week" : $params[0];
  $mode = empty($params[1]) ? "evolution" : $params[1];
  $gid = empty($params[2]) ? NULL : $params[2];
  $scope = empty($params[3]) ? "all" : $params[3];

  //Define step between values
  $step = gofast_stats_get_step_by_period($period);
  $times = gofast_stats_get_labels_by_period($period);

  if(isset($gid) && $gid != "false"){
    $funct = "gofast_stats_get_space_documents_values";
    $space_document_data = array();
    if($scope === "all") {
      $space_document_data = array(
        'name' => t('Total Documents', array(), array('context' => 'gofast:stats')),
        'data' => call_user_func($funct, $times, $step, NULL, $mode, $gid, "space_and_children"),
      );
    } else if($scope === "space_only"){
      $space_document_data = array(
        'name' => t('Documents in this space', array(), array('context' => 'gofast:stats')),
        'data' => call_user_func($funct, $times, $step, NULL, $mode, $gid, "space_only"),
      );
    }
    $values = array(
      'labels' => gofast_format_date_array($times, 'privatemsg_years'),
      'datasets' => array(
        $space_document_data
      ),
    );
    
  }else{
    $funct = "gofast_stats_get_documents_values";
    $values = array(
      'labels' => gofast_format_date_array(gofast_stats_get_labels_by_period($period), 'privatemsg_years'),
      'datasets' => array(
        array(
          'name' => t('Documents', array(), array('context' => 'gofast:stats')),
          'data' => call_user_func($funct, $period, $step, $mode, $gid), // make it possible to have a single cache for the whole period (to make the retrieval from cache a lot faster)
        ),
      ),
    );
  }
  $return = null;
  if($gid == null || $gid == "false"){
    $cid = "gofast_stats_get_documents_formats_{$period}_{$mode}";
    $return = cache_get($cid, "cache_gofast_stats");
  }
  if(!empty($return->data)){
    $datas = $return->data;
  } else {
    $datas = gofast_stats_get_formats_values($times, $step, $mode, $gid, $scope);
  }
  foreach($datas as $name => $data){
    $values['datasets'][] = array(
      "name" => t($name, array(), array('context' => 'gofast')),
      "data" => $data,
    );
  }
  
  if($scope === "all"){
    $sub_spaces = gofast_og_get_children($gid);
    if(empty($sub_spaces)){
      $values['has_subspaces'] = FALSE;
    }
  }
  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_spaces_chart
 * @params
 *    $period : Can be 1week, 1month, 1year, 2year, 3year
 *    $mode : Evolution or Periodic
 *
 * Return the current gofast version
 */
function gofast_api_stats_get_spaces_chart($params){
  //Retrieve params
  $params = $params['params'];
  $period = empty($params[0]) ? "1week" : $params[0];
  $mode = empty($params[1]) ? "evolution" : $params[1];

  $output = array();

  //Define step between values
  $step = gofast_stats_get_step_by_period($period);

  $values = array(
    'labels' => gofast_format_date_array(gofast_stats_get_labels_by_period($period), 'privatemsg_years'),
    'datasets' => array(
      array(
        'name' => t('Spaces', array(), array('context' => 'gofast:stats')),
        'data' => gofast_stats_get_spaces_values(gofast_stats_get_labels_by_period($period), $step, NULL, $mode),
      ),
    ),
  );

  $types = array('group', 'organisation', 'public', 'extranet', 'private_space');

  foreach($types as $type){
    $data = gofast_stats_get_spaces_values(gofast_stats_get_labels_by_period($period), $step, $type, $mode);
    $display = FALSE;
    foreach ($data as $value){
      if($value != 0){
        $display = TRUE;
      }
    }
    if($display === TRUE){
      switch($type){
        case 'group':
          $label = "Groups";
          break;
        case 'organisation':
          $label = "Organisations";
          break;
        case 'public':
          $label = "Public spaces";
          break;
        case 'extranet':
          $label = "Extranet spaces";
          break;
        case 'private_space':
          $label = "Personal spaces";
          break;
      }
      $values['datasets'][] = array(
        'name' => t($label, array(), array('context' => 'gofast:stats')),
        'data' => $data,
      );
    }
  }

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_state
 * @param gid filter
 *
 * Provide informations about the states of the users
 */
function gofast_api_stats_get_users_doughnut_state($params){
  //Retrieve params
  $params = $params['params'];
  $gid = empty($params[0]) ? NULL : $params[0];
  $gids = empty($params[1]) ? array() : $params[1];

  $space_filter_uids = null;
  if(!empty($gid)){
    $label = "members";
  }else{
    $label = "users";
  }

  if(!empty($gids)){
    $space_filter_uids = gofast_stats_get_all_uids_of_spaces($gids);
  } else if(!empty($gid)){
    $space_filter_uids = gofast_stats_get_all_uids_of_spaces($gid);
  }

  $users_query = db_select("users", "u")
                    ->fields("u",(array("uid")));
  if($space_filter_uids != null){
    $users_query->condition("uid", $space_filter_uids, "IN");
  }

  $allowed_users = clone $users_query;
  $allowed_users = $allowed_users->condition("u.status", 1, "=")
                                  ->execute()
                                  ->rowCount();

  $users_activity_query = clone $users_query;
  $users_activity_query->leftJoin("field_data_field_left", "fdfl", "u.uid = fdfl.entity_id");
  $users_activity_query->condition("u.status", 0, "=")
                        ->condition("u.uid", 1, ">");

  $blocked_users = clone $users_activity_query;
  $blocked_users = $blocked_users->condition("fdfl.field_left_value", 1, "!=")
                                  ->execute()
                                  ->rowCount();

  $disabled_users = clone $users_activity_query;
  $disabled_users = $disabled_users->condition("fdfl.field_left_value", 1, "=")
                                    ->execute()
                                    ->rowCount();

  $values = array(
    'labels' => array(t("Allowed ".$label, array(), array('context' => 'gofast:stats')), t("Blocked ".$label, array(), array('context' => 'gofast:stats')), t("Disabled ".$label, array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
        'data' => array(intval($allowed_users), intval($blocked_users), intval($disabled_users)),
    ),

  );

  gofast_api_success(array('data' => $values));
}

/**
 * Return the number of documents in all given spaces with the good metadata vid
 */
function gofast_stats_get_documents_count_query_from_vid($vid, $gids = array()){
  // Fetch the vocabulary name of the vid
  $vocabulary_name = db_select("taxonomy_vocabulary", "tv")
                      ->fields("tv", array("machine_name"))
                      ->condition("tv.vid", $vid, "=")
                      ->execute()
                      ->fetchCol()[0];
  /** 
   * Make query to get an array of [taxonomy name => documents count] for the given vocabulary name
   * (e.g. ["Validated" => 10, "Archived" => 1])
   */
  $query = db_select("field_data_field_{$vocabulary_name}", "fdfv")
            ->fields("ttd", array("name"));
  $query->join("taxonomy_term_data", "ttd", "ttd.tid = fdfv.field_{$vocabulary_name}_tid");
  $query->join("node", "n", "n.nid = fdfv.entity_id");
  $query->addExpression("COUNT(fdfv.field_{$vocabulary_name}_tid)", "documents_count");
  $query->condition("ttd.vid", $vid, "=")
          ->condition("n.status", 1, "=");

  // If there are no gids, retrieve data from all documents, otherwise retrieve only documents in these spaces
  if(!empty($gids)){
    $query->join("og_membership", "om", "om.etid = fdfv.entity_id");
    $query->condition("om.gid", $gids, "IN")
            ->condition("om.entity_type", "node", "=");
  }
  $query->groupBy("ttd.name");
  return $query;
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_category
 * @param gid : filter
 *
 * Provide informations about the category metadata
 */
function gofast_api_stats_get_category($params){
  $values = gofast_stats_get_documents_metadata_chart_values($params, GOFAST_VID_CATEGORY);
  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_criticity
 * @params gid : filter
 *
 * Provide informations about the criticity metadata
 */
function gofast_api_stats_get_criticity($params){
  $values = gofast_stats_get_documents_metadata_chart_values($params, GOFAST_VID_CRITICITY);
  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_state
 * @params : gid filter
 *
 * Provide informations about the state metadata
 */
function gofast_api_stats_get_state($params){
  $values = gofast_stats_get_documents_metadata_chart_values($params, GOFAST_VID_STATE);
  gofast_api_success(array('data' => $values));
}

/**
 * Returns an array containing the metadata labels and their number of documents.
 */
function gofast_stats_get_documents_metadata_chart_values($params, $vid) {
  //Retrieve params
  $params = $params['params'];
  $gid = empty($params[0]) ? NULL : $params[0];
  $scope = empty($params[1]) ? "all" : $params[1];

  $labels = array();
  $datav = array();
  
  $sql_spaces = array();
  if(isset($gid) && $gid != "false"){
    if($scope === "space_only") {
      $sql_spaces[] = $gid;
    } else if($scope === "all") {
      $sql_spaces = array_values(gofast_og_get_children($gid, TRUE, FALSE, TRUE));
      $sql_spaces[] = $gid;
    }
  }

  //Get cache (only available in global stats)
  $results = [];
  if (empty($sql_spaces)) {
    $cid = "gofast_stats_get_vocabulary_values_{$vid}";
    $return = cache_get($cid, "cache_gofast_stats");
    if ($return) {
      $results = $return->data;
    }
  }
  if (empty($results)) {
    $query = gofast_stats_get_documents_count_query_from_vid($vid, $sql_spaces);
    $results = $query->execute()->fetchAll();
  }

  $total = 0;
  foreach($results as $result){
    $labels[] = $result->name;
    $datav[] = intval($result->documents_count);
    $total += intval($result->documents_count);
  }

  if(empty($datav)){
    $datav[] = 0;
    $total = 0;
    $labels[] = "N/A";
  }
  //Associate values with percentages
  foreach($datav as &$val){
    if($val == 0){
      $percentage_associations = 0;
    } else {
      $percentage_associations[intval(($val/$total)*100)] = $val;
      $val = (intval($val/$total*100));
    }
  }
  $total_label = "TOTAL";
  // If there is only one data, change the "TOTAL" label to the data label
  if($datav[0] === 100){
    $total_label = $labels[0];
  }
  $values = array(
    'labels' => $labels,
    'datasets' => array(
        'data'  => $datav,
        'percentage' => $percentage_associations,
        'total_label' => $total_label
    ),
  );

  return $values;
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_storage
 *
 * Provide informations about the current storage of the machine
 */
function gofast_api_stats_get_documents_storage(){
  $free_storage = disk_free_space("/var/alfresco");
  $used_storage = (disk_total_space("/var/alfresco") - $free_storage);

  $formated_free_storage = formatBytes($free_storage);
  $formated_used_storage = formatBytes($used_storage);

  $values = array(
    'labels' => array(t("Free hard storage", array(), array('context' => 'gofast:stats')) . " (" . $formated_free_storage['unit'] . ")", t("Used hard storage", array(), array('context' => 'gofast:stats')) . " (" . $formated_used_storage['unit'] . ")"),
    'datasets' => array(
      'data' => array($free_storage, $used_storage),
    ),
  );

  gofast_api_success(array('data' => $values));
}

function formatBytes($bytes, $precision = 2) {
  $units = array('B', 'KB', 'MB', 'GB', 'TB');

  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);




  // Uncomment one of the following alternatives
  $bytes /= pow(1024, $pow);
  // $bytes /= (1 << (10 * $pow));

  $result = round($bytes, $precision);

  return array('result' => $result, 'unit' => $units[$pow]);
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_storage
 *
 * Provide informations about the current indexation
 */
function gofast_api_stats_get_documents_indexation(){
  require_once drupal_get_path('module', 'gofast_search') . '/gofast_search.admin.inc';
  $output = array();

  $stats = gofast_search_get_stats(GOFAST_SEARCH_ENV_ID, TRUE);

  $pending = $stats['pending'] + $stats['queued'];
  $not_indexed = count(variable_get('gofast_search_index_node_exclude', array()));
  $not_tika = count(variable_get('gofast_search_tika_node_exclude', array()));
  $indexed = $stats['indexed'];

  $values = array(
    'labels' => array(t("Indexed documents", array(), array('context' => 'gofast:stats')), t("Pending for indexation", array(), array('context' => 'gofast:stats')), t("Not indexed", array(), array('context' => 'gofast:stats')), t("Only metadata indexed", array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
        'data'  => array($indexed, $pending, $not_indexed, $not_tika),
    ),

  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_active
 * @params gid filter
 *
 * Provide informations about the activity of the users (# of active/inactive)
 */
function gofast_api_stats_get_users_doughnut_active($params){
  //Retrieve params
  $params = $params['params'];
  $gid = empty($params[0]) ? NULL : $params[0];
  $gids = empty($params[1]) ? array() : $params[1];

  if(!empty($gid)){
    $label = "members";
  }else{
    $label = "users";
  }

  if(!empty($gids)){
    $space_filter_uids = gofast_stats_get_all_uids_of_spaces($gids);
  } else if(!empty($gid)) {
    $space_filter_uids = gofast_stats_get_all_uids_of_spaces($gid);
  }

  $inactivity_time = 7889236; // Inactivity time is 3 month

  $users_query = db_select("users", "u")
                  ->fields("u", array("uid"));

  if($space_filter_uids != null) {
    $users_query->condition("u.uid", $space_filter_uids, "IN");
  }
  $active_users = clone $users_query;
  $active_users = $active_users->condition("u.login", time() - $inactivity_time, ">")
                                ->execute()
                                ->rowCount();

  $inactive_users = clone $users_query;
  $inactive_users = $inactive_users->condition("u.login", time() - $inactivity_time, "<=")
                                    ->execute()
                                    ->rowCount();

  $values = array(
    'labels' => array(t("Active ".$label, array(), array('context' => 'gofast:stats')), t("Inactive ".$label, array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
      'data' => array(intval($active_users), intval($inactive_users)),
    ),
  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_users_doughnut_roles
 *
 * Provide informations about the roles and permissions of the users
 */
function gofast_api_stats_get_users_doughnut_roles($params){

  $params = $params['params'];
  $gids = empty($params[0]) ? array() : $params[0];

  $all_spaces_uids = null;
  if(!empty($gids)){
    $all_spaces_uids = gofast_stats_get_all_uids_of_spaces($gids);
  }
  
  $users_roles_query = db_select("users_roles", "ur")
    ->fields("ur", array("uid"));
  $users_roles_query->join("role", 'r', 'r.rid = ur.rid');

  $broadcaster = db_select("field_data_is_broadcaster", "fdib")
                  ->fields("fdib", array("entity_id"))
                  ->condition("fdib.is_broadcaster_value", 1, "=");

  $extranet = db_select("field_data_is_extranet", "fdie")
                ->fields("fdie", array("entity_id"))
                ->condition("fdie.is_extranet_value", 1, "=");
  
  $platform_admin = clone $users_roles_query;
  $manager = clone $users_roles_query;
  $business_admin = clone $users_roles_query;
  
  if($all_spaces_uids != null) {
    $platform_admin->condition("ur.uid", $all_spaces_uids, "IN");
    $manager->condition("ur.uid", $all_spaces_uids, "IN");
    $broadcaster->condition("fdib.entity_id", $all_spaces_uids, "IN");
    $extranet->condition("fdie.entity_id", $all_spaces_uids, "IN");
    $business_admin->condition("ur.uid", $all_spaces_uids, "IN");
  }

  $platform_admin = $platform_admin->condition("r.name", "administrator", "=")->countQuery()->execute()->fetchField();
  $manager = $manager->condition("r.name", "manager", "=")->countQuery()->execute()->fetchField();
  $business_admin = $business_admin->condition("r.name", "business administrator", "=")->countQuery()->execute()->fetchField();
  $broadcaster = $broadcaster->countQuery()->execute()->fetchField();
  $extranet = $extranet->countQuery()->execute()->fetchField();

  $values = array(
    'labels' => array(t("Admins", array(), array('context' => 'gofast:stats')), t("Space admins", array(), array('context' => 'gofast:stats')), t(GOFAST_ROLE_BUSINESS_ADMIN_VALUE, array(), array("context" => "gofast:stats")), t("Broadcasters", array(), array('context' => 'gofast:stats')), t("Extranet", array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
      array(
        'data'  => array($platform_admin, $manager, $business_admin, $broadcaster, $extranet),
      ),
    ),
  );

  gofast_api_success(array('data' => $values));
}

/*
 * Implements API gofast_api_RESSOURCE_ACTION
 * @ressource stats
 * @action get_members_doughnut_roles
 * @params gid filter
 *
 * Provide informations about the roles of the users in a space
 */
function gofast_api_stats_get_members_doughnut_roles($params){
  //Retrieve params
  $params = $params['params'];
  $gid = $params[0];

  $output = array();
  $admins = 0;
  $contribs = 0;
  $ro = 0;
  $requesters = 0;

  $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid=".$gid." AND (field_name='og_user_node' OR field_name='og_private')")->fetchAllAssoc("etid");
  $filter_uids = array_values($filter_uids);
  foreach($filter_uids as $etid){
    $array_filter_uids[] = $etid->etid;
  }

  foreach($array_filter_uids as $uid){
    $role = array_values(gofast_og_get_user_roles($gid, $uid));
    $role = $role[0];
    if($role == "administrator member"){
      $admins++;
    }else if($role == "group contributor"){
      $contribs++;
    }else if($role == "read only member"){
      $ro++;
    }else{
      $requesters++;
    }
  }
  $values = array(
    'labels' => array(t("Administrators", array(), array('context' => 'gofast:stats')), t("Contributors", array(), array('context' => 'gofast:stats')), t("Read only", array(), array('context' => 'gofast:stats')), t("Requesters", array(), array('context' => 'gofast:stats'))),
    'datasets' => array(
      array(
        'data' => array($admins, $contribs, $ro, $requesters),
        'backgroundColor' => array('rgba(255,99,132, 0.2)', 'rgba(255,206,86,0.2)', 'rgba(153,102,255,0.2)', 'rgba(54,162,235,0.2)'),
        'borderColor' => array('rgba(255, 99, 132, 1)', 'rgba(255,206,86,1)', 'rgba(153,102,255,1)', 'rgba(54,162,235,1)'),
        'borderWidth' => 1,
      ),
    ),

  );

  gofast_api_success(array('data' => $values));
}

/*
 * Return labels, regarding the passed period
 * @params $period
 * Return an array
 */
function gofast_stats_get_labels_by_period($period){
  // especially for caching to work, it is important to ensure the returned labels contain the same timestamp, whaever the user timezone
  $previous_timezone = date_default_timezone_get();
  date_default_timezone_set('UTC');
  switch ($period){
    case '1week' :
      $return = gofast_time_range(strtotime('today midnight -1 week +1 day'), strtotime('today midnight'), "+1 day");
      break;
    case '1month' :
      $return = gofast_time_range(strtotime('today midnight -1 month +1 day'), strtotime('today midnight'), "+1 day");
      break;
    case '1year' :
      $return = gofast_time_range(strtotime('first day of midnight -1 year +1 day'), strtotime('first day of midnight'), "+1 month");
      break;
    case '2year' :
      $return = gofast_time_range(strtotime('first day of midnight -2 year +1 day'), strtotime('first day of midnight'), "+1 month");
      break;
    case '3year' :
      $return = gofast_time_range(strtotime('first day of midnight -3 year +1 day'), strtotime('first day of midnight'), "+1 month");
      break;
    default:
      break;
  }
  date_default_timezone_set($previous_timezone);
  return $return;
}

/*
 * Return nomber of repeat, regarding the passed period
 * @params $period
 * Return an array
 */
function gofast_stats_get_repeat_by_period($period){
  switch ($period){
    case '1week' :
      $return = 8;
      break;
    case '1month' :
      $return = 32;
      break;
    case '1year' :
      $return = 366;
      break;
    case '2year' :
      $return = 366*2;
      break;
    case '3year' :
      $return = 366*3;
      break;
    default:
      break;
  }

  return $return;
}

function gofast_stats_get_new_users_values_query($to, $user_type, $mode, $time, $all_spaces_uids = null) {
  $query = db_select("users", "u");
  $query->condition("u.created", $to, "<=");
  if($all_spaces_uids != null){
    $query->condition("u.uid", $all_spaces_uids, "IN");
  }
  if($user_type === "external" || $user_type === "internal"){
    $query->innerJoin("field_data_is_extranet", "fdie", "fdie.entity_id = u.uid");
    if($user_type === "external"){
      $query->condition("is_extranet_value", 1, "=");
    } else {
      $query->condition("is_extranet_value", 0, "=");
    }
  }
  
  if($mode === "periodic") {
    $query->condition("u.created", $time, ">=");
  }
  return $query->countQuery()
              ->execute()
              ->fetchField();
}

/*
 * Return nomber of new users, regarding the times and the step params
 * @params $times
 * @params $step
 * Return an array
 */
function gofast_stats_get_new_users_values($times, $step, $gid = NULL, $gids=array(), $mode = "periodic", $user_type = "all"){
  $return = array();

  foreach($times as $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }
    
    $all_spaces_uids = null;
    if(!empty($gids)){
      $all_spaces_uids = gofast_stats_get_all_uids_of_spaces($gids);
    } else if($gid != null){
      $all_spaces_uids = gofast_stats_get_all_uids_of_spaces($gid);
    }

    $data = FALSE;
    // get cached value if any (only available for platform stats)
    if(empty($gids)) {
      $cid = "gofast_stats_get_new_users_values_{$time}_{$mode}_{$user_type}";
      $data = cache_get($cid,"cache_gofast_stats")->data ?? FALSE;
    }
    if($data !== FALSE) {
      $return[] = $data;
      continue;
    }
    $return[] = gofast_stats_get_new_users_values_query($to, $user_type, $mode, $time, $all_spaces_uids);
    

  }
  return $return;
}

/*
 * Return nomber of new users, regarding the times and the step params
 * @params $times
 * @params $step
 * @params $gid filter
 * Return an array
 */
function gofast_stats_get_new_members_values($times, $step, $gid, $gids = array(), $mode = "periodic", $user_type = "all"){
  $return = array();

  foreach($times as $time){
    $to = gofast_stats_get_end_time_by_start_time($step, $time);

    if(!empty($gids)){
      $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid IN(".implode(',', $gids).") AND (field_name='og_user_node' OR field_name='og_private')")->fetchAllAssoc("etid");
      $filter_uids = array_values($filter_uids);
      $array_filter_uids = array();
      foreach($filter_uids as $etid){
        $array_filter_uids[] = $etid->etid;
      }
      $sql_filter_uids = "AND etid IN (" . implode(",", $array_filter_uids) . ")";
    }

    $count_attr = "COUNT(etid)";
    $return[] = db_query("SELECT COUNT(etid) FROM og_membership where (field_name='og_user_node' OR field_name='og_private') AND gid=".$gid." AND created <=" . $to . " AND created >=" . $time . " " . $sql_filter_uids)->fetch()->$count_attr;
  }
  return $return;
}

/**
 * Query to get the number of documents
 */
function gofast_stats_get_documents_values_query($period, $step, $format = NULL, $mode = "evolution") {
  $return = array();
  $times = gofast_stats_get_labels_by_period($period);
  foreach($times as $time){
    $to = gofast_stats_get_end_time_by_start_time($step, $time);
    $query = db_select("node", "n");
    $query->join("field_data_field_format", "fdff", "fdff.entity_id = n.nid");
    $query->condition("n.status", 1, "=")
      ->condition("n.type", ["alfresco_item", "article"], "IN")
      ->condition("n.created", $to, "<=");
    if(!empty($format)){
      $query->condition("fdff.field_format_tid", $format, "=");
    }
    if($mode == "periodic"){
      $query->condition("n.created", $time, ">");
    }
    $return[] = $query->countQuery()->execute()->fetchCol()[0];
  }
  return $return;
}

/*
 * Return nomber of documents, regarding the period and step params
 * Use cache if available, otherwise make a query
 * @params $period
 * @params $step
 * @params $format
 * Return an array
 */
function gofast_stats_get_documents_values($period, $step, $mode = "evolution"){
  $cid = "gofast_stats_get_documents_values_{$period}_{$mode}";
  $return = cache_get($cid, "cache_gofast_stats");
  if ($return) {
    $return = $return->data;
  } else {
    $return = gofast_stats_get_documents_values_query($period, $step, null, $mode);
  }
  return $return;
}

/*
 * Return nomber of documents, regarding the period, step, format and gid params
 * @params $period
 * @params $step
 * @params $format
 * @params $gid filter
 * Return an array
 */
function gofast_stats_get_space_documents_values($times, $step, $format = NULL, $mode = "evolution", $gid = NULL, $scope = 'space_only'){
  $return = array();
  $spaces = array_values(gofast_og_get_children($gid, TRUE, FALSE, TRUE));
  $spaces[] = $gid;
  foreach($times as $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }
    $query = db_select("og_membership", "om")
              ->distinct()
              ->fields("om", array("etid"));
    $query->join("node", "n", "n.nid = om.etid");

    if($format !== null){
      $query->join("field_data_field_format", "fdff", "fdff.entity_id = n.nid");
      $query->condition("fdff.field_format_tid", $format, "=")
              ->condition("fdff.entity_type", "node", "=");
    }
    if($mode === "periodic") {
      $query->condition("n.created", $time, ">");
    }
    if($scope === "space_only") {
      $query->condition("om.gid", $gid, "=");
    } else {
      $query->condition("om.gid", $spaces, "IN");
    }

    $query->condition("n.status", 1, "=")
            ->condition("field_name", "og_group_content_ref", "=")
            ->condition("n.type", ["alfresco_item", "article"], "IN")
            ->condition("n.created", $to, "<=");

    $return[] = $query->execute()->rowCount();
  }
  return $return;
}

/*
 * Return the number of documents for each formats, regarding the times, step, gid and scope params
 * @params $times
 * @params $step
 * @params $gid
 * @params $scope
 * Return an array
 */
function gofast_stats_get_formats_values($times, $step, $mode, $gid = null, $scope = "all"){

  $datas = [];
  $terms = taxonomy_get_tree(GOFAST_VID_FORMAT);
  $terms_names = array_map(function($term){
    return $term->name;
  }, $terms);
  // Make an empty array with all formats names as key
  $datas = array_fill_keys($terms_names, []);
  // Loop through each timestamp to get document count for the date
  foreach($times as $index => $time){
    if($step == 'day'){
      $to = $time + 86400;
    }else{
      $to = $time + 2679400;
    }
    $gids = [];
    // If $gid is equal to "false" we want to get all spaces of the plateform
    if($gid != "false" && !empty($gid)){
      $gids[] = $gid;
      // Also get children spaces
      if($scope === "all"){
        $gids = array_merge($gids, array_values(gofast_og_get_children($gid, TRUE, FALSE, TRUE)));
      }
    }
    $query = gofast_stats_get_documents_count_query_from_vid(GOFAST_VID_FORMAT, $gids);
    if($mode === "periodic") {
      $query->condition("n.created", $time, ">");
    }
    if($gid != "false" && !empty($gid)){
      $query->condition("field_name", "og_group_content_ref", "=");
    }
    $query->condition("n.type", ["alfresco_item", "article"], "IN")
          ->condition("n.created", $to, "<=");
    $results = $query->execute()->fetchAll();
    
    // Add document count to the array related to the format name
    foreach($results as $result){
      $datas[$result->name][$index] = $result->documents_count;
    }
    
    // If there is no document with a specific format we still want to set count to 0
    foreach($datas as &$data){
      if(!isset($data[$index])){
        $data[$index] = 0;
      }
    }
  }
  
  foreach($datas as $name => &$data){
    // If a format have only 0 at all times, don't return it
    $is_empty = empty(array_filter($data, function($document_count){
      return $document_count != 0;
    }));
    if($is_empty){
      unset($datas[$name]);
    }
  }
  return $datas;
}

function gofast_stats_get_spaces_values_query($time, $step, $type, $mode) {
  $to = gofast_stats_get_end_time_by_start_time($step, $time);
  $count_attr = "COUNT(nid)";
  $result = 0;
  if($mode == "periodic"){
    if(empty($type)){
      $result = db_query("SELECT COUNT(DISTINCT nid) as 'COUNT(nid)' from node INNER JOIN field_data_field_format ON nid=entity_id where node.status=1 AND type IN('group', 'organisation', 'extranet', 'public', 'private_space') AND created <=:to  AND created >:time", array(":to" => $to, ":time" => $time))->fetch()->$count_attr;
    }else{
      $result = db_query("SELECT COUNT(DISTINCT nid) as 'COUNT(nid)' from node INNER JOIN field_data_field_format ON nid=entity_id where node.status=1 AND type=:type AND created <=:to AND created>:time", array(":type" => $type, ":to" => $to, ":time" => $time))->fetch()->$count_attr;
    }
  }else{
    if(empty($type)){
      $result = db_query("SELECT COUNT(DISTINCT nid) as 'COUNT(nid)' from node INNER JOIN field_data_field_format ON nid=entity_id where node.status=1 AND type IN('group', 'organisation', 'extranet', 'public', 'private_space') AND created <=:to", array(":to" => $to))->fetch()->$count_attr;
    }else{
      $result = db_query("SELECT COUNT(DISTINCT nid) as 'COUNT(nid)' from node INNER JOIN field_data_field_format ON nid=entity_id WHERE node.status=1 AND type=:type AND created <= :to", array(":type" => $type, ":to" => $to))->fetch()->$count_attr;
    }
  }
  return $result;
}

/*
 * Return nomber of spaces, regarding the times, step and format params
 * @params $times
 * @params $step
 * @params $format
 * Return an array
 */
function gofast_stats_get_spaces_values($times, $step, $type = NULL, $mode = "evolution"){
  $return = array();

  foreach($times as $time){
    $cid = "gofast_stats_get_spaces_values_{$time}_{$type}_{$mode}";
    $data = cache_get($cid, "cache_gofast_stats");
    if ($data) {
      $data = $data->data;
    } else {
      $data = gofast_stats_get_spaces_values_query($time, $step, $type, $mode);
    }
    $return[] = $data;
  }
  return $return;
}

/*
 * Return nomber of new users, regarding the times and the step params
 * @params $times
 * @params $step
 * @params $gid filter
 * Return an array
 */
function gofast_stats_get_active_users_values($times, $step, $gid = NULL, $gids = array()){
  $return = array();
  $array_filter_uids = array();

  if(!empty($gid)){
    $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid=:gid AND (field_name='og_user_node' OR field_name='og_private')", array(":gid" => $gid))->fetchAllAssoc("etid");
    $filter_uids = array_values($filter_uids);
    foreach($filter_uids as $etid){
      $array_filter_uids[] = $etid->etid;
    }
    $sql_filter_uids = "AND uid IN (" . implode(",", $array_filter_uids) . ")";
  }

  if(!empty($gids)){
    if(!empty($gid)){
      $sql_filter_space = "AND etid IN (" . implode(",", $array_filter_uids) . ")";
    }
    $filter_uids = db_query("SELECT etid FROM og_membership WHERE gid IN(".implode(',', $gids).") AND (field_name='og_user_node' OR field_name='og_private') " . $sql_filter_space)->fetchAllAssoc("etid");
    $filter_uids = array_values($filter_uids);
    $array_filter_uids = array();
    foreach($filter_uids as $etid){
      $array_filter_uids[] = $etid->etid;
    }
    $sql_filter_uids = "AND uid IN (" . implode(",", $array_filter_uids) . ")";
  }

  foreach($times as $time){
    // get cached value if any (only available for platform stats)
    if(empty($gids)) {
      $cid = "gofast_stats_get_active_users_values_{$time}";
      $data = cache_get($cid, "cache_gofast_stats")->data ?? FALSE;
    }
    if($data !== FALSE) {
      $return[] = $data;
      continue;
    }
    $to = gofast_stats_get_end_time_by_start_time($step, $time);
    $count_attr = "COUNT(DISTINCT(uid))";
    $return[] = db_query("select COUNT(DISTINCT(uid)) from ceo_vision_audit where event_type='login' AND timestamp <=" . $to . " AND timestamp >=" . $time . " " . $sql_filter_uids)->fetch()->$count_attr;
  }
  return $return;
}

/*
 * Fake form for filter input
 */
function gofast_stats_global_filter_users_form($form, &$form_state){
  global $user;
  $gid = $form_state['build_info']['args'][0];
  $role = array_values((array)gofast_og_get_user_roles($gid, $user->uid))[0];
  $can_download_stats = $role == "administrator member" || gofast_user_is_business_admin($user);
  $apply_button = array(
      'apply' => array(
          '#value' => t('Apply', array(), array('context' => 'gofast:stats')),
          '#type' => 'button',
          '#id' => "users_stats_filter_apply",
          '#attributes' => [
            'class' => ['py-0 input-group-text'],
          ],
      ),
      'download' => $can_download_stats
        ? array(
          '#value' => "<i class='fa fa-file-excel-o'></i>",
          '#type' => 'button',
          '#id' => 'user_export_btn_group_xlsx',
          '#attributes' => array(
              'onClick' => 'event.preventDefault();Gofast.download_stats("user_stats")',
              'class' => ['input-group-text'],
          ),
        )
        : array(),
  );

  $attributes_list_filters = [
    'class' => [' form-control-tags js-tagify'],
    'data-node' => '', // show ac node
  ];

    $form['stats_filters'] = array(
    '#title' => t('Filter users statistics by space', array(), array('context' => 'gofast:stats')),
    '#type' => 'textfield',
    '#name' => 'ac-list-tags-list-filters',
    '#description' => t("You can select spaces in the text input to export memberships between users and these spaces", array(), array('context' => "gofast:gofast_stats")),
    '#size' => 99999,
    '#maxlength' => '', // no maxlength
    '#attributes' => $attributes_list_filters,
    '#field_suffix' => drupal_render($apply_button),
    '#input_group' => TRUE
  );

  return $form;
}

function gofast_modal_select_document_export_fields() {
  
  ctools_include('ajax');
  ctools_include('modal');
  $fields_options = gofast_stats_get_available_fields_export_excel();
  $command[] = array(
    "command" => "modal_display",
    "title" => t("Documents stats export", array(), array("context" => "gofast:gofast_stats")),
    "output" => theme("gofast_stats_select_document_fields_modal", array("fields_options" => $fields_options)),
  );
  print ajax_render($command);
  drupal_exit();
}

function gofast_stats_space_document_stats_genere_file() {
  $gid = gofast_xss_clean($_POST["gid"]);
  $fields = gofast_xss_clean($_POST["fields"]);
  $date = gofast_xss_clean($_POST["date"]);
  $get_subspaces = filter_var(gofast_xss_clean($_POST["get_subspaces"]), FILTER_VALIDATE_BOOLEAN);

  $filters = [];
  $all_gids = [];
  $all_gids[] = $gid;
  if($get_subspaces){
    $childrens_nids = gofast_og_get_children($gid, TRUE, FALSE, TRUE);
    array_push($all_gids, $childrens_nids);
  }
  
  $filters["fields"] = $fields;
  $filters["spaces"] = $all_gids;
  $filters["date"] = $date;
  $_GET['xid'] = base64_encode(json_encode($filters));
  gofast_stats_global_doc_stats_genere_file();
}