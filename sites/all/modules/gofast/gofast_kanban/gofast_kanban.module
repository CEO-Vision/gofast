<?php

require_once 'gofast_kanban.utils.inc';
require_once 'gofast_kanban.board.inc';
require_once 'gofast_kanban.task.inc';
require_once 'gofast_kanban.checklist.inc';
require_once 'gofast_kanban.notif.inc';
require_once 'gofast_kanban.poll.inc';


define('KANBAN_STATUS_VID', 10);
define('KANBAN_NOTIFICATION_DELAY', 300);

function gofast_kanban_cron(){
   $hour = date("G");
   $minute = date("i");
   $now=time();
   $n = variable_get('kanban_notifications',array());
   if(count($n)){
       $update=false;
      foreach($n as $nid => $values){
           if($values['last_update']  + KANBAN_NOTIFICATION_DELAY > $now ){
              $sent_to=array();
              if(isset($values['task'])){
                 $sent_to= gofast_kanban_send_notification($nid,$values['participants'],$values['task']);
              }
              if(isset($values['items'])){
                  $tu=array_unique(array_merge($values['participants'],$send_to));
                  gofast_kanban_checklistItem_notification($nid,$tu,$values['items']);
              }
              $update=true;
              unset($n[$nid]);
           }
       }
       if($update)variable_set('kanban_notifications',$n);
   }
}


/**
 *
 * @return string
 */
function gofast_kanban_menu() {

  $items = array();

  $items['kanban/%/view'] = array(
      'title' => 'Kanban',
      'page callback' => 'gofast_kanban_view_async',
//      'page callback' => 'gofast_kanban_view',
      'page arguments' => array(1),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array('access content')
      //'access callback' => 'gofast_kanban_access', 
     // 'access arguments' => array(1,'view')
  );

  $items['kanban/%/search'] = array(
      'title' => 'Kanban',
      'page callback' => 'gofast_kanban_search_async',
      'page arguments' => array(1),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array('access content')
     // 'access callback' => 'gofast_kanban_access', 
     // 'access arguments' => array(1,'view')
  );
/*
  $items['kanban/%/card/%'] = array(
      'title' => 'Kanban',
      'page callback' => 'gofast_kanban_view',
      'page arguments' => array(1, 3),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
      'access arguments' => array('access content')
  );
*/
   $items['kanban/%/add/column'] = array(
      'title' => 'Kanban new task',
      'page callback' => 'gofast_kanban_board_column_add',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(3, 2, NULL, 1)
  );

  $items['kanban/%/column/%/update'] = array(
      'title' => 'Kanban update column',
      'page callback' => 'gofast_kanban_board_column_update',
      'page arguments' => array(1,3),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 4, NULL, 1)
  );

  $items['kanban/%/column/%/move/%'] = array(
      'title' => 'Kanban edit column',
      'page callback' => 'gofast_kanban_board_column_move',
      'page arguments' => array(1, 3, 5),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 4, NULL, 1)
  );

  $items['kanban/%/column/%/delete'] = array(
      'title' => 'Kanban edit column',
      'page callback' => 'gofast_kanban_board_column_delete',
      'page arguments' => array(1,3),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 4, NULL, 1)
  );

  $items['kanban/%/column/%/add/task'] = array(
      'title' => 'Kanban new task',
      'page callback' => 'gofast_kanban_task_add_prepare',
      'page arguments' => array(1,3),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array('task', 'add', NULL, 1)
  );
  $items['kanban/task/%/get'] = array(
      'title' => 'Kanban get task',
      'page callback' => 'gofast_kanban_get_task_details_json',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 'view')
  );
  $items['kanban/task/%/render/audit'] = array(
      'title' => 'Kanban get task audit',
      'page callback' => 'gofast_kanban_render_task_activities',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 'view')
  );
    
  /*******/
/* GF3 entry
  $items['modal/%ctools_js/node/%/add/task'] = array(
      'title' => 'Kanban new task',
      'page callback' => 'gofast_kanban_task_add',
      'page arguments' => array(1,3),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(5, 4, NULL, 3)
  );

  $items['modal/%ctools_js/node/%/add/task/%'] = array(
      'title' => 'Kanban new task',
      // 'page callback' => 'gofast_kanban_task_add',
      'page callback' => 'gofast_kanban_task_add_async',
      'page arguments' => array(1,3,6),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(5, 4, NULL, 3)
  );
  $items['modal/%ctools_js/task/%/view'] = array(
      'title' => 'Kanban task',
      'page callback' => 'gofast_kanban_task_view',
      'page arguments' => array(1,3),
      'type' => MENU_CALLBACK,
      'access callback' =>  'gofast_kanban_access',
      'access arguments' => array(3, 4)
  );
*/
  $items['kanban/task/%/update'] = array(
      'title' => 'Kanban task',
      'page callback' => 'gofast_kanban_task_update',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 3)
  );

  $items['kanban/task/%/delete'] = array(
      'title' => 'Kanban task',
      'page callback' => 'gofast_kanban_task_delete',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 3)
  );


  $items['kanban/task/%/update_column/%'] = array(
      'title' => 'Change task column',
      'page callback' => 'gofast_kanban_task_update_column',
      'page arguments' => array(2,4),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 3)
  );

  $items['kanban/task/%/update_priority/%'] = array(
      'title' => 'Change task priority',
      'page callback' => 'gofast_kanban_task_update_position',
      'page arguments' => array(2,4),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(2, 3)
  );


  $items['kanban/task/%/add/comment'] = array(
      'title' => 'Add a new comment',
      'page callback' => 'gofast_kanban_task_add_comment',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(4, 3, NULL, 2)
  );

  $items['kanban/task/update/comment/%'] = array(
      'title' => 'Update a comment',
      'page callback' => 'gofast_kanban_task_update_comment',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(3, 2, NULL, 4)
  );

  $items['kanban/task/delete/comment/%'] = array(
      'title' => 'Delete a comment',
      'page callback' => 'gofast_kanban_task_delete_comment',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(3, 2, NULL, 4)
  );

  $items['kanban/task/%/add/todo']= array(
      'title' => 'Add a todo',
      'page callback' => 'gofast_kanban_task_add_todo',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(4, 3, NULL, 2)
  );

  $items['kanban/task/update/todo/%']= array(
      'title' => 'Delete a todo',
      'page callback' => 'gofast_kanban_task_update_todo',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(3, 2, NULL, 4)
  );

  $items['kanban/task/delete/todo/%']= array(
      'title' => 'Delete a todo',
      'page callback' => 'gofast_kanban_task_delete_todo',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(3, 2, NULL, 4)
  );

  $items['kanban/task/update_status/todo/%/%']= array(
      'title' => 'Delete a todo',
      'page callback' => 'gofast_kanban_task_update_todo_status',
      'page arguments' => array(4,5),
      'type' => MENU_CALLBACK,
      'access callback' => 'gofast_kanban_access',
      'access arguments' => array(3, 2, NULL, 4)
  );


  $items['kanban/autocomplete/user/%/%']= array(
      'title' => 'Autocomplete user',
      'page callback' => 'gofast_kanban_autocomplete',
      'page arguments' => array(2, 3, 4),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
  );

  $items['kanban/autocomplete/user-userlist/%/%']= array(
      'title' => 'Autocomplete user/userlist',
      'page callback' => 'gofast_kanban_autocomplete',
      'page arguments' => array(2, 3, 4),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
  );

  $items['kanban/autocomplete/user-not-readonly/%/%']= array(
      'title' => 'Autocomplete user/userlist',
      'page callback' => 'gofast_kanban_autocomplete',
      'page arguments' => array(2, 3, 4),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
  );

  $items['kanban/autocomplete/node/%/%']= array(
      'title' => 'Autocomplete document',
      'page callback' => 'gofast_kanban_autocomplete',
      'page arguments' => array(2, 3, 4),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
  );

  $items['kanban/cards_status/get'] = array(
     'title' => 'Get card available status',
      'page callback' => 'gofast_kanban_get_available_status',
      'page arguments' => array(TRUE),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
  );
  
  return $items;
}



/**
 * Implements HOOK_node_view()
 * @param type $node
 * @param type $view_mode
 * @param type $langcode
 */
function gofast_kanban_node_view($node, $view_mode, $langcode) {
  if ( ($node->type == 'task' || $node->type == 'kanban') && arg(0) == 'node') {
    $parent_space = $node->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];
    $kanban_nid = gofast_kanban_get_space_kanban($parent_space)[0];

    if(gofast_request_is_ajax()){

      $command = array();
      
      global $base_url;
      global $mobile_url;

      if ($base_url == $mobile_url) {
         if($node->type == 'task'){
          $command[] = gofast_command_processAjax("https://" . $_SERVER['SERVER_NAME'] . '/tasks_page_navigation?card_id='.arg(1).'&parent_space='.$kanban_nid.'#navKanban');
          $command[] = ajax_command_invoke('#navigation_kanban', 'click', array());  
        }else{
          $command[] = gofast_command_processAjax("https://" . $_SERVER['SERVER_NAME'] . '/tasks_page_navigation#navKanban');
        } 
      }else{
        if($node->type == 'task'){
          $command[] = gofast_command_processAjax("https://" . $_SERVER['SERVER_NAME'] . '/node/' . $parent_space .'?card_id='.arg(1).'#ogkanban');
        }else{
          $command[] = gofast_command_processAjax("https://" . $_SERVER['SERVER_NAME'] . '/node/' . $parent_space .'#ogkanban');
        }
      }
      


      print ajax_render($command);
      exit();

    }else{
      $options = array('fragment' => 'ogkanban');
      $options['query'] = array('card_id' => arg(1)) ;
      drupal_goto('node/' . $parent_space, $options);
    }
  }
}


/**
 * Create a new date format_type for Kanban usage
 * @return type
 */
function gofast_kanban_add_date_format(){

  $result = db_select('date_format_type', 'a')
    ->fields('a', array('type'))
    ->condition('type', 'short_without_hours')
    ->execute();

  //If already exist, do not create
   if ($result->rowCount() > 0) {
    return;
  }

  /**
   * Create the date format.
   */
  db_insert('date_formats')
      ->fields(array(
          'format' => 'd/m/Y',
          'type' => 'custom',
          'locked' => 0,
      ))
      ->execute();

  db_insert('date_formats')
      ->fields(array(
          'format' => 'm/d/Y',
          'type' => 'custom',
          'locked' => 0,
      ))
      ->execute();

  /**
   * Create the date type.
   */
  db_insert('date_format_type')
      ->fields(array(
          'type' => 'short_without_hours',
          'title' => 'short without hours',
          'locked' => 0,
      ))
      ->execute();

  /**
   * Create the date type translation
   */
  db_insert('date_format_locale')
      ->fields(array(
          'type' => 'short_without_hours',
          'format' => 'm/d/Y',
          'language' => 'en',
      ))
      ->execute();

  db_insert('date_format_locale')
      ->fields(array(
          'type' => 'short_without_hours',
          'format' => 'd/m/Y',
          'language' => 'fr',
      ))
      ->execute();

  // Variable name is date_format_MACHINENAME from previous insert
  variable_set('date_format_short_without_hours', 'm/d/Y');
}


/**
 * Create taxonomy term for kanban (only on INSTALL process)
 */
function gofast_kanban_post_install(){

    //Customized module weight
  db_update('system')
    ->fields(array('weight' => 2 ))
    ->condition('name', 'gofast_kanban', '=')
    ->execute();

  //Add new format type in Taxonomy Format for Kanban and Task (Only if vocab already exist ie. on UPDATE process)
  $vocab_format = taxonomy_vocabulary_machine_name_load('format');
  if(isset($vocab_format ) && $vocab_format !== null){
    $term = (object) array(
              'name' => 'Kanban',
              'description' => 'Kanban',
              'vid' => $vocab_format->vid,
              'uuid' => 'b3f22047-2911-450f-97cd-5745d5e3ce71',
              'field_icone' => array(LANGUAGE_NONE => array('0' => array('value' => 'fa-th'))),
              'field_extensions' => array(LANGUAGE_NONE => array('0' => array('value' => ';kanban;')))
    );
    taxonomy_term_save($term);
    $term = (object) array(
              'name' => 'Task',
              'description' => 'Task',
              'vid' => $vocab_format->vid,
              'uuid' => '8e7cf030-eab9-4538-b940-2565b3352109',
              'field_icone' => array(LANGUAGE_NONE => array('0' => array('value' => 'fa-trello'))),
              'field_extensions' => array(LANGUAGE_NONE => array('0' => array('value' => ';task;')))
    );
    taxonomy_term_save($term);
  }

  //Create taxonomy vocabulary + default terms
  if( taxonomy_vocabulary_machine_name_load('columns') == null ){
    $new_vocab = (object) array(
            'name' => 'Columns',
            'description' => 'Kanban board columns',
            'machine_name' => 'columns',
    );
    taxonomy_vocabulary_save($new_vocab);
  }
  $vocab = taxonomy_vocabulary_machine_name_load('columns');

  //Create field instance programmatically
  $field_name = 'field_default_column';

  $field = field_info_field($field_name);
  if (!$field) {
    $field = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => 'field_default_column',
        'indexes' => array(
            'value' => array(
                0 => 'value',
            ),
        ),
        'locked' => 0,
        'module' => 'list',
        'settings' => array(
            'allowed_values' => array(
                0 => '',
                1 => '',
            ),
            'allowed_values_function' => '',
        ),
        'translatable' => 0,
        'type' => 'list_boolean',
    );
    field_create_field($field);

    $field_instance = array(
        'bundle' => 'columns',
        'default_value' => array(
            0 => array(
                'value' => 1,
            ),
        ),
        'deleted' => 0,
        'description' => 'define if this column is provided as a default column by GoFAST',
        'display' => array(
            'default' => array(
                'label' => 'above',
                'module' => 'list',
                'settings' => array(),
                'type' => 'list_default',
                'weight' => 0,
            ),
        ),
        'entity_type' => 'taxonomy_term',
        'field_name' => 'field_default_column',
        'label' => 'default_column',
        'required' => 1,
        'settings' => array(
            'user_register_form' => FALSE,
        ),
        'widget' => array(
            'active' => 1,
            'module' => 'options',
            'settings' => array(
                'display_label' => 1,
            ),
            'type' => 'options_onoff',
            'weight' => 1,
        ),
    );

    field_create_instance($field_instance);
  }

  $columns = array(0 => 'Backlog', 1 => 'ToDo', 2 => 'In Progress', 3 => 'Done');

  foreach ($columns as $key => $column) {
    $term = (object) array(
            'name' => $column,
            'description' => $column,
            'vid' => $vocab->vid,
            'weight' => $key,
            'field_default_column' => array(LANGUAGE_NONE => array('0' => array('value' => 1)))
    );
    taxonomy_term_save($term);
  }

  //Workaround : Make sure that the field_default_column is set to 1
  db_query("UPDATE field_data_field_default_column SET field_default_column_value=1");
  db_query("UPDATE field_revision_field_default_column SET field_default_column_value=1");

    //Add new format type in Taxonomy Format for Kanban and Task
    $vocab_format = taxonomy_vocabulary_machine_name_load('format');

    if(isset($vocab_format )){
    $term = (object) array(
              'name' => 'Kanban',
              'description' => 'Kanban',
              'vid' => $vocab_format->vid,
              'field_icone' => array(LANGUAGE_NONE => array('0' => array('value' => 'fa-th'))),
              'field_extensions' => array(LANGUAGE_NONE => array('0' => array('value' => ';kanban;')))
    );
    taxonomy_term_save($term);
    $term = (object) array(
              'name' => 'Task',
              'description' => 'Task',
              'vid' => $vocab_format->vid,
              'field_icone' => array(LANGUAGE_NONE => array('0' => array('value' => 'fa-window-maximize'))),
              'field_extensions' => array(LANGUAGE_NONE => array('0' => array('value' => ';task;')))
    );
    taxonomy_term_save($term);
  }

  gofast_kanban_add_date_format();

}

/**
 * Implement HOOK_init()
 */
function gofast_kanban_init(){
    global $user;

  //set default context for polling
  if (strpos($_GET['q'], 'kanban/') === 0) {

    $kanban_nid = explode('/', $_GET['q'])[1];

    $kanban = node_load($kanban_nid, NULL, TRUE);
    $new_columns = array_keys(gofast_kanban_get_columns($kanban));

    gofast_kanban_set_context("node", "kanban_columns", $new_columns);
    gofast_kanban_set_tasks_context("node", "kanban_tasks_updated", gofast_kanban_get_tasks($kanban));
  }

  $tasks = gofast_kanban_get_user_tasks($user->uid, TRUE);
  $tasks_progress = array();
  foreach($tasks as $task){
    $tasks_progress["kanban-" . $task['nid']] = $task['progress'];
  }
  gofast_poll_set_context('workflows', 'tasks_progress', $tasks_progress);
}

function gofast_kanban_preprocess_page(&$variables){
  if( "kanban" == arg()[0]){ // reload for KANBAN (due to use of iframe)
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();

  //  drupal_add_css(drupal_get_path('module', 'gofast_kanban') . '/css/gofast_kanban.css', array('group' => CSS_THEME + 10));

    $detect = new Mobile_Detect;
   //detect if the user_agent correspond to an old IE
    $IE_version = $detect->version('IE');
    if ($IE_version == "7.0" || $IE_version == "8.0" || $IE_version == "9.0" || $IE_version == "10.0" || $IE_version == "11.0" ){

    }else{
//      drupal_add_js(drupal_get_path('module', 'gofast_kanban') . '/js/gofast_kanban.js');
    }

  }
}

/**
 *
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function gofast_kanban_form_node_form_alter(&$form, &$form_state, $form_id){
  $node = $form['#node'];
  
}

/**
 *
 * @global type $user
 * @param type $nid (node->nid)
 * @param type $access
 * @param type $account
 * @param type $args
 * @return type
 */
function gofast_kanban_access($nid, $access, $account = NULL, $args = NULL) {
  $timer_start = microtime(true);
//watchdog('gofast_kanban', '%name() START args=[%args]', array('%name' => __FUNCTION__, '%args' => implode(', ', func_get_args())), WATCHDOG_DEBUG);

  $canAccess = FALSE;
  $space_id = null;

  if(is_numeric($nid)){
    $nid = node_load($nid);
    $type = $nid->type;
  }else{
    $type = is_string($nid) ? $nid : (is_array($nid) ? $nid['type'] : $nid->type);
  }
  
  if (!isset($account)) {
    global $user;
    $account = $user;
  }

  if(! $account->uid){
    return $canAccess;
  }
  
  switch($type):
    case 'kanban':
    case 'column':
       if ($access == 'create' || $access == 'add' || $access == 'move' || $access = 'update' || $access == 'delete') {
         $kanban = node_load($args);
         $space_id = $kanban->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];

        if (gofast_og_is_root_space(node_load($space_id) && !gofast_og_is_user_private_space($space_id))) {
            $canAccess = FALSE;
          }else{
            if (! in_array(GOFAST_OG_ROLE_ADMIN ,gofast_og_get_user_final_roles_for_space('node', $space_id, $account->uid)) ) {
              $canAccess = FALSE;
            }else{
              $canAccess = node_access('update', $space_id, $account);
            }
          }
        }
      break;
    case 'task':
        if ($access == 'create' || $access == 'add') {
          $kanban = node_load($args);
          $space_id = $kanban->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];
          $canAccess = og_user_access('node', $space_id, 'create task content', $account);

        } else if (in_array($access, array('view')) ) {
           $canAccess = node_access($access, $nid, $account);
           
        } else if (in_array($access, array('delete', 'update')) ) {

          $space_id = $nid->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];
          $canAccess = node_access($access, $nid, $account);

        } else if( in_array($access, array('update_column', 'update_priority', 'move_cards'))){

          if($access == 'move_cards'){
            $kanban = node_load($args);
            $space_id = $kanban->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];
          }else{
            $space_id = $nid->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];
          }

          $roles = gofast_og_get_user_final_roles_for_space('node', $space_id, $account->uid);
          $role = reset($roles);

          if(in_array($role, array("administrator member", "group contributor")) || $node->uid == $user->uid){
               $canAccess = true;
          }
        }
      break;
    case 'comment' :
      if ( $access == 'add') {
        $task = node_load($args);
        $canAccess = node_access('update', $task, $account) || gofast_kanban_task_can_comment($task->nid, $account);

      } else if (in_array($access, array('delete', 'update')) ) {
        $comment =  comment_load($args);
        $canAccess = comment_access('edit', $comment, $account);
      }

      break;
    case 'todo' :
       if ( $access == 'add') {
        $task = node_load($args);
        $space_id = $task->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];
        $canAccess = node_access('update', $task, $account);

      } else if (in_array($access, array('delete', 'update')) ) {

        //retreive task from checklistItem
        $checklistItem = gofast_kanban_checklistItem_get($args);
        $checklist = gofast_kanban_mychecklist_load($checklistItem->cid);
        $task = node_load($checklist->task_nid);
        $space_id = $task->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];
        $canAccess = node_access('update', $task, $account);

      }else if($access == 'update_status'){
        //retreive task from checklistItem
        $checklistItem = gofast_kanban_checklistItem_get($args);
        $checklist = gofast_kanban_mychecklist_load($checklistItem->cid);
        $task = node_load($checklist->task_nid);
        $space_id = $task->og_group_content_ref[LANGUAGE_NONE][0]['target_id'];
        $canAccess = node_access('update', $task, $account) || gofast_kanban_checklistItem_canDo($args, $account);
      }

      break;
  endswitch;


  //prevent modification on archived space
  if( $space_id !== null && gofast_group_is_archive(node_load($space_id)) ){
      $canAccess = FALSE;
  }

  $timer_stop = microtime(true);
//watchdog('gofast_kanban', '%name() END - canAccess = %canAccess [execution time = %time s]', array('%name' => __FUNCTION__, '%time' => ($timer_stop - $timer_start), '%canAccess' => $canAccess), WATCHDOG_DEBUG);

  return $canAccess;
}

/**
 *
 * @param type $nid
 * @return string
 */
function gofast_kanban_view($nid = NULL, $card_id = NULL) {

  $filter = NULL;
  $post_variable = filter_input_array(INPUT_POST);
  if(isset($post_variable['filter']) && !empty($post_variable['filter'])){
    $filter = $post_variable['filter'];
  }

  $kanban_project = gofast_kanban_build($nid, $filter);

  return theme('kanban', array('kanban_project' => $kanban_project, 'card_to_display' => $card_id));
//  echo theme('kanban', array('kanban_project' => $kanban_project));
//  echo drupal_render_page('kanban');

}

function gofast_kanban_view_async($nid = NULL){
    
    $tasks = [];
    $kanban = node_load($nid, NULL, TRUE);
    global $user;
    $kanbanData = [];
    $boards = [];

    foreach(gofast_kanban_build($nid, $filter)['tasklists'] as $board) {
        array_push($boards, $board);
    }
    $is_admin=false;
    $is_contributor=false;
    gofast_kanban_get_space_role($kanban, $is_admin, $is_contributor);       
    foreach(gofast_kanban_get_tasks($kanban, NULL, TRUE) as $key => $value){
        foreach($value as $task) {
            $task['board_id'] = $key;
            gofast_kanban_enrich_task($task, $is_admin, $is_contributor);
            array_push($tasks, $task);
        }
    }
    $kanbanData['boards'] = $boards;
    $kanbanData['tasks'] = $tasks;
    $kanbanData['canEditBoards'] = gofast_kanban_access('kanban', 'update', $user, $nid);
    $kanbanData['canMoveCards'] = gofast_kanban_access('task', 'move_cards', $user, $nid);
    $kanbanData['canAddCard'] = gofast_kanban_access('task', 'add', $user, $nid);
    print json_encode($kanbanData);
     
}

function gofast_kanban_get_space_role($kanban, &$is_admin, &$is_contributor ){
    global $user;
    $space_kanban_nid = reset(gofast_og_get_parent($kanban));
    $is_admin = in_array($user->uid, get_all_admin_group($space_kanban_nid)); //admin of this space
    if(!$is_admin){
        $roles = gofast_og_get_user_roles($space_kanban_nid, $user->uid);
        foreach($roles as $key => $value) {
            $is_contributor = (strstr($value, "contributor") != FALSE) ? TRUE : FALSE;
        }
    }
}

function gofast_kanban_search_async($nid){
    $tasks = array();  
    $kanban = node_load($nid, NULL, TRUE);
    $filter = isset($_REQUEST['filter']) ? filter_xss($_REQUEST['filter']) : '';  
    if(is_string($filter) && strlen($filter) > 2){ 
        $tasks = gofast_kanban_search_tasks($kanban, $filter);
    }
    drupal_json_output($tasks);
}

/**
 * Implements HOOK_views_query_alter()
 * @global type $user
 * @param type $view
 * @param type $query
 */
function gofast_kanban_views_query_alter(&$view, &$query){

  $timer_start = microtime(true);
//watchdog('gofast_kanban', '%name() START', array('%name' => __FUNCTION__), WATCHDOG_DEBUG);


  switch($view->name){
    case 'calendar':

     global $user;

      //We retrieve the filters of the query
      $filters = $view->args;
      if(gofast_og_is_user_private_space(node_load($filters[1])) || $view->current_display == "page_4"){

        //Add event from Kanban
        //$query->where[1]['conditions'][2]['field'] = "field_data_field_person_in_charge.field_person_in_charge_target_id";
        $query->where[1]['conditions'][2]['operator'] = "=";
        $query->where[1]['conditions'][2]['value'] = $user->uid;

        //$query->where[1]['conditions'][1]['field'] = "field_data_field_members.field_members_target_id";
        $query->where[3]['conditions'][2]['operator'] = "=";
        $query->where[3]['conditions'][2]['value'] = $user->uid;

        //add query for checklist item

        $checklistItems_of_current_user = gofast_kanban_get_user_checklistItems($user->uid, TRUE);
        $tasks_nid = array();
        foreach($checklistItems_of_current_user as $item){
          $tasks_nid[] = $item->task_nid;
        }

        //Fill a value, to avoid Drupal view query for return EMPTY results! (cf. GOFAST-5514)
        if(count($tasks_nid) == 0){
          $tasks_nid = array('none');
        }

        $query->where[4]['conditions'][0]['field'] = 'node.nid';
        $query->where[4]['conditions'][0]['operator'] = 'IN';
        $query->where[4]['conditions'][0]['value'] = $tasks_nid;

        $query->where[4]['conditions'][1]['field'] = 'node.status';
        $query->where[4]['conditions'][1]['operator'] = '=';
        $query->where[4]['conditions'][1]['value'] = 1;

        $query->where[4]['conditions'][2] = $query->where['date']['conditions'][0];

      }
      else{

        //This is a space, we retrieve the space childrens and fetch into them, verifying rights
        $subspaces = gofast_og_get_children($filters[1], TRUE, FALSE, TRUE);
        foreach($subspaces as $k => $gid){
          if(og_get_membership('node', $gid, 'user', $user->uid) == FALSE){ //Check membership
            unset($subspaces[$k]);
          }
        }

        $subspaces[] = $filters[1];
        $subspaces = array_values($subspaces);

        $query->where[1]['conditions'][2]['field'] = "og_membership.gid";
        $query->where[1]['conditions'][2]['operator'] = "IN";
        $query->where[1]['conditions'][2]['value'] = $subspaces;

        $query->where[3]['conditions'][2]['field'] = "og_membership.gid";
        $query->where[3]['conditions'][2]['operator'] = "IN";
        $query->where[3]['conditions'][2]['value'] = $subspaces;
      }

      //report period filter on sub conditions
      $query->where[1]['conditions'][] = $query->where['date']['conditions'][0];
      $query->where[3]['conditions'][] = $query->where['date']['conditions'][0];

      unset($query->where['date']);

      break;
  }

}
/*
 * Implements hook_api_RESSOURCE_ACTION
 * retreive all the kanban task (still in progress) for the current user
 * @global type $user
 * @param type $params
 * @return type
 */
function gofast_api_kanban_user_task($params){

  $timer_start = microtime(true);
//watchdog('gofast_kanban', '%name() START', array('%name' => __FUNCTION__), WATCHDOG_DEBUG);

  //Check content type
    if(strpos($params['Content-Type'], "application/json") === FALSE){
        return gofast_api_not_implemented("This Content-Type");
    }

    //Check method
    if($params['method'] != "GET"){
        gofast_api_not_implemented("This method");
    }

    //Check authentication
    global $user;
    if($user->uid == 0){
       gofast_api_not_authorized("Unavailable ressource for anonymous user");
    }

    $user_tasks = gofast_kanban_get_user_tasks($user->uid, TRUE);
    $json_tasks = array("tasks" => $user_tasks) ;
    $user_tasks_json =  $json_tasks;

    gofast_api_success(array('userTasks' => $user_tasks_json));

    $timer_stop = microtime(true);
//watchdog('gofast_kanban', '%name() END - [execution time = %time s]', array('%name' => __FUNCTION__, '%time' => ($timer_stop - $timer_start)), WATCHDOG_DEBUG);

}


/**
 * Implements HOOK_theme()
 * @return type
 */
function gofast_kanban_theme() {
  return array(
      'kanban' => array(
          'template' => 'tpl/gofast_kanban_board',
          'variables' => array(
              'kanban_project' => NULL,
              'card_to_display'=> NULL
          )
      ),
      'kanban_simplified' => array(
        'template' => 'tpl/gofast_kanban_simplified_board',
        'variables' => array(
          'kanban_id' => NULL,
          'group_user_gids' => NULL
        )
      ),
      'kanban_add_task' => array(
          'template' => 'tpl/gofast_kanban_create_task_form',
          'variable' => array('form' => NULL)
      ),
      'kanban_task' => array(
          'template' => 'tpl/gofast_kanban_task_card',
          'variables' => array(
              'tasklist' => NULL,
              'tasks' => NULL,
              'kanban_nid' => NULL
          )
      ),
      'kanban_task_details' => array(
          'template' => 'tpl/gofast_kanban_task_card_details',
          'variables' => array(
              'task' => NULL,
              'todo_form' => NULL,
              'comment_form' => NULL,
              'task_todolists' => NULL,
              'task_activities' => NULL
          )
      ),
      'kanban_column' => array(
          'template' => 'tpl/gofast_kanban_column',
          'variables' => array(
              'tasklist' => NULL,
              'kanban_nid' => NULL,
              'tasks' => NULL,
              'kanban_space_nid' => NULL
          )
      ),
      'kanban_checklist' => array(
          'template' => 'tpl/gofast_kanban_checklist',
          'variables' => array(
              'todolist' => array()
          )
      ),
      'kanban_activities' => array(
          'template' => 'tpl/gofast_kanban_activities',
          'variables' => array(
              'activities' => NULL
          )
      ),
      'kanban_comment_form' => array(
          'template'  => 'tpl/gofast_kanban_comment_form',
          'render element' => 'form'
      ),
      'kanban_checklist_item_form' => array(
          'template' => 'tpl/gofast_kanban_checklist_item_form',
          'render element' => 'form'
      ),
      'gofast-notifications-node-task-deadline-change' => array(
          'template' => 'tpl/gofast-notifications-node-task-deadline-change'
      ),
      'gofast-notifications-node-kanban-event' => array(
          'template' => 'tpl/gofast-notifications-node-kanban-event'
      ),
      'gofast-notifications-node-task-status' => array(
          'template' => 'tpl/gofast-notifications-node-task-status'
      ),
      'gofast-notifications-node-task-deadline' => array(
          'template' => 'tpl/gofast-notifications-node-task-deadline'
      ),
      'gofast-notifications-node-card-detail' => array(
          'template' => 'tpl/gofast-notifications-node-card-detail',
          'variable' => array(
            'node' => NULL,
            'task' => NULL,
            'l' => NULL
          )
      ),

      'kanban_rapiddashboard' => array(
          'template' => 'tpl/gofast_kanban_rapiddashboard',
          'variable' => array()
      ),
      'kanban_rapiddashboard_task' => array(
          'template' => 'tpl/gofast_kanban_rapiddashboard_task',
          'variable' => array('task' => NULL)
      ),
      'gofast_kanban_og_container' => array(
          'template' => 'tpl/gofast-kanban-og-container',
          'variable' => array('node' => NULL)
      )
  );
}
