<?php

/**
 * @file
 * UUID support for i18n_taxonomy.
 */

/**
 * Implements hook_enable().
 *
 * Use UUID instead of TID as string identifiers.
 * @ceovision : Change update db at enable/disabled instead of install/unistall
 *  + propagate updates to i18n_string table
 */
function i18n_taxonomy_uuid_enable() {
  // Load all taxonomy term translations.
  // Replace TID with UUID.

  // Generate missing UUID's.
  module_load_include('inc', 'uuid', 'uuid');
  uuid_sync_all();
  watchdog("i18n_taxonomy_uuid", "Created missing UUID's");


  // Load taxonomy translation sources.
  $taxonomy_locales_sources = db_select('locales_source')
    ->fields('locales_source')
    ->condition('textgroup', 'taxonomy', '=')
    ->execute()
    ->fetchAll();


  // Heavy, but this is just one time.
  foreach ($taxonomy_locales_sources as $source) {

    // 'term:{tid}:{name/description}
    $context_array = explode(':', $source->context);
    // 'taxonomy:term:{tid}:{name/description}
    $location_array = explode(':', $source->location);


    // Skip this source if it is not a taxonomy-term.
    if ('term' != $context_array[0]) {
      continue;
    }


    // UUID id's are not integers, but TID's are. Check for it if this query
    // has run before.

    // $tid is 2nd in 'context' -> 'term:{tid}:name'
    $tid = $context_array[1];

    if (!is_numeric($tid)) {
      continue;
    }


    // Load full term and extract UUID.
    $term = taxonomy_term_load($tid);
    if (!is_object($term)) {
      continue;
    }

    $uuid = $term->uuid;

    // Update arrays.
    $location_array[2] = $uuid;
    $context_array[1] = $uuid;

    // Update source in db.
    db_update('locales_source')
      ->fields(array(
        'location' => implode(':', $location_array),
        'context' => implode(':', $context_array),
      ))
      ->condition('lid', $source->lid)
      ->execute();
    
     //Updates i18n_string in db
    db_update('i18n_string')
      ->fields(array(
        'objectid' => $uuid,
        'context' => implode(':', $context_array),
      ))
      ->condition('lid', $source->lid)
      ->execute();
  }
  watchdog("i18n_taxonomy_uuid", "Converted taxonomy locale string to UUID's");
}

/**
 * Implements hook_disable().
 *
 * Revert back to TID as string identifiers.
 * 
 * @ceovision : Change update db at enable/disabled instead of install/unistall
 *  + propagate updates to i18n_string table
 */
function i18n_taxonomy_uuid_disable() {
  // Load all taxonomy term translations.
  // Replace UUID with TID.


  // Load taxonomy translation sources.
  $taxonomy_locales_sources = db_select('locales_source')
    ->fields('locales_source')
    ->condition('textgroup', 'taxonomy', '=')
    ->execute()
    ->fetchAll();


  // Heavy, but this is just one time.
  foreach ($taxonomy_locales_sources as $source) {

    // 'term:{uuid}:{name/description}
    $context_array = explode(':', $source->context);
    // 'taxonomy:term:{uuid}:{name/description}
    $location_array = explode(':', $source->location);


    // Skip this source if it is not a taxonomy-term.
    if ('term' != $context_array[0]) {
      continue;
    }


    // UUID id's are not integers, but TID's are. Check for it if this query
    // has run before.

    // $uuid is 2nd in 'context' -> 'term:{uuid}:name'
    $uuid = $context_array[1];

    if (is_numeric($uuid)) {
      continue;
    }


    // Load full term and extract UUID.
    $term = entity_get_id_by_uuid('taxonomy_term', array($uuid));
    if (!is_array($term)) {
      continue;
    }


    $tid = reset($term);

    // Update arrays.
    $location_array[2] = $tid;
    $context_array[1] = $tid;

    // Update source in db.
    db_update('locales_source')
      ->fields(array(
        'location' => implode(':', $location_array),
        'context' => implode(':', $context_array),
      ))
      ->condition('lid', $source->lid)
      ->execute();
    
    //Updates i18n_string in db
    db_update('i18n_string')
      ->fields(array(
        'objectid' => $tid,
        'context' => implode(':', $context_array),
      ))
      ->condition('lid', $source->lid)
      ->execute();
  }
  watchdog("i18n_taxonomy_uuid", "Converted taxonomy locale string to TID's");
}
